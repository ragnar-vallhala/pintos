/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_UFS_GENERATED_TRACERS_H
#define TRACE_HW_UFS_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_UFS_IRQ_RAISE_EVENT;
extern TraceEvent _TRACE_UFS_IRQ_LOWER_EVENT;
extern TraceEvent _TRACE_UFS_MMIO_READ_EVENT;
extern TraceEvent _TRACE_UFS_MMIO_WRITE_EVENT;
extern TraceEvent _TRACE_UFS_PROCESS_DB_EVENT;
extern TraceEvent _TRACE_UFS_PROCESS_REQ_EVENT;
extern TraceEvent _TRACE_UFS_COMPLETE_REQ_EVENT;
extern TraceEvent _TRACE_UFS_SENDBACK_REQ_EVENT;
extern TraceEvent _TRACE_UFS_EXEC_NOP_CMD_EVENT;
extern TraceEvent _TRACE_UFS_EXEC_SCSI_CMD_EVENT;
extern TraceEvent _TRACE_UFS_EXEC_QUERY_CMD_EVENT;
extern TraceEvent _TRACE_UFS_PROCESS_UICCMD_EVENT;
extern TraceEvent _TRACE_UFS_MCQ_COMPLETE_REQ_EVENT;
extern TraceEvent _TRACE_UFS_MCQ_CREATE_SQ_EVENT;
extern TraceEvent _TRACE_UFS_MCQ_CREATE_CQ_EVENT;
extern TraceEvent _TRACE_UFS_ERR_DMA_READ_UTRD_EVENT;
extern TraceEvent _TRACE_UFS_ERR_DMA_READ_REQ_UPIU_EVENT;
extern TraceEvent _TRACE_UFS_ERR_DMA_READ_PRDT_EVENT;
extern TraceEvent _TRACE_UFS_ERR_DMA_READ_SQ_EVENT;
extern TraceEvent _TRACE_UFS_ERR_DMA_WRITE_UTRD_EVENT;
extern TraceEvent _TRACE_UFS_ERR_DMA_WRITE_RSP_UPIU_EVENT;
extern TraceEvent _TRACE_UFS_ERR_DMA_WRITE_CQ_EVENT;
extern TraceEvent _TRACE_UFS_ERR_UTRL_SLOT_ERROR_EVENT;
extern TraceEvent _TRACE_UFS_ERR_UTRL_SLOT_BUSY_EVENT;
extern TraceEvent _TRACE_UFS_ERR_UNSUPPORT_REGISTER_OFFSET_EVENT;
extern TraceEvent _TRACE_UFS_ERR_INVALID_REGISTER_OFFSET_EVENT;
extern TraceEvent _TRACE_UFS_ERR_SCSI_CMD_INVALID_LUN_EVENT;
extern TraceEvent _TRACE_UFS_ERR_QUERY_FLAG_NOT_READABLE_EVENT;
extern TraceEvent _TRACE_UFS_ERR_QUERY_FLAG_NOT_WRITABLE_EVENT;
extern TraceEvent _TRACE_UFS_ERR_QUERY_ATTR_NOT_READABLE_EVENT;
extern TraceEvent _TRACE_UFS_ERR_QUERY_ATTR_NOT_WRITABLE_EVENT;
extern TraceEvent _TRACE_UFS_ERR_QUERY_INVALID_OPCODE_EVENT;
extern TraceEvent _TRACE_UFS_ERR_QUERY_INVALID_IDN_EVENT;
extern TraceEvent _TRACE_UFS_ERR_QUERY_INVALID_INDEX_EVENT;
extern TraceEvent _TRACE_UFS_ERR_INVALID_TRANS_CODE_EVENT;
extern TraceEvent _TRACE_UFS_ERR_MCQ_DB_WR_INVALID_SQID_EVENT;
extern TraceEvent _TRACE_UFS_ERR_MCQ_DB_WR_INVALID_DB_EVENT;
extern TraceEvent _TRACE_UFS_ERR_MCQ_CREATE_SQ_INVALID_SQID_EVENT;
extern TraceEvent _TRACE_UFS_ERR_MCQ_CREATE_SQ_INVALID_CQID_EVENT;
extern TraceEvent _TRACE_UFS_ERR_MCQ_CREATE_SQ_ALREADY_EXISTS_EVENT;
extern TraceEvent _TRACE_UFS_ERR_MCQ_DELETE_SQ_INVALID_SQID_EVENT;
extern TraceEvent _TRACE_UFS_ERR_MCQ_DELETE_SQ_NOT_EXISTS_EVENT;
extern TraceEvent _TRACE_UFS_ERR_MCQ_CREATE_CQ_INVALID_CQID_EVENT;
extern TraceEvent _TRACE_UFS_ERR_MCQ_CREATE_CQ_ALREADY_EXISTS_EVENT;
extern TraceEvent _TRACE_UFS_ERR_MCQ_DELETE_CQ_INVALID_CQID_EVENT;
extern TraceEvent _TRACE_UFS_ERR_MCQ_DELETE_CQ_NOT_EXISTS_EVENT;
extern TraceEvent _TRACE_UFS_ERR_MCQ_DELETE_CQ_SQ_NOT_DELETED_EVENT;
extern uint16_t _TRACE_UFS_IRQ_RAISE_DSTATE;
extern uint16_t _TRACE_UFS_IRQ_LOWER_DSTATE;
extern uint16_t _TRACE_UFS_MMIO_READ_DSTATE;
extern uint16_t _TRACE_UFS_MMIO_WRITE_DSTATE;
extern uint16_t _TRACE_UFS_PROCESS_DB_DSTATE;
extern uint16_t _TRACE_UFS_PROCESS_REQ_DSTATE;
extern uint16_t _TRACE_UFS_COMPLETE_REQ_DSTATE;
extern uint16_t _TRACE_UFS_SENDBACK_REQ_DSTATE;
extern uint16_t _TRACE_UFS_EXEC_NOP_CMD_DSTATE;
extern uint16_t _TRACE_UFS_EXEC_SCSI_CMD_DSTATE;
extern uint16_t _TRACE_UFS_EXEC_QUERY_CMD_DSTATE;
extern uint16_t _TRACE_UFS_PROCESS_UICCMD_DSTATE;
extern uint16_t _TRACE_UFS_MCQ_COMPLETE_REQ_DSTATE;
extern uint16_t _TRACE_UFS_MCQ_CREATE_SQ_DSTATE;
extern uint16_t _TRACE_UFS_MCQ_CREATE_CQ_DSTATE;
extern uint16_t _TRACE_UFS_ERR_DMA_READ_UTRD_DSTATE;
extern uint16_t _TRACE_UFS_ERR_DMA_READ_REQ_UPIU_DSTATE;
extern uint16_t _TRACE_UFS_ERR_DMA_READ_PRDT_DSTATE;
extern uint16_t _TRACE_UFS_ERR_DMA_READ_SQ_DSTATE;
extern uint16_t _TRACE_UFS_ERR_DMA_WRITE_UTRD_DSTATE;
extern uint16_t _TRACE_UFS_ERR_DMA_WRITE_RSP_UPIU_DSTATE;
extern uint16_t _TRACE_UFS_ERR_DMA_WRITE_CQ_DSTATE;
extern uint16_t _TRACE_UFS_ERR_UTRL_SLOT_ERROR_DSTATE;
extern uint16_t _TRACE_UFS_ERR_UTRL_SLOT_BUSY_DSTATE;
extern uint16_t _TRACE_UFS_ERR_UNSUPPORT_REGISTER_OFFSET_DSTATE;
extern uint16_t _TRACE_UFS_ERR_INVALID_REGISTER_OFFSET_DSTATE;
extern uint16_t _TRACE_UFS_ERR_SCSI_CMD_INVALID_LUN_DSTATE;
extern uint16_t _TRACE_UFS_ERR_QUERY_FLAG_NOT_READABLE_DSTATE;
extern uint16_t _TRACE_UFS_ERR_QUERY_FLAG_NOT_WRITABLE_DSTATE;
extern uint16_t _TRACE_UFS_ERR_QUERY_ATTR_NOT_READABLE_DSTATE;
extern uint16_t _TRACE_UFS_ERR_QUERY_ATTR_NOT_WRITABLE_DSTATE;
extern uint16_t _TRACE_UFS_ERR_QUERY_INVALID_OPCODE_DSTATE;
extern uint16_t _TRACE_UFS_ERR_QUERY_INVALID_IDN_DSTATE;
extern uint16_t _TRACE_UFS_ERR_QUERY_INVALID_INDEX_DSTATE;
extern uint16_t _TRACE_UFS_ERR_INVALID_TRANS_CODE_DSTATE;
extern uint16_t _TRACE_UFS_ERR_MCQ_DB_WR_INVALID_SQID_DSTATE;
extern uint16_t _TRACE_UFS_ERR_MCQ_DB_WR_INVALID_DB_DSTATE;
extern uint16_t _TRACE_UFS_ERR_MCQ_CREATE_SQ_INVALID_SQID_DSTATE;
extern uint16_t _TRACE_UFS_ERR_MCQ_CREATE_SQ_INVALID_CQID_DSTATE;
extern uint16_t _TRACE_UFS_ERR_MCQ_CREATE_SQ_ALREADY_EXISTS_DSTATE;
extern uint16_t _TRACE_UFS_ERR_MCQ_DELETE_SQ_INVALID_SQID_DSTATE;
extern uint16_t _TRACE_UFS_ERR_MCQ_DELETE_SQ_NOT_EXISTS_DSTATE;
extern uint16_t _TRACE_UFS_ERR_MCQ_CREATE_CQ_INVALID_CQID_DSTATE;
extern uint16_t _TRACE_UFS_ERR_MCQ_CREATE_CQ_ALREADY_EXISTS_DSTATE;
extern uint16_t _TRACE_UFS_ERR_MCQ_DELETE_CQ_INVALID_CQID_DSTATE;
extern uint16_t _TRACE_UFS_ERR_MCQ_DELETE_CQ_NOT_EXISTS_DSTATE;
extern uint16_t _TRACE_UFS_ERR_MCQ_DELETE_CQ_SQ_NOT_DELETED_DSTATE;
#define TRACE_UFS_IRQ_RAISE_ENABLED 1
#define TRACE_UFS_IRQ_LOWER_ENABLED 1
#define TRACE_UFS_MMIO_READ_ENABLED 1
#define TRACE_UFS_MMIO_WRITE_ENABLED 1
#define TRACE_UFS_PROCESS_DB_ENABLED 1
#define TRACE_UFS_PROCESS_REQ_ENABLED 1
#define TRACE_UFS_COMPLETE_REQ_ENABLED 1
#define TRACE_UFS_SENDBACK_REQ_ENABLED 1
#define TRACE_UFS_EXEC_NOP_CMD_ENABLED 1
#define TRACE_UFS_EXEC_SCSI_CMD_ENABLED 1
#define TRACE_UFS_EXEC_QUERY_CMD_ENABLED 1
#define TRACE_UFS_PROCESS_UICCMD_ENABLED 1
#define TRACE_UFS_MCQ_COMPLETE_REQ_ENABLED 1
#define TRACE_UFS_MCQ_CREATE_SQ_ENABLED 1
#define TRACE_UFS_MCQ_CREATE_CQ_ENABLED 1
#define TRACE_UFS_ERR_DMA_READ_UTRD_ENABLED 1
#define TRACE_UFS_ERR_DMA_READ_REQ_UPIU_ENABLED 1
#define TRACE_UFS_ERR_DMA_READ_PRDT_ENABLED 1
#define TRACE_UFS_ERR_DMA_READ_SQ_ENABLED 1
#define TRACE_UFS_ERR_DMA_WRITE_UTRD_ENABLED 1
#define TRACE_UFS_ERR_DMA_WRITE_RSP_UPIU_ENABLED 1
#define TRACE_UFS_ERR_DMA_WRITE_CQ_ENABLED 1
#define TRACE_UFS_ERR_UTRL_SLOT_ERROR_ENABLED 1
#define TRACE_UFS_ERR_UTRL_SLOT_BUSY_ENABLED 1
#define TRACE_UFS_ERR_UNSUPPORT_REGISTER_OFFSET_ENABLED 1
#define TRACE_UFS_ERR_INVALID_REGISTER_OFFSET_ENABLED 1
#define TRACE_UFS_ERR_SCSI_CMD_INVALID_LUN_ENABLED 1
#define TRACE_UFS_ERR_QUERY_FLAG_NOT_READABLE_ENABLED 1
#define TRACE_UFS_ERR_QUERY_FLAG_NOT_WRITABLE_ENABLED 1
#define TRACE_UFS_ERR_QUERY_ATTR_NOT_READABLE_ENABLED 1
#define TRACE_UFS_ERR_QUERY_ATTR_NOT_WRITABLE_ENABLED 1
#define TRACE_UFS_ERR_QUERY_INVALID_OPCODE_ENABLED 1
#define TRACE_UFS_ERR_QUERY_INVALID_IDN_ENABLED 1
#define TRACE_UFS_ERR_QUERY_INVALID_INDEX_ENABLED 1
#define TRACE_UFS_ERR_INVALID_TRANS_CODE_ENABLED 1
#define TRACE_UFS_ERR_MCQ_DB_WR_INVALID_SQID_ENABLED 1
#define TRACE_UFS_ERR_MCQ_DB_WR_INVALID_DB_ENABLED 1
#define TRACE_UFS_ERR_MCQ_CREATE_SQ_INVALID_SQID_ENABLED 1
#define TRACE_UFS_ERR_MCQ_CREATE_SQ_INVALID_CQID_ENABLED 1
#define TRACE_UFS_ERR_MCQ_CREATE_SQ_ALREADY_EXISTS_ENABLED 1
#define TRACE_UFS_ERR_MCQ_DELETE_SQ_INVALID_SQID_ENABLED 1
#define TRACE_UFS_ERR_MCQ_DELETE_SQ_NOT_EXISTS_ENABLED 1
#define TRACE_UFS_ERR_MCQ_CREATE_CQ_INVALID_CQID_ENABLED 1
#define TRACE_UFS_ERR_MCQ_CREATE_CQ_ALREADY_EXISTS_ENABLED 1
#define TRACE_UFS_ERR_MCQ_DELETE_CQ_INVALID_CQID_ENABLED 1
#define TRACE_UFS_ERR_MCQ_DELETE_CQ_NOT_EXISTS_ENABLED 1
#define TRACE_UFS_ERR_MCQ_DELETE_CQ_SQ_NOT_DELETED_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_UFS_IRQ_RAISE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_IRQ_RAISE) || \
    false)

static inline void _nocheck__trace_ufs_irq_raise(void)
{
    if (trace_event_get_state(TRACE_UFS_IRQ_RAISE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 2 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_irq_raise " "INTx" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 169 "trace/trace-hw_ufs.h"
        } else {
#line 2 "../hw/ufs/trace-events"
            qemu_log("ufs_irq_raise " "INTx" "\n");
#line 173 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_irq_raise(void)
{
    if (true) {
        _nocheck__trace_ufs_irq_raise();
    }
}

#define TRACE_UFS_IRQ_LOWER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_IRQ_LOWER) || \
    false)

static inline void _nocheck__trace_ufs_irq_lower(void)
{
    if (trace_event_get_state(TRACE_UFS_IRQ_LOWER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 3 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_irq_lower " "INTx" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 200 "trace/trace-hw_ufs.h"
        } else {
#line 3 "../hw/ufs/trace-events"
            qemu_log("ufs_irq_lower " "INTx" "\n");
#line 204 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_irq_lower(void)
{
    if (true) {
        _nocheck__trace_ufs_irq_lower();
    }
}

#define TRACE_UFS_MMIO_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_MMIO_READ) || \
    false)

static inline void _nocheck__trace_ufs_mmio_read(uint64_t addr, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_UFS_MMIO_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_mmio_read " "addr 0x%"PRIx64" data 0x%"PRIx64" size %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, data, size);
#line 231 "trace/trace-hw_ufs.h"
        } else {
#line 4 "../hw/ufs/trace-events"
            qemu_log("ufs_mmio_read " "addr 0x%"PRIx64" data 0x%"PRIx64" size %d" "\n", addr, data, size);
#line 235 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_mmio_read(uint64_t addr, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_ufs_mmio_read(addr, data, size);
    }
}

#define TRACE_UFS_MMIO_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_MMIO_WRITE) || \
    false)

static inline void _nocheck__trace_ufs_mmio_write(uint64_t addr, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_UFS_MMIO_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_mmio_write " "addr 0x%"PRIx64" data 0x%"PRIx64" size %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, data, size);
#line 262 "trace/trace-hw_ufs.h"
        } else {
#line 5 "../hw/ufs/trace-events"
            qemu_log("ufs_mmio_write " "addr 0x%"PRIx64" data 0x%"PRIx64" size %d" "\n", addr, data, size);
#line 266 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_mmio_write(uint64_t addr, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_ufs_mmio_write(addr, data, size);
    }
}

#define TRACE_UFS_PROCESS_DB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_PROCESS_DB) || \
    false)

static inline void _nocheck__trace_ufs_process_db(uint32_t slot)
{
    if (trace_event_get_state(TRACE_UFS_PROCESS_DB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_process_db " "UTRLDBR slot %"PRIu32"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot);
#line 293 "trace/trace-hw_ufs.h"
        } else {
#line 6 "../hw/ufs/trace-events"
            qemu_log("ufs_process_db " "UTRLDBR slot %"PRIu32"" "\n", slot);
#line 297 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_process_db(uint32_t slot)
{
    if (true) {
        _nocheck__trace_ufs_process_db(slot);
    }
}

#define TRACE_UFS_PROCESS_REQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_PROCESS_REQ) || \
    false)

static inline void _nocheck__trace_ufs_process_req(uint32_t slot)
{
    if (trace_event_get_state(TRACE_UFS_PROCESS_REQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_process_req " "UTRLDBR slot %"PRIu32"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot);
#line 324 "trace/trace-hw_ufs.h"
        } else {
#line 7 "../hw/ufs/trace-events"
            qemu_log("ufs_process_req " "UTRLDBR slot %"PRIu32"" "\n", slot);
#line 328 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_process_req(uint32_t slot)
{
    if (true) {
        _nocheck__trace_ufs_process_req(slot);
    }
}

#define TRACE_UFS_COMPLETE_REQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_COMPLETE_REQ) || \
    false)

static inline void _nocheck__trace_ufs_complete_req(uint32_t slot)
{
    if (trace_event_get_state(TRACE_UFS_COMPLETE_REQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_complete_req " "UTRLDBR slot %"PRIu32"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot);
#line 355 "trace/trace-hw_ufs.h"
        } else {
#line 8 "../hw/ufs/trace-events"
            qemu_log("ufs_complete_req " "UTRLDBR slot %"PRIu32"" "\n", slot);
#line 359 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_complete_req(uint32_t slot)
{
    if (true) {
        _nocheck__trace_ufs_complete_req(slot);
    }
}

#define TRACE_UFS_SENDBACK_REQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SENDBACK_REQ) || \
    false)

static inline void _nocheck__trace_ufs_sendback_req(uint32_t slot)
{
    if (trace_event_get_state(TRACE_UFS_SENDBACK_REQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_sendback_req " "UTRLDBR slot %"PRIu32"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot);
#line 386 "trace/trace-hw_ufs.h"
        } else {
#line 9 "../hw/ufs/trace-events"
            qemu_log("ufs_sendback_req " "UTRLDBR slot %"PRIu32"" "\n", slot);
#line 390 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_sendback_req(uint32_t slot)
{
    if (true) {
        _nocheck__trace_ufs_sendback_req(slot);
    }
}

#define TRACE_UFS_EXEC_NOP_CMD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_EXEC_NOP_CMD) || \
    false)

static inline void _nocheck__trace_ufs_exec_nop_cmd(uint32_t slot)
{
    if (trace_event_get_state(TRACE_UFS_EXEC_NOP_CMD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_exec_nop_cmd " "UTRLDBR slot %"PRIu32"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot);
#line 417 "trace/trace-hw_ufs.h"
        } else {
#line 10 "../hw/ufs/trace-events"
            qemu_log("ufs_exec_nop_cmd " "UTRLDBR slot %"PRIu32"" "\n", slot);
#line 421 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_exec_nop_cmd(uint32_t slot)
{
    if (true) {
        _nocheck__trace_ufs_exec_nop_cmd(slot);
    }
}

#define TRACE_UFS_EXEC_SCSI_CMD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_EXEC_SCSI_CMD) || \
    false)

static inline void _nocheck__trace_ufs_exec_scsi_cmd(uint32_t slot, uint8_t lun, uint8_t opcode)
{
    if (trace_event_get_state(TRACE_UFS_EXEC_SCSI_CMD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_exec_scsi_cmd " "slot %"PRIu32", lun 0x%"PRIx8", opcode 0x%"PRIx8"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot, lun, opcode);
#line 448 "trace/trace-hw_ufs.h"
        } else {
#line 11 "../hw/ufs/trace-events"
            qemu_log("ufs_exec_scsi_cmd " "slot %"PRIu32", lun 0x%"PRIx8", opcode 0x%"PRIx8"" "\n", slot, lun, opcode);
#line 452 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_exec_scsi_cmd(uint32_t slot, uint8_t lun, uint8_t opcode)
{
    if (true) {
        _nocheck__trace_ufs_exec_scsi_cmd(slot, lun, opcode);
    }
}

#define TRACE_UFS_EXEC_QUERY_CMD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_EXEC_QUERY_CMD) || \
    false)

static inline void _nocheck__trace_ufs_exec_query_cmd(uint32_t slot, uint8_t opcode)
{
    if (trace_event_get_state(TRACE_UFS_EXEC_QUERY_CMD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_exec_query_cmd " "slot %"PRIu32", opcode 0x%"PRIx8"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot, opcode);
#line 479 "trace/trace-hw_ufs.h"
        } else {
#line 12 "../hw/ufs/trace-events"
            qemu_log("ufs_exec_query_cmd " "slot %"PRIu32", opcode 0x%"PRIx8"" "\n", slot, opcode);
#line 483 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_exec_query_cmd(uint32_t slot, uint8_t opcode)
{
    if (true) {
        _nocheck__trace_ufs_exec_query_cmd(slot, opcode);
    }
}

#define TRACE_UFS_PROCESS_UICCMD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_PROCESS_UICCMD) || \
    false)

static inline void _nocheck__trace_ufs_process_uiccmd(uint32_t uiccmd, uint32_t ucmdarg1, uint32_t ucmdarg2, uint32_t ucmdarg3)
{
    if (trace_event_get_state(TRACE_UFS_PROCESS_UICCMD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_process_uiccmd " "uiccmd 0x%"PRIx32", ucmdarg1 0x%"PRIx32", ucmdarg2 0x%"PRIx32", ucmdarg3 0x%"PRIx32"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , uiccmd, ucmdarg1, ucmdarg2, ucmdarg3);
#line 510 "trace/trace-hw_ufs.h"
        } else {
#line 13 "../hw/ufs/trace-events"
            qemu_log("ufs_process_uiccmd " "uiccmd 0x%"PRIx32", ucmdarg1 0x%"PRIx32", ucmdarg2 0x%"PRIx32", ucmdarg3 0x%"PRIx32"" "\n", uiccmd, ucmdarg1, ucmdarg2, ucmdarg3);
#line 514 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_process_uiccmd(uint32_t uiccmd, uint32_t ucmdarg1, uint32_t ucmdarg2, uint32_t ucmdarg3)
{
    if (true) {
        _nocheck__trace_ufs_process_uiccmd(uiccmd, ucmdarg1, ucmdarg2, ucmdarg3);
    }
}

#define TRACE_UFS_MCQ_COMPLETE_REQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_MCQ_COMPLETE_REQ) || \
    false)

static inline void _nocheck__trace_ufs_mcq_complete_req(uint8_t qid)
{
    if (trace_event_get_state(TRACE_UFS_MCQ_COMPLETE_REQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 14 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_mcq_complete_req " "sqid %"PRIu8"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid);
#line 541 "trace/trace-hw_ufs.h"
        } else {
#line 14 "../hw/ufs/trace-events"
            qemu_log("ufs_mcq_complete_req " "sqid %"PRIu8"" "\n", qid);
#line 545 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_mcq_complete_req(uint8_t qid)
{
    if (true) {
        _nocheck__trace_ufs_mcq_complete_req(qid);
    }
}

#define TRACE_UFS_MCQ_CREATE_SQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_MCQ_CREATE_SQ) || \
    false)

static inline void _nocheck__trace_ufs_mcq_create_sq(uint8_t sqid, uint8_t cqid, uint64_t addr, uint16_t size)
{
    if (trace_event_get_state(TRACE_UFS_MCQ_CREATE_SQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 15 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_mcq_create_sq " "mcq create sq sqid %"PRIu8", cqid %"PRIu8", addr 0x%"PRIx64", size %"PRIu16"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , sqid, cqid, addr, size);
#line 572 "trace/trace-hw_ufs.h"
        } else {
#line 15 "../hw/ufs/trace-events"
            qemu_log("ufs_mcq_create_sq " "mcq create sq sqid %"PRIu8", cqid %"PRIu8", addr 0x%"PRIx64", size %"PRIu16"" "\n", sqid, cqid, addr, size);
#line 576 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_mcq_create_sq(uint8_t sqid, uint8_t cqid, uint64_t addr, uint16_t size)
{
    if (true) {
        _nocheck__trace_ufs_mcq_create_sq(sqid, cqid, addr, size);
    }
}

#define TRACE_UFS_MCQ_CREATE_CQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_MCQ_CREATE_CQ) || \
    false)

static inline void _nocheck__trace_ufs_mcq_create_cq(uint8_t cqid, uint64_t addr, uint16_t size)
{
    if (trace_event_get_state(TRACE_UFS_MCQ_CREATE_CQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_mcq_create_cq " "mcq create cq cqid %"PRIu8", addr 0x%"PRIx64", size %"PRIu16"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cqid, addr, size);
#line 603 "trace/trace-hw_ufs.h"
        } else {
#line 16 "../hw/ufs/trace-events"
            qemu_log("ufs_mcq_create_cq " "mcq create cq cqid %"PRIu8", addr 0x%"PRIx64", size %"PRIu16"" "\n", cqid, addr, size);
#line 607 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_mcq_create_cq(uint8_t cqid, uint64_t addr, uint16_t size)
{
    if (true) {
        _nocheck__trace_ufs_mcq_create_cq(cqid, addr, size);
    }
}

#define TRACE_UFS_ERR_DMA_READ_UTRD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_DMA_READ_UTRD) || \
    false)

static inline void _nocheck__trace_ufs_err_dma_read_utrd(uint32_t slot, uint64_t addr)
{
    if (trace_event_get_state(TRACE_UFS_ERR_DMA_READ_UTRD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 19 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_dma_read_utrd " "failed to read utrd. UTRLDBR slot %"PRIu32", UTRD dma addr %"PRIu64"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot, addr);
#line 634 "trace/trace-hw_ufs.h"
        } else {
#line 19 "../hw/ufs/trace-events"
            qemu_log("ufs_err_dma_read_utrd " "failed to read utrd. UTRLDBR slot %"PRIu32", UTRD dma addr %"PRIu64"" "\n", slot, addr);
#line 638 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_dma_read_utrd(uint32_t slot, uint64_t addr)
{
    if (true) {
        _nocheck__trace_ufs_err_dma_read_utrd(slot, addr);
    }
}

#define TRACE_UFS_ERR_DMA_READ_REQ_UPIU_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_DMA_READ_REQ_UPIU) || \
    false)

static inline void _nocheck__trace_ufs_err_dma_read_req_upiu(uint32_t slot, uint64_t addr)
{
    if (trace_event_get_state(TRACE_UFS_ERR_DMA_READ_REQ_UPIU) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 20 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_dma_read_req_upiu " "failed to read req upiu. UTRLDBR slot %"PRIu32", request upiu addr %"PRIu64"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot, addr);
#line 665 "trace/trace-hw_ufs.h"
        } else {
#line 20 "../hw/ufs/trace-events"
            qemu_log("ufs_err_dma_read_req_upiu " "failed to read req upiu. UTRLDBR slot %"PRIu32", request upiu addr %"PRIu64"" "\n", slot, addr);
#line 669 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_dma_read_req_upiu(uint32_t slot, uint64_t addr)
{
    if (true) {
        _nocheck__trace_ufs_err_dma_read_req_upiu(slot, addr);
    }
}

#define TRACE_UFS_ERR_DMA_READ_PRDT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_DMA_READ_PRDT) || \
    false)

static inline void _nocheck__trace_ufs_err_dma_read_prdt(uint32_t slot, uint64_t addr)
{
    if (trace_event_get_state(TRACE_UFS_ERR_DMA_READ_PRDT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 21 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_dma_read_prdt " "failed to read prdt. UTRLDBR slot %"PRIu32", prdt addr %"PRIu64"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot, addr);
#line 696 "trace/trace-hw_ufs.h"
        } else {
#line 21 "../hw/ufs/trace-events"
            qemu_log("ufs_err_dma_read_prdt " "failed to read prdt. UTRLDBR slot %"PRIu32", prdt addr %"PRIu64"" "\n", slot, addr);
#line 700 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_dma_read_prdt(uint32_t slot, uint64_t addr)
{
    if (true) {
        _nocheck__trace_ufs_err_dma_read_prdt(slot, addr);
    }
}

#define TRACE_UFS_ERR_DMA_READ_SQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_DMA_READ_SQ) || \
    false)

static inline void _nocheck__trace_ufs_err_dma_read_sq(uint8_t sqid, uint64_t addr)
{
    if (trace_event_get_state(TRACE_UFS_ERR_DMA_READ_SQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 22 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_dma_read_sq " "failed to read sq entry. sqid %"PRIu8", hwaddr %"PRIu64"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , sqid, addr);
#line 727 "trace/trace-hw_ufs.h"
        } else {
#line 22 "../hw/ufs/trace-events"
            qemu_log("ufs_err_dma_read_sq " "failed to read sq entry. sqid %"PRIu8", hwaddr %"PRIu64"" "\n", sqid, addr);
#line 731 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_dma_read_sq(uint8_t sqid, uint64_t addr)
{
    if (true) {
        _nocheck__trace_ufs_err_dma_read_sq(sqid, addr);
    }
}

#define TRACE_UFS_ERR_DMA_WRITE_UTRD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_DMA_WRITE_UTRD) || \
    false)

static inline void _nocheck__trace_ufs_err_dma_write_utrd(uint32_t slot, uint64_t addr)
{
    if (trace_event_get_state(TRACE_UFS_ERR_DMA_WRITE_UTRD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 23 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_dma_write_utrd " "failed to write utrd. UTRLDBR slot %"PRIu32", UTRD dma addr %"PRIu64"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot, addr);
#line 758 "trace/trace-hw_ufs.h"
        } else {
#line 23 "../hw/ufs/trace-events"
            qemu_log("ufs_err_dma_write_utrd " "failed to write utrd. UTRLDBR slot %"PRIu32", UTRD dma addr %"PRIu64"" "\n", slot, addr);
#line 762 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_dma_write_utrd(uint32_t slot, uint64_t addr)
{
    if (true) {
        _nocheck__trace_ufs_err_dma_write_utrd(slot, addr);
    }
}

#define TRACE_UFS_ERR_DMA_WRITE_RSP_UPIU_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_DMA_WRITE_RSP_UPIU) || \
    false)

static inline void _nocheck__trace_ufs_err_dma_write_rsp_upiu(uint32_t slot, uint64_t addr)
{
    if (trace_event_get_state(TRACE_UFS_ERR_DMA_WRITE_RSP_UPIU) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 24 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_dma_write_rsp_upiu " "failed to write rsp upiu. UTRLDBR slot %"PRIu32", response upiu addr %"PRIu64"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot, addr);
#line 789 "trace/trace-hw_ufs.h"
        } else {
#line 24 "../hw/ufs/trace-events"
            qemu_log("ufs_err_dma_write_rsp_upiu " "failed to write rsp upiu. UTRLDBR slot %"PRIu32", response upiu addr %"PRIu64"" "\n", slot, addr);
#line 793 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_dma_write_rsp_upiu(uint32_t slot, uint64_t addr)
{
    if (true) {
        _nocheck__trace_ufs_err_dma_write_rsp_upiu(slot, addr);
    }
}

#define TRACE_UFS_ERR_DMA_WRITE_CQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_DMA_WRITE_CQ) || \
    false)

static inline void _nocheck__trace_ufs_err_dma_write_cq(uint8_t cqid, uint64_t addr)
{
    if (trace_event_get_state(TRACE_UFS_ERR_DMA_WRITE_CQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 25 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_dma_write_cq " "failed to write cq entry. cqid %"PRIu8", hwaddr %"PRIu64"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cqid, addr);
#line 820 "trace/trace-hw_ufs.h"
        } else {
#line 25 "../hw/ufs/trace-events"
            qemu_log("ufs_err_dma_write_cq " "failed to write cq entry. cqid %"PRIu8", hwaddr %"PRIu64"" "\n", cqid, addr);
#line 824 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_dma_write_cq(uint8_t cqid, uint64_t addr)
{
    if (true) {
        _nocheck__trace_ufs_err_dma_write_cq(cqid, addr);
    }
}

#define TRACE_UFS_ERR_UTRL_SLOT_ERROR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_UTRL_SLOT_ERROR) || \
    false)

static inline void _nocheck__trace_ufs_err_utrl_slot_error(uint32_t slot)
{
    if (trace_event_get_state(TRACE_UFS_ERR_UTRL_SLOT_ERROR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 26 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_utrl_slot_error " "UTRLDBR slot %"PRIu32" is in error" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot);
#line 851 "trace/trace-hw_ufs.h"
        } else {
#line 26 "../hw/ufs/trace-events"
            qemu_log("ufs_err_utrl_slot_error " "UTRLDBR slot %"PRIu32" is in error" "\n", slot);
#line 855 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_utrl_slot_error(uint32_t slot)
{
    if (true) {
        _nocheck__trace_ufs_err_utrl_slot_error(slot);
    }
}

#define TRACE_UFS_ERR_UTRL_SLOT_BUSY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_UTRL_SLOT_BUSY) || \
    false)

static inline void _nocheck__trace_ufs_err_utrl_slot_busy(uint32_t slot)
{
    if (trace_event_get_state(TRACE_UFS_ERR_UTRL_SLOT_BUSY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 27 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_utrl_slot_busy " "UTRLDBR slot %"PRIu32" is busy" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot);
#line 882 "trace/trace-hw_ufs.h"
        } else {
#line 27 "../hw/ufs/trace-events"
            qemu_log("ufs_err_utrl_slot_busy " "UTRLDBR slot %"PRIu32" is busy" "\n", slot);
#line 886 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_utrl_slot_busy(uint32_t slot)
{
    if (true) {
        _nocheck__trace_ufs_err_utrl_slot_busy(slot);
    }
}

#define TRACE_UFS_ERR_UNSUPPORT_REGISTER_OFFSET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_UNSUPPORT_REGISTER_OFFSET) || \
    false)

static inline void _nocheck__trace_ufs_err_unsupport_register_offset(uint32_t offset)
{
    if (trace_event_get_state(TRACE_UFS_ERR_UNSUPPORT_REGISTER_OFFSET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 28 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_unsupport_register_offset " "Register offset 0x%"PRIx32" is not yet supported" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset);
#line 913 "trace/trace-hw_ufs.h"
        } else {
#line 28 "../hw/ufs/trace-events"
            qemu_log("ufs_err_unsupport_register_offset " "Register offset 0x%"PRIx32" is not yet supported" "\n", offset);
#line 917 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_unsupport_register_offset(uint32_t offset)
{
    if (true) {
        _nocheck__trace_ufs_err_unsupport_register_offset(offset);
    }
}

#define TRACE_UFS_ERR_INVALID_REGISTER_OFFSET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_INVALID_REGISTER_OFFSET) || \
    false)

static inline void _nocheck__trace_ufs_err_invalid_register_offset(uint32_t offset)
{
    if (trace_event_get_state(TRACE_UFS_ERR_INVALID_REGISTER_OFFSET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 29 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_invalid_register_offset " "Register offset 0x%"PRIx32" is invalid" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset);
#line 944 "trace/trace-hw_ufs.h"
        } else {
#line 29 "../hw/ufs/trace-events"
            qemu_log("ufs_err_invalid_register_offset " "Register offset 0x%"PRIx32" is invalid" "\n", offset);
#line 948 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_invalid_register_offset(uint32_t offset)
{
    if (true) {
        _nocheck__trace_ufs_err_invalid_register_offset(offset);
    }
}

#define TRACE_UFS_ERR_SCSI_CMD_INVALID_LUN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_SCSI_CMD_INVALID_LUN) || \
    false)

static inline void _nocheck__trace_ufs_err_scsi_cmd_invalid_lun(uint8_t lun)
{
    if (trace_event_get_state(TRACE_UFS_ERR_SCSI_CMD_INVALID_LUN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 30 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_scsi_cmd_invalid_lun " "scsi command has invalid lun: 0x%"PRIx8"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , lun);
#line 975 "trace/trace-hw_ufs.h"
        } else {
#line 30 "../hw/ufs/trace-events"
            qemu_log("ufs_err_scsi_cmd_invalid_lun " "scsi command has invalid lun: 0x%"PRIx8"" "\n", lun);
#line 979 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_scsi_cmd_invalid_lun(uint8_t lun)
{
    if (true) {
        _nocheck__trace_ufs_err_scsi_cmd_invalid_lun(lun);
    }
}

#define TRACE_UFS_ERR_QUERY_FLAG_NOT_READABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_QUERY_FLAG_NOT_READABLE) || \
    false)

static inline void _nocheck__trace_ufs_err_query_flag_not_readable(uint8_t idn)
{
    if (trace_event_get_state(TRACE_UFS_ERR_QUERY_FLAG_NOT_READABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 31 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_query_flag_not_readable " "query flag idn 0x%"PRIx8" is denied to read" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , idn);
#line 1006 "trace/trace-hw_ufs.h"
        } else {
#line 31 "../hw/ufs/trace-events"
            qemu_log("ufs_err_query_flag_not_readable " "query flag idn 0x%"PRIx8" is denied to read" "\n", idn);
#line 1010 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_query_flag_not_readable(uint8_t idn)
{
    if (true) {
        _nocheck__trace_ufs_err_query_flag_not_readable(idn);
    }
}

#define TRACE_UFS_ERR_QUERY_FLAG_NOT_WRITABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_QUERY_FLAG_NOT_WRITABLE) || \
    false)

static inline void _nocheck__trace_ufs_err_query_flag_not_writable(uint8_t idn)
{
    if (trace_event_get_state(TRACE_UFS_ERR_QUERY_FLAG_NOT_WRITABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 32 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_query_flag_not_writable " "query flag idn 0x%"PRIx8" is denied to write" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , idn);
#line 1037 "trace/trace-hw_ufs.h"
        } else {
#line 32 "../hw/ufs/trace-events"
            qemu_log("ufs_err_query_flag_not_writable " "query flag idn 0x%"PRIx8" is denied to write" "\n", idn);
#line 1041 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_query_flag_not_writable(uint8_t idn)
{
    if (true) {
        _nocheck__trace_ufs_err_query_flag_not_writable(idn);
    }
}

#define TRACE_UFS_ERR_QUERY_ATTR_NOT_READABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_QUERY_ATTR_NOT_READABLE) || \
    false)

static inline void _nocheck__trace_ufs_err_query_attr_not_readable(uint8_t idn)
{
    if (trace_event_get_state(TRACE_UFS_ERR_QUERY_ATTR_NOT_READABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 33 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_query_attr_not_readable " "query attribute idn 0x%"PRIx8" is denied to read" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , idn);
#line 1068 "trace/trace-hw_ufs.h"
        } else {
#line 33 "../hw/ufs/trace-events"
            qemu_log("ufs_err_query_attr_not_readable " "query attribute idn 0x%"PRIx8" is denied to read" "\n", idn);
#line 1072 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_query_attr_not_readable(uint8_t idn)
{
    if (true) {
        _nocheck__trace_ufs_err_query_attr_not_readable(idn);
    }
}

#define TRACE_UFS_ERR_QUERY_ATTR_NOT_WRITABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_QUERY_ATTR_NOT_WRITABLE) || \
    false)

static inline void _nocheck__trace_ufs_err_query_attr_not_writable(uint8_t idn)
{
    if (trace_event_get_state(TRACE_UFS_ERR_QUERY_ATTR_NOT_WRITABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 34 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_query_attr_not_writable " "query attribute idn 0x%"PRIx8" is denied to write" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , idn);
#line 1099 "trace/trace-hw_ufs.h"
        } else {
#line 34 "../hw/ufs/trace-events"
            qemu_log("ufs_err_query_attr_not_writable " "query attribute idn 0x%"PRIx8" is denied to write" "\n", idn);
#line 1103 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_query_attr_not_writable(uint8_t idn)
{
    if (true) {
        _nocheck__trace_ufs_err_query_attr_not_writable(idn);
    }
}

#define TRACE_UFS_ERR_QUERY_INVALID_OPCODE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_QUERY_INVALID_OPCODE) || \
    false)

static inline void _nocheck__trace_ufs_err_query_invalid_opcode(uint8_t opcode)
{
    if (trace_event_get_state(TRACE_UFS_ERR_QUERY_INVALID_OPCODE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 35 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_query_invalid_opcode " "query request has invalid opcode. opcode: 0x%"PRIx8"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , opcode);
#line 1130 "trace/trace-hw_ufs.h"
        } else {
#line 35 "../hw/ufs/trace-events"
            qemu_log("ufs_err_query_invalid_opcode " "query request has invalid opcode. opcode: 0x%"PRIx8"" "\n", opcode);
#line 1134 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_query_invalid_opcode(uint8_t opcode)
{
    if (true) {
        _nocheck__trace_ufs_err_query_invalid_opcode(opcode);
    }
}

#define TRACE_UFS_ERR_QUERY_INVALID_IDN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_QUERY_INVALID_IDN) || \
    false)

static inline void _nocheck__trace_ufs_err_query_invalid_idn(uint8_t opcode, uint8_t idn)
{
    if (trace_event_get_state(TRACE_UFS_ERR_QUERY_INVALID_IDN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 36 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_query_invalid_idn " "query request has invalid idn. opcode: 0x%"PRIx8", idn 0x%"PRIx8"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , opcode, idn);
#line 1161 "trace/trace-hw_ufs.h"
        } else {
#line 36 "../hw/ufs/trace-events"
            qemu_log("ufs_err_query_invalid_idn " "query request has invalid idn. opcode: 0x%"PRIx8", idn 0x%"PRIx8"" "\n", opcode, idn);
#line 1165 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_query_invalid_idn(uint8_t opcode, uint8_t idn)
{
    if (true) {
        _nocheck__trace_ufs_err_query_invalid_idn(opcode, idn);
    }
}

#define TRACE_UFS_ERR_QUERY_INVALID_INDEX_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_QUERY_INVALID_INDEX) || \
    false)

static inline void _nocheck__trace_ufs_err_query_invalid_index(uint8_t opcode, uint8_t index)
{
    if (trace_event_get_state(TRACE_UFS_ERR_QUERY_INVALID_INDEX) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 37 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_query_invalid_index " "query request has invalid index. opcode: 0x%"PRIx8", index 0x%"PRIx8"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , opcode, index);
#line 1192 "trace/trace-hw_ufs.h"
        } else {
#line 37 "../hw/ufs/trace-events"
            qemu_log("ufs_err_query_invalid_index " "query request has invalid index. opcode: 0x%"PRIx8", index 0x%"PRIx8"" "\n", opcode, index);
#line 1196 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_query_invalid_index(uint8_t opcode, uint8_t index)
{
    if (true) {
        _nocheck__trace_ufs_err_query_invalid_index(opcode, index);
    }
}

#define TRACE_UFS_ERR_INVALID_TRANS_CODE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_INVALID_TRANS_CODE) || \
    false)

static inline void _nocheck__trace_ufs_err_invalid_trans_code(uint32_t slot, uint8_t trans_code)
{
    if (trace_event_get_state(TRACE_UFS_ERR_INVALID_TRANS_CODE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 38 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_invalid_trans_code " "request upiu has invalid transaction code. slot: %"PRIu32", trans_code: 0x%"PRIx8"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot, trans_code);
#line 1223 "trace/trace-hw_ufs.h"
        } else {
#line 38 "../hw/ufs/trace-events"
            qemu_log("ufs_err_invalid_trans_code " "request upiu has invalid transaction code. slot: %"PRIu32", trans_code: 0x%"PRIx8"" "\n", slot, trans_code);
#line 1227 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_invalid_trans_code(uint32_t slot, uint8_t trans_code)
{
    if (true) {
        _nocheck__trace_ufs_err_invalid_trans_code(slot, trans_code);
    }
}

#define TRACE_UFS_ERR_MCQ_DB_WR_INVALID_SQID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_MCQ_DB_WR_INVALID_SQID) || \
    false)

static inline void _nocheck__trace_ufs_err_mcq_db_wr_invalid_sqid(uint8_t qid)
{
    if (trace_event_get_state(TRACE_UFS_ERR_MCQ_DB_WR_INVALID_SQID) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 39 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_mcq_db_wr_invalid_sqid " "invalid mcq sqid %"PRIu8"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid);
#line 1254 "trace/trace-hw_ufs.h"
        } else {
#line 39 "../hw/ufs/trace-events"
            qemu_log("ufs_err_mcq_db_wr_invalid_sqid " "invalid mcq sqid %"PRIu8"" "\n", qid);
#line 1258 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_mcq_db_wr_invalid_sqid(uint8_t qid)
{
    if (true) {
        _nocheck__trace_ufs_err_mcq_db_wr_invalid_sqid(qid);
    }
}

#define TRACE_UFS_ERR_MCQ_DB_WR_INVALID_DB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_MCQ_DB_WR_INVALID_DB) || \
    false)

static inline void _nocheck__trace_ufs_err_mcq_db_wr_invalid_db(uint8_t qid, uint32_t db)
{
    if (trace_event_get_state(TRACE_UFS_ERR_MCQ_DB_WR_INVALID_DB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 40 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_mcq_db_wr_invalid_db " "invalid mcq doorbell sqid %"PRIu8", db %"PRIu32"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid, db);
#line 1285 "trace/trace-hw_ufs.h"
        } else {
#line 40 "../hw/ufs/trace-events"
            qemu_log("ufs_err_mcq_db_wr_invalid_db " "invalid mcq doorbell sqid %"PRIu8", db %"PRIu32"" "\n", qid, db);
#line 1289 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_mcq_db_wr_invalid_db(uint8_t qid, uint32_t db)
{
    if (true) {
        _nocheck__trace_ufs_err_mcq_db_wr_invalid_db(qid, db);
    }
}

#define TRACE_UFS_ERR_MCQ_CREATE_SQ_INVALID_SQID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_MCQ_CREATE_SQ_INVALID_SQID) || \
    false)

static inline void _nocheck__trace_ufs_err_mcq_create_sq_invalid_sqid(uint8_t qid)
{
    if (trace_event_get_state(TRACE_UFS_ERR_MCQ_CREATE_SQ_INVALID_SQID) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 41 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_mcq_create_sq_invalid_sqid " "invalid mcq sqid %"PRIu8"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid);
#line 1316 "trace/trace-hw_ufs.h"
        } else {
#line 41 "../hw/ufs/trace-events"
            qemu_log("ufs_err_mcq_create_sq_invalid_sqid " "invalid mcq sqid %"PRIu8"" "\n", qid);
#line 1320 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_mcq_create_sq_invalid_sqid(uint8_t qid)
{
    if (true) {
        _nocheck__trace_ufs_err_mcq_create_sq_invalid_sqid(qid);
    }
}

#define TRACE_UFS_ERR_MCQ_CREATE_SQ_INVALID_CQID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_MCQ_CREATE_SQ_INVALID_CQID) || \
    false)

static inline void _nocheck__trace_ufs_err_mcq_create_sq_invalid_cqid(uint8_t qid)
{
    if (trace_event_get_state(TRACE_UFS_ERR_MCQ_CREATE_SQ_INVALID_CQID) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 42 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_mcq_create_sq_invalid_cqid " "invalid mcq cqid %"PRIu8"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid);
#line 1347 "trace/trace-hw_ufs.h"
        } else {
#line 42 "../hw/ufs/trace-events"
            qemu_log("ufs_err_mcq_create_sq_invalid_cqid " "invalid mcq cqid %"PRIu8"" "\n", qid);
#line 1351 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_mcq_create_sq_invalid_cqid(uint8_t qid)
{
    if (true) {
        _nocheck__trace_ufs_err_mcq_create_sq_invalid_cqid(qid);
    }
}

#define TRACE_UFS_ERR_MCQ_CREATE_SQ_ALREADY_EXISTS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_MCQ_CREATE_SQ_ALREADY_EXISTS) || \
    false)

static inline void _nocheck__trace_ufs_err_mcq_create_sq_already_exists(uint8_t qid)
{
    if (trace_event_get_state(TRACE_UFS_ERR_MCQ_CREATE_SQ_ALREADY_EXISTS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 43 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_mcq_create_sq_already_exists " "mcq sqid %"PRIu8 "already exists" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid);
#line 1378 "trace/trace-hw_ufs.h"
        } else {
#line 43 "../hw/ufs/trace-events"
            qemu_log("ufs_err_mcq_create_sq_already_exists " "mcq sqid %"PRIu8 "already exists" "\n", qid);
#line 1382 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_mcq_create_sq_already_exists(uint8_t qid)
{
    if (true) {
        _nocheck__trace_ufs_err_mcq_create_sq_already_exists(qid);
    }
}

#define TRACE_UFS_ERR_MCQ_DELETE_SQ_INVALID_SQID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_MCQ_DELETE_SQ_INVALID_SQID) || \
    false)

static inline void _nocheck__trace_ufs_err_mcq_delete_sq_invalid_sqid(uint8_t qid)
{
    if (trace_event_get_state(TRACE_UFS_ERR_MCQ_DELETE_SQ_INVALID_SQID) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 44 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_mcq_delete_sq_invalid_sqid " "invalid mcq sqid %"PRIu8"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid);
#line 1409 "trace/trace-hw_ufs.h"
        } else {
#line 44 "../hw/ufs/trace-events"
            qemu_log("ufs_err_mcq_delete_sq_invalid_sqid " "invalid mcq sqid %"PRIu8"" "\n", qid);
#line 1413 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_mcq_delete_sq_invalid_sqid(uint8_t qid)
{
    if (true) {
        _nocheck__trace_ufs_err_mcq_delete_sq_invalid_sqid(qid);
    }
}

#define TRACE_UFS_ERR_MCQ_DELETE_SQ_NOT_EXISTS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_MCQ_DELETE_SQ_NOT_EXISTS) || \
    false)

static inline void _nocheck__trace_ufs_err_mcq_delete_sq_not_exists(uint8_t qid)
{
    if (trace_event_get_state(TRACE_UFS_ERR_MCQ_DELETE_SQ_NOT_EXISTS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 45 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_mcq_delete_sq_not_exists " "mcq sqid %"PRIu8 "not exists" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid);
#line 1440 "trace/trace-hw_ufs.h"
        } else {
#line 45 "../hw/ufs/trace-events"
            qemu_log("ufs_err_mcq_delete_sq_not_exists " "mcq sqid %"PRIu8 "not exists" "\n", qid);
#line 1444 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_mcq_delete_sq_not_exists(uint8_t qid)
{
    if (true) {
        _nocheck__trace_ufs_err_mcq_delete_sq_not_exists(qid);
    }
}

#define TRACE_UFS_ERR_MCQ_CREATE_CQ_INVALID_CQID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_MCQ_CREATE_CQ_INVALID_CQID) || \
    false)

static inline void _nocheck__trace_ufs_err_mcq_create_cq_invalid_cqid(uint8_t qid)
{
    if (trace_event_get_state(TRACE_UFS_ERR_MCQ_CREATE_CQ_INVALID_CQID) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 46 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_mcq_create_cq_invalid_cqid " "invalid mcq cqid %"PRIu8"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid);
#line 1471 "trace/trace-hw_ufs.h"
        } else {
#line 46 "../hw/ufs/trace-events"
            qemu_log("ufs_err_mcq_create_cq_invalid_cqid " "invalid mcq cqid %"PRIu8"" "\n", qid);
#line 1475 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_mcq_create_cq_invalid_cqid(uint8_t qid)
{
    if (true) {
        _nocheck__trace_ufs_err_mcq_create_cq_invalid_cqid(qid);
    }
}

#define TRACE_UFS_ERR_MCQ_CREATE_CQ_ALREADY_EXISTS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_MCQ_CREATE_CQ_ALREADY_EXISTS) || \
    false)

static inline void _nocheck__trace_ufs_err_mcq_create_cq_already_exists(uint8_t qid)
{
    if (trace_event_get_state(TRACE_UFS_ERR_MCQ_CREATE_CQ_ALREADY_EXISTS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 47 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_mcq_create_cq_already_exists " "mcq cqid %"PRIu8 "already exists" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid);
#line 1502 "trace/trace-hw_ufs.h"
        } else {
#line 47 "../hw/ufs/trace-events"
            qemu_log("ufs_err_mcq_create_cq_already_exists " "mcq cqid %"PRIu8 "already exists" "\n", qid);
#line 1506 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_mcq_create_cq_already_exists(uint8_t qid)
{
    if (true) {
        _nocheck__trace_ufs_err_mcq_create_cq_already_exists(qid);
    }
}

#define TRACE_UFS_ERR_MCQ_DELETE_CQ_INVALID_CQID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_MCQ_DELETE_CQ_INVALID_CQID) || \
    false)

static inline void _nocheck__trace_ufs_err_mcq_delete_cq_invalid_cqid(uint8_t qid)
{
    if (trace_event_get_state(TRACE_UFS_ERR_MCQ_DELETE_CQ_INVALID_CQID) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 48 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_mcq_delete_cq_invalid_cqid " "invalid mcq cqid %"PRIu8"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid);
#line 1533 "trace/trace-hw_ufs.h"
        } else {
#line 48 "../hw/ufs/trace-events"
            qemu_log("ufs_err_mcq_delete_cq_invalid_cqid " "invalid mcq cqid %"PRIu8"" "\n", qid);
#line 1537 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_mcq_delete_cq_invalid_cqid(uint8_t qid)
{
    if (true) {
        _nocheck__trace_ufs_err_mcq_delete_cq_invalid_cqid(qid);
    }
}

#define TRACE_UFS_ERR_MCQ_DELETE_CQ_NOT_EXISTS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_MCQ_DELETE_CQ_NOT_EXISTS) || \
    false)

static inline void _nocheck__trace_ufs_err_mcq_delete_cq_not_exists(uint8_t qid)
{
    if (trace_event_get_state(TRACE_UFS_ERR_MCQ_DELETE_CQ_NOT_EXISTS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 49 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_mcq_delete_cq_not_exists " "mcq cqid %"PRIu8 "not exists" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid);
#line 1564 "trace/trace-hw_ufs.h"
        } else {
#line 49 "../hw/ufs/trace-events"
            qemu_log("ufs_err_mcq_delete_cq_not_exists " "mcq cqid %"PRIu8 "not exists" "\n", qid);
#line 1568 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_mcq_delete_cq_not_exists(uint8_t qid)
{
    if (true) {
        _nocheck__trace_ufs_err_mcq_delete_cq_not_exists(qid);
    }
}

#define TRACE_UFS_ERR_MCQ_DELETE_CQ_SQ_NOT_DELETED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_MCQ_DELETE_CQ_SQ_NOT_DELETED) || \
    false)

static inline void _nocheck__trace_ufs_err_mcq_delete_cq_sq_not_deleted(uint8_t sqid, uint8_t cqid)
{
    if (trace_event_get_state(TRACE_UFS_ERR_MCQ_DELETE_CQ_SQ_NOT_DELETED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 50 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_mcq_delete_cq_sq_not_deleted " "mcq sq %"PRIu8" still has cq %"PRIu8"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , sqid, cqid);
#line 1595 "trace/trace-hw_ufs.h"
        } else {
#line 50 "../hw/ufs/trace-events"
            qemu_log("ufs_err_mcq_delete_cq_sq_not_deleted " "mcq sq %"PRIu8" still has cq %"PRIu8"" "\n", sqid, cqid);
#line 1599 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_mcq_delete_cq_sq_not_deleted(uint8_t sqid, uint8_t cqid)
{
    if (true) {
        _nocheck__trace_ufs_err_mcq_delete_cq_sq_not_deleted(sqid, cqid);
    }
}
#endif /* TRACE_HW_UFS_GENERATED_TRACERS_H */
