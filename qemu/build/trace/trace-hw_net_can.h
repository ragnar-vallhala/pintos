/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_NET_CAN_GENERATED_TRACERS_H
#define TRACE_HW_NET_CAN_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_XLNX_CAN_UPDATE_IRQ_EVENT;
extern TraceEvent _TRACE_XLNX_CAN_RESET_EVENT;
extern TraceEvent _TRACE_XLNX_CAN_RX_FIFO_FILTER_REJECT_EVENT;
extern TraceEvent _TRACE_XLNX_CAN_FILTER_ID_PRE_WRITE_EVENT;
extern TraceEvent _TRACE_XLNX_CAN_FILTER_MASK_PRE_WRITE_EVENT;
extern TraceEvent _TRACE_XLNX_CAN_TX_DATA_EVENT;
extern TraceEvent _TRACE_XLNX_CAN_RX_DATA_EVENT;
extern TraceEvent _TRACE_XLNX_CAN_RX_DISCARD_EVENT;
extern TraceEvent _TRACE_XLNX_CANFD_UPDATE_IRQ_EVENT;
extern TraceEvent _TRACE_XLNX_CANFD_RX_FIFO_FILTER_REJECT_EVENT;
extern TraceEvent _TRACE_XLNX_CANFD_RX_DATA_EVENT;
extern TraceEvent _TRACE_XLNX_CANFD_TX_DATA_EVENT;
extern TraceEvent _TRACE_XLNX_CANFD_RESET_EVENT;
extern uint16_t _TRACE_XLNX_CAN_UPDATE_IRQ_DSTATE;
extern uint16_t _TRACE_XLNX_CAN_RESET_DSTATE;
extern uint16_t _TRACE_XLNX_CAN_RX_FIFO_FILTER_REJECT_DSTATE;
extern uint16_t _TRACE_XLNX_CAN_FILTER_ID_PRE_WRITE_DSTATE;
extern uint16_t _TRACE_XLNX_CAN_FILTER_MASK_PRE_WRITE_DSTATE;
extern uint16_t _TRACE_XLNX_CAN_TX_DATA_DSTATE;
extern uint16_t _TRACE_XLNX_CAN_RX_DATA_DSTATE;
extern uint16_t _TRACE_XLNX_CAN_RX_DISCARD_DSTATE;
extern uint16_t _TRACE_XLNX_CANFD_UPDATE_IRQ_DSTATE;
extern uint16_t _TRACE_XLNX_CANFD_RX_FIFO_FILTER_REJECT_DSTATE;
extern uint16_t _TRACE_XLNX_CANFD_RX_DATA_DSTATE;
extern uint16_t _TRACE_XLNX_CANFD_TX_DATA_DSTATE;
extern uint16_t _TRACE_XLNX_CANFD_RESET_DSTATE;
#define TRACE_XLNX_CAN_UPDATE_IRQ_ENABLED 1
#define TRACE_XLNX_CAN_RESET_ENABLED 1
#define TRACE_XLNX_CAN_RX_FIFO_FILTER_REJECT_ENABLED 1
#define TRACE_XLNX_CAN_FILTER_ID_PRE_WRITE_ENABLED 1
#define TRACE_XLNX_CAN_FILTER_MASK_PRE_WRITE_ENABLED 1
#define TRACE_XLNX_CAN_TX_DATA_ENABLED 1
#define TRACE_XLNX_CAN_RX_DATA_ENABLED 1
#define TRACE_XLNX_CAN_RX_DISCARD_ENABLED 1
#define TRACE_XLNX_CANFD_UPDATE_IRQ_ENABLED 1
#define TRACE_XLNX_CANFD_RX_FIFO_FILTER_REJECT_ENABLED 1
#define TRACE_XLNX_CANFD_RX_DATA_ENABLED 1
#define TRACE_XLNX_CANFD_TX_DATA_ENABLED 1
#define TRACE_XLNX_CANFD_RESET_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_XLNX_CAN_UPDATE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XLNX_CAN_UPDATE_IRQ) || \
    false)

static inline void _nocheck__trace_xlnx_can_update_irq(uint32_t isr, uint32_t ier, uint32_t irq)
{
    if (trace_event_get_state(TRACE_XLNX_CAN_UPDATE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 2 "../hw/net/can/trace-events"
            qemu_log("%d@%zu.%06zu:xlnx_can_update_irq " "ISR: 0x%08x IER: 0x%08x IRQ: 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , isr, ier, irq);
#line 67 "trace/trace-hw_net_can.h"
        } else {
#line 2 "../hw/net/can/trace-events"
            qemu_log("xlnx_can_update_irq " "ISR: 0x%08x IER: 0x%08x IRQ: 0x%08x" "\n", isr, ier, irq);
#line 71 "trace/trace-hw_net_can.h"
        }
    }
}

static inline void trace_xlnx_can_update_irq(uint32_t isr, uint32_t ier, uint32_t irq)
{
    if (true) {
        _nocheck__trace_xlnx_can_update_irq(isr, ier, irq);
    }
}

#define TRACE_XLNX_CAN_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XLNX_CAN_RESET) || \
    false)

static inline void _nocheck__trace_xlnx_can_reset(uint32_t val)
{
    if (trace_event_get_state(TRACE_XLNX_CAN_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 3 "../hw/net/can/trace-events"
            qemu_log("%d@%zu.%06zu:xlnx_can_reset " "Resetting controller with value = 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 98 "trace/trace-hw_net_can.h"
        } else {
#line 3 "../hw/net/can/trace-events"
            qemu_log("xlnx_can_reset " "Resetting controller with value = 0x%08x" "\n", val);
#line 102 "trace/trace-hw_net_can.h"
        }
    }
}

static inline void trace_xlnx_can_reset(uint32_t val)
{
    if (true) {
        _nocheck__trace_xlnx_can_reset(val);
    }
}

#define TRACE_XLNX_CAN_RX_FIFO_FILTER_REJECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XLNX_CAN_RX_FIFO_FILTER_REJECT) || \
    false)

static inline void _nocheck__trace_xlnx_can_rx_fifo_filter_reject(uint32_t id, uint8_t dlc)
{
    if (trace_event_get_state(TRACE_XLNX_CAN_RX_FIFO_FILTER_REJECT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "../hw/net/can/trace-events"
            qemu_log("%d@%zu.%06zu:xlnx_can_rx_fifo_filter_reject " "Frame: ID: 0x%08x DLC: 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, dlc);
#line 129 "trace/trace-hw_net_can.h"
        } else {
#line 4 "../hw/net/can/trace-events"
            qemu_log("xlnx_can_rx_fifo_filter_reject " "Frame: ID: 0x%08x DLC: 0x%02x" "\n", id, dlc);
#line 133 "trace/trace-hw_net_can.h"
        }
    }
}

static inline void trace_xlnx_can_rx_fifo_filter_reject(uint32_t id, uint8_t dlc)
{
    if (true) {
        _nocheck__trace_xlnx_can_rx_fifo_filter_reject(id, dlc);
    }
}

#define TRACE_XLNX_CAN_FILTER_ID_PRE_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XLNX_CAN_FILTER_ID_PRE_WRITE) || \
    false)

static inline void _nocheck__trace_xlnx_can_filter_id_pre_write(uint8_t filter_num, uint32_t value)
{
    if (trace_event_get_state(TRACE_XLNX_CAN_FILTER_ID_PRE_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "../hw/net/can/trace-events"
            qemu_log("%d@%zu.%06zu:xlnx_can_filter_id_pre_write " "Filter%d ID: 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , filter_num, value);
#line 160 "trace/trace-hw_net_can.h"
        } else {
#line 5 "../hw/net/can/trace-events"
            qemu_log("xlnx_can_filter_id_pre_write " "Filter%d ID: 0x%08x" "\n", filter_num, value);
#line 164 "trace/trace-hw_net_can.h"
        }
    }
}

static inline void trace_xlnx_can_filter_id_pre_write(uint8_t filter_num, uint32_t value)
{
    if (true) {
        _nocheck__trace_xlnx_can_filter_id_pre_write(filter_num, value);
    }
}

#define TRACE_XLNX_CAN_FILTER_MASK_PRE_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XLNX_CAN_FILTER_MASK_PRE_WRITE) || \
    false)

static inline void _nocheck__trace_xlnx_can_filter_mask_pre_write(uint8_t filter_num, uint32_t value)
{
    if (trace_event_get_state(TRACE_XLNX_CAN_FILTER_MASK_PRE_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "../hw/net/can/trace-events"
            qemu_log("%d@%zu.%06zu:xlnx_can_filter_mask_pre_write " "Filter%d MASK: 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , filter_num, value);
#line 191 "trace/trace-hw_net_can.h"
        } else {
#line 6 "../hw/net/can/trace-events"
            qemu_log("xlnx_can_filter_mask_pre_write " "Filter%d MASK: 0x%08x" "\n", filter_num, value);
#line 195 "trace/trace-hw_net_can.h"
        }
    }
}

static inline void trace_xlnx_can_filter_mask_pre_write(uint8_t filter_num, uint32_t value)
{
    if (true) {
        _nocheck__trace_xlnx_can_filter_mask_pre_write(filter_num, value);
    }
}

#define TRACE_XLNX_CAN_TX_DATA_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XLNX_CAN_TX_DATA) || \
    false)

static inline void _nocheck__trace_xlnx_can_tx_data(uint32_t id, uint8_t dlc, uint8_t db0, uint8_t db1, uint8_t db2, uint8_t db3, uint8_t db4, uint8_t db5, uint8_t db6, uint8_t db7)
{
    if (trace_event_get_state(TRACE_XLNX_CAN_TX_DATA) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "../hw/net/can/trace-events"
            qemu_log("%d@%zu.%06zu:xlnx_can_tx_data " "Frame: ID: 0x%08x DLC: 0x%02x DATA: 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, dlc, db0, db1, db2, db3, db4, db5, db6, db7);
#line 222 "trace/trace-hw_net_can.h"
        } else {
#line 7 "../hw/net/can/trace-events"
            qemu_log("xlnx_can_tx_data " "Frame: ID: 0x%08x DLC: 0x%02x DATA: 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x" "\n", id, dlc, db0, db1, db2, db3, db4, db5, db6, db7);
#line 226 "trace/trace-hw_net_can.h"
        }
    }
}

static inline void trace_xlnx_can_tx_data(uint32_t id, uint8_t dlc, uint8_t db0, uint8_t db1, uint8_t db2, uint8_t db3, uint8_t db4, uint8_t db5, uint8_t db6, uint8_t db7)
{
    if (true) {
        _nocheck__trace_xlnx_can_tx_data(id, dlc, db0, db1, db2, db3, db4, db5, db6, db7);
    }
}

#define TRACE_XLNX_CAN_RX_DATA_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XLNX_CAN_RX_DATA) || \
    false)

static inline void _nocheck__trace_xlnx_can_rx_data(uint32_t id, uint32_t dlc, uint8_t db0, uint8_t db1, uint8_t db2, uint8_t db3, uint8_t db4, uint8_t db5, uint8_t db6, uint8_t db7)
{
    if (trace_event_get_state(TRACE_XLNX_CAN_RX_DATA) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "../hw/net/can/trace-events"
            qemu_log("%d@%zu.%06zu:xlnx_can_rx_data " "Frame: ID: 0x%08x DLC: 0x%02x DATA: 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, dlc, db0, db1, db2, db3, db4, db5, db6, db7);
#line 253 "trace/trace-hw_net_can.h"
        } else {
#line 8 "../hw/net/can/trace-events"
            qemu_log("xlnx_can_rx_data " "Frame: ID: 0x%08x DLC: 0x%02x DATA: 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x" "\n", id, dlc, db0, db1, db2, db3, db4, db5, db6, db7);
#line 257 "trace/trace-hw_net_can.h"
        }
    }
}

static inline void trace_xlnx_can_rx_data(uint32_t id, uint32_t dlc, uint8_t db0, uint8_t db1, uint8_t db2, uint8_t db3, uint8_t db4, uint8_t db5, uint8_t db6, uint8_t db7)
{
    if (true) {
        _nocheck__trace_xlnx_can_rx_data(id, dlc, db0, db1, db2, db3, db4, db5, db6, db7);
    }
}

#define TRACE_XLNX_CAN_RX_DISCARD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XLNX_CAN_RX_DISCARD) || \
    false)

static inline void _nocheck__trace_xlnx_can_rx_discard(uint32_t status)
{
    if (trace_event_get_state(TRACE_XLNX_CAN_RX_DISCARD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "../hw/net/can/trace-events"
            qemu_log("%d@%zu.%06zu:xlnx_can_rx_discard " "Controller is not enabled for bus communication. Status Register: 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , status);
#line 284 "trace/trace-hw_net_can.h"
        } else {
#line 9 "../hw/net/can/trace-events"
            qemu_log("xlnx_can_rx_discard " "Controller is not enabled for bus communication. Status Register: 0x%08x" "\n", status);
#line 288 "trace/trace-hw_net_can.h"
        }
    }
}

static inline void trace_xlnx_can_rx_discard(uint32_t status)
{
    if (true) {
        _nocheck__trace_xlnx_can_rx_discard(status);
    }
}

#define TRACE_XLNX_CANFD_UPDATE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XLNX_CANFD_UPDATE_IRQ) || \
    false)

static inline void _nocheck__trace_xlnx_canfd_update_irq(char * path, uint32_t isr, uint32_t ier, uint32_t irq)
{
    if (trace_event_get_state(TRACE_XLNX_CANFD_UPDATE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "../hw/net/can/trace-events"
            qemu_log("%d@%zu.%06zu:xlnx_canfd_update_irq " "%s: ISR: 0x%08x IER: 0x%08x IRQ: 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , path, isr, ier, irq);
#line 315 "trace/trace-hw_net_can.h"
        } else {
#line 12 "../hw/net/can/trace-events"
            qemu_log("xlnx_canfd_update_irq " "%s: ISR: 0x%08x IER: 0x%08x IRQ: 0x%08x" "\n", path, isr, ier, irq);
#line 319 "trace/trace-hw_net_can.h"
        }
    }
}

static inline void trace_xlnx_canfd_update_irq(char * path, uint32_t isr, uint32_t ier, uint32_t irq)
{
    if (true) {
        _nocheck__trace_xlnx_canfd_update_irq(path, isr, ier, irq);
    }
}

#define TRACE_XLNX_CANFD_RX_FIFO_FILTER_REJECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XLNX_CANFD_RX_FIFO_FILTER_REJECT) || \
    false)

static inline void _nocheck__trace_xlnx_canfd_rx_fifo_filter_reject(char * path, uint32_t id, uint8_t dlc)
{
    if (trace_event_get_state(TRACE_XLNX_CANFD_RX_FIFO_FILTER_REJECT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "../hw/net/can/trace-events"
            qemu_log("%d@%zu.%06zu:xlnx_canfd_rx_fifo_filter_reject " "%s: Frame: ID: 0x%08x DLC: 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , path, id, dlc);
#line 346 "trace/trace-hw_net_can.h"
        } else {
#line 13 "../hw/net/can/trace-events"
            qemu_log("xlnx_canfd_rx_fifo_filter_reject " "%s: Frame: ID: 0x%08x DLC: 0x%02x" "\n", path, id, dlc);
#line 350 "trace/trace-hw_net_can.h"
        }
    }
}

static inline void trace_xlnx_canfd_rx_fifo_filter_reject(char * path, uint32_t id, uint8_t dlc)
{
    if (true) {
        _nocheck__trace_xlnx_canfd_rx_fifo_filter_reject(path, id, dlc);
    }
}

#define TRACE_XLNX_CANFD_RX_DATA_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XLNX_CANFD_RX_DATA) || \
    false)

static inline void _nocheck__trace_xlnx_canfd_rx_data(char * path, uint32_t id, uint8_t dlc, uint8_t flags)
{
    if (trace_event_get_state(TRACE_XLNX_CANFD_RX_DATA) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 14 "../hw/net/can/trace-events"
            qemu_log("%d@%zu.%06zu:xlnx_canfd_rx_data " "%s: Frame: ID: 0x%08x DLC: 0x%02x CANFD Flag: 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , path, id, dlc, flags);
#line 377 "trace/trace-hw_net_can.h"
        } else {
#line 14 "../hw/net/can/trace-events"
            qemu_log("xlnx_canfd_rx_data " "%s: Frame: ID: 0x%08x DLC: 0x%02x CANFD Flag: 0x%02x" "\n", path, id, dlc, flags);
#line 381 "trace/trace-hw_net_can.h"
        }
    }
}

static inline void trace_xlnx_canfd_rx_data(char * path, uint32_t id, uint8_t dlc, uint8_t flags)
{
    if (true) {
        _nocheck__trace_xlnx_canfd_rx_data(path, id, dlc, flags);
    }
}

#define TRACE_XLNX_CANFD_TX_DATA_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XLNX_CANFD_TX_DATA) || \
    false)

static inline void _nocheck__trace_xlnx_canfd_tx_data(char * path, uint32_t id, uint8_t dlc, uint8_t flgas)
{
    if (trace_event_get_state(TRACE_XLNX_CANFD_TX_DATA) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 15 "../hw/net/can/trace-events"
            qemu_log("%d@%zu.%06zu:xlnx_canfd_tx_data " "%s: Frame: ID: 0x%08x DLC: 0x%02x CANFD Flag: 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , path, id, dlc, flgas);
#line 408 "trace/trace-hw_net_can.h"
        } else {
#line 15 "../hw/net/can/trace-events"
            qemu_log("xlnx_canfd_tx_data " "%s: Frame: ID: 0x%08x DLC: 0x%02x CANFD Flag: 0x%02x" "\n", path, id, dlc, flgas);
#line 412 "trace/trace-hw_net_can.h"
        }
    }
}

static inline void trace_xlnx_canfd_tx_data(char * path, uint32_t id, uint8_t dlc, uint8_t flgas)
{
    if (true) {
        _nocheck__trace_xlnx_canfd_tx_data(path, id, dlc, flgas);
    }
}

#define TRACE_XLNX_CANFD_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XLNX_CANFD_RESET) || \
    false)

static inline void _nocheck__trace_xlnx_canfd_reset(char * path, uint32_t val)
{
    if (trace_event_get_state(TRACE_XLNX_CANFD_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "../hw/net/can/trace-events"
            qemu_log("%d@%zu.%06zu:xlnx_canfd_reset " "%s: Resetting controller with value = 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , path, val);
#line 439 "trace/trace-hw_net_can.h"
        } else {
#line 16 "../hw/net/can/trace-events"
            qemu_log("xlnx_canfd_reset " "%s: Resetting controller with value = 0x%08x" "\n", path, val);
#line 443 "trace/trace-hw_net_can.h"
        }
    }
}

static inline void trace_xlnx_canfd_reset(char * path, uint32_t val)
{
    if (true) {
        _nocheck__trace_xlnx_canfd_reset(path, val);
    }
}
#endif /* TRACE_HW_NET_CAN_GENERATED_TRACERS_H */
