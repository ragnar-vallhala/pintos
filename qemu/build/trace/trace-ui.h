/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_UI_GENERATED_TRACERS_H
#define TRACE_UI_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_CONSOLE_GFX_NEW_EVENT;
extern TraceEvent _TRACE_CONSOLE_GFX_REUSE_EVENT;
extern TraceEvent _TRACE_CONSOLE_GFX_CLOSE_EVENT;
extern TraceEvent _TRACE_CONSOLE_PUTCHAR_CSI_EVENT;
extern TraceEvent _TRACE_CONSOLE_PUTCHAR_UNHANDLED_EVENT;
extern TraceEvent _TRACE_CONSOLE_TXT_NEW_EVENT;
extern TraceEvent _TRACE_CONSOLE_SELECT_EVENT;
extern TraceEvent _TRACE_CONSOLE_REFRESH_EVENT;
extern TraceEvent _TRACE_DISPLAYSURFACE_CREATE_EVENT;
extern TraceEvent _TRACE_DISPLAYSURFACE_CREATE_FROM_EVENT;
extern TraceEvent _TRACE_DISPLAYSURFACE_CREATE_PIXMAN_EVENT;
extern TraceEvent _TRACE_DISPLAYSURFACE_FREE_EVENT;
extern TraceEvent _TRACE_DISPLAYCHANGELISTENER_REGISTER_EVENT;
extern TraceEvent _TRACE_DISPLAYCHANGELISTENER_UNREGISTER_EVENT;
extern TraceEvent _TRACE_PPM_SAVE_EVENT;
extern TraceEvent _TRACE_GD_SWITCH_EVENT;
extern TraceEvent _TRACE_GD_UPDATE_EVENT;
extern TraceEvent _TRACE_GD_KEY_EVENT_EVENT;
extern TraceEvent _TRACE_GD_GRAB_EVENT;
extern TraceEvent _TRACE_GD_UNGRAB_EVENT;
extern TraceEvent _TRACE_GD_KEYMAP_WINDOWING_EVENT;
extern TraceEvent _TRACE_GD_GL_AREA_CREATE_CONTEXT_EVENT;
extern TraceEvent _TRACE_GD_GL_AREA_DESTROY_CONTEXT_EVENT;
extern TraceEvent _TRACE_GD_MOTION_EVENT_EVENT;
extern TraceEvent _TRACE_VNC_KEY_GUEST_LEDS_EVENT;
extern TraceEvent _TRACE_VNC_KEY_MAP_INIT_EVENT;
extern TraceEvent _TRACE_VNC_KEY_EVENT_EXT_EVENT;
extern TraceEvent _TRACE_VNC_KEY_EVENT_MAP_EVENT;
extern TraceEvent _TRACE_VNC_KEY_SYNC_NUMLOCK_EVENT;
extern TraceEvent _TRACE_VNC_KEY_SYNC_CAPSLOCK_EVENT;
extern TraceEvent _TRACE_VNC_MSG_SERVER_AUDIO_BEGIN_EVENT;
extern TraceEvent _TRACE_VNC_MSG_SERVER_AUDIO_END_EVENT;
extern TraceEvent _TRACE_VNC_MSG_SERVER_AUDIO_DATA_EVENT;
extern TraceEvent _TRACE_VNC_MSG_SERVER_DESKTOP_RESIZE_EVENT;
extern TraceEvent _TRACE_VNC_MSG_SERVER_EXT_DESKTOP_RESIZE_EVENT;
extern TraceEvent _TRACE_VNC_MSG_CLIENT_AUDIO_ENABLE_EVENT;
extern TraceEvent _TRACE_VNC_MSG_CLIENT_AUDIO_DISABLE_EVENT;
extern TraceEvent _TRACE_VNC_MSG_CLIENT_AUDIO_FORMAT_EVENT;
extern TraceEvent _TRACE_VNC_MSG_CLIENT_SET_DESKTOP_SIZE_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_EOF_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_IO_ERROR_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_CONNECT_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_DISCONNECT_START_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_DISCONNECT_FINISH_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_IO_WRAP_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_THROTTLE_THRESHOLD_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_THROTTLE_INCREMENTAL_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_THROTTLE_FORCED_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_THROTTLE_AUDIO_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_UNTHROTTLE_FORCED_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_UNTHROTTLE_INCREMENTAL_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_OUTPUT_LIMIT_EVENT;
extern TraceEvent _TRACE_VNC_SERVER_DPY_PAGEFLIP_EVENT;
extern TraceEvent _TRACE_VNC_SERVER_DPY_RECREATE_EVENT;
extern TraceEvent _TRACE_VNC_JOB_ADD_RECT_EVENT;
extern TraceEvent _TRACE_VNC_JOB_DISCARD_RECT_EVENT;
extern TraceEvent _TRACE_VNC_JOB_CLAMP_RECT_EVENT;
extern TraceEvent _TRACE_VNC_JOB_CLAMPED_RECT_EVENT;
extern TraceEvent _TRACE_VNC_JOB_NRECTS_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_INIT_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_START_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_PASS_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_FAIL_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_REJECT_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_VENCRYPT_VERSION_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_VENCRYPT_SUBAUTH_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_SASL_MECH_LIST_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_SASL_MECH_CHOOSE_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_SASL_START_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_SASL_STEP_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_SASL_SSF_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_SASL_USERNAME_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_SASL_ACL_EVENT;
extern TraceEvent _TRACE_INPUT_EVENT_KEY_NUMBER_EVENT;
extern TraceEvent _TRACE_INPUT_EVENT_KEY_QCODE_EVENT;
extern TraceEvent _TRACE_INPUT_EVENT_BTN_EVENT;
extern TraceEvent _TRACE_INPUT_EVENT_REL_EVENT;
extern TraceEvent _TRACE_INPUT_EVENT_ABS_EVENT;
extern TraceEvent _TRACE_INPUT_EVENT_MTT_EVENT;
extern TraceEvent _TRACE_INPUT_EVENT_SYNC_EVENT;
extern TraceEvent _TRACE_SDL2_PROCESS_KEY_EVENT;
extern TraceEvent _TRACE_QEMU_SPICE_ADD_MEMSLOT_EVENT;
extern TraceEvent _TRACE_QEMU_SPICE_DEL_MEMSLOT_EVENT;
extern TraceEvent _TRACE_QEMU_SPICE_CREATE_PRIMARY_SURFACE_EVENT;
extern TraceEvent _TRACE_QEMU_SPICE_DESTROY_PRIMARY_SURFACE_EVENT;
extern TraceEvent _TRACE_QEMU_SPICE_WAKEUP_EVENT;
extern TraceEvent _TRACE_QEMU_SPICE_CREATE_UPDATE_EVENT;
extern TraceEvent _TRACE_QEMU_SPICE_DISPLAY_UPDATE_EVENT;
extern TraceEvent _TRACE_QEMU_SPICE_DISPLAY_SURFACE_EVENT;
extern TraceEvent _TRACE_QEMU_SPICE_DISPLAY_REFRESH_EVENT;
extern TraceEvent _TRACE_QEMU_SPICE_UI_INFO_EVENT;
extern TraceEvent _TRACE_QEMU_SPICE_GL_SURFACE_EVENT;
extern TraceEvent _TRACE_QEMU_SPICE_GL_SCANOUT_DISABLE_EVENT;
extern TraceEvent _TRACE_QEMU_SPICE_GL_SCANOUT_TEXTURE_EVENT;
extern TraceEvent _TRACE_QEMU_SPICE_GL_CURSOR_EVENT;
extern TraceEvent _TRACE_QEMU_SPICE_GL_FORWARD_DMABUF_EVENT;
extern TraceEvent _TRACE_QEMU_SPICE_GL_RENDER_DMABUF_EVENT;
extern TraceEvent _TRACE_QEMU_SPICE_GL_UPDATE_EVENT;
extern TraceEvent _TRACE_KEYMAP_PARSE_EVENT;
extern TraceEvent _TRACE_KEYMAP_ADD_EVENT;
extern TraceEvent _TRACE_KEYMAP_UNMAPPED_EVENT;
extern TraceEvent _TRACE_XKEYMAP_EXTENSION_EVENT;
extern TraceEvent _TRACE_XKEYMAP_VENDOR_EVENT;
extern TraceEvent _TRACE_XKEYMAP_KEYCODES_EVENT;
extern TraceEvent _TRACE_XKEYMAP_KEYMAP_EVENT;
extern TraceEvent _TRACE_CLIPBOARD_CHECK_SERIAL_EVENT;
extern TraceEvent _TRACE_CLIPBOARD_RESET_SERIAL_EVENT;
extern TraceEvent _TRACE_VDAGENT_FE_OPEN_EVENT;
extern TraceEvent _TRACE_VDAGENT_CLOSE_EVENT;
extern TraceEvent _TRACE_VDAGENT_DISCONNECT_EVENT;
extern TraceEvent _TRACE_VDAGENT_SEND_EVENT;
extern TraceEvent _TRACE_VDAGENT_SEND_EMPTY_CLIPBOARD_EVENT;
extern TraceEvent _TRACE_VDAGENT_RECV_CHUNK_EVENT;
extern TraceEvent _TRACE_VDAGENT_RECV_MSG_EVENT;
extern TraceEvent _TRACE_VDAGENT_PEER_CAP_EVENT;
extern TraceEvent _TRACE_VDAGENT_CB_GRAB_SELECTION_EVENT;
extern TraceEvent _TRACE_VDAGENT_CB_GRAB_DISCARD_EVENT;
extern TraceEvent _TRACE_VDAGENT_CB_GRAB_TYPE_EVENT;
extern TraceEvent _TRACE_VDAGENT_CB_SERIAL_DISCARD_EVENT;
extern TraceEvent _TRACE_DBUS_REGISTERED_LISTENER_EVENT;
extern TraceEvent _TRACE_DBUS_LISTENER_VANISHED_EVENT;
extern TraceEvent _TRACE_DBUS_KBD_PRESS_EVENT;
extern TraceEvent _TRACE_DBUS_KBD_RELEASE_EVENT;
extern TraceEvent _TRACE_DBUS_MOUSE_PRESS_EVENT;
extern TraceEvent _TRACE_DBUS_MOUSE_RELEASE_EVENT;
extern TraceEvent _TRACE_DBUS_MOUSE_SET_POS_EVENT;
extern TraceEvent _TRACE_DBUS_MOUSE_REL_MOTION_EVENT;
extern TraceEvent _TRACE_DBUS_TOUCH_SEND_EVENT_EVENT;
extern TraceEvent _TRACE_DBUS_UPDATE_EVENT;
extern TraceEvent _TRACE_DBUS_UPDATE_GL_EVENT;
extern TraceEvent _TRACE_DBUS_CLIPBOARD_GRAB_EVENT;
extern TraceEvent _TRACE_DBUS_CLIPBOARD_GRAB_FAILED_EVENT;
extern TraceEvent _TRACE_DBUS_CLIPBOARD_QEMU_REQUEST_EVENT;
extern TraceEvent _TRACE_DBUS_CLIPBOARD_REGISTER_EVENT;
extern TraceEvent _TRACE_DBUS_CLIPBOARD_UNREGISTER_EVENT;
extern TraceEvent _TRACE_DBUS_SCANOUT_TEXTURE_EVENT;
extern TraceEvent _TRACE_DBUS_GL_GFX_SWITCH_EVENT;
extern TraceEvent _TRACE_DBUS_FILTER_EVENT;
extern TraceEvent _TRACE_EGL_INIT_D3D11_DEVICE_EVENT;
extern uint16_t _TRACE_CONSOLE_GFX_NEW_DSTATE;
extern uint16_t _TRACE_CONSOLE_GFX_REUSE_DSTATE;
extern uint16_t _TRACE_CONSOLE_GFX_CLOSE_DSTATE;
extern uint16_t _TRACE_CONSOLE_PUTCHAR_CSI_DSTATE;
extern uint16_t _TRACE_CONSOLE_PUTCHAR_UNHANDLED_DSTATE;
extern uint16_t _TRACE_CONSOLE_TXT_NEW_DSTATE;
extern uint16_t _TRACE_CONSOLE_SELECT_DSTATE;
extern uint16_t _TRACE_CONSOLE_REFRESH_DSTATE;
extern uint16_t _TRACE_DISPLAYSURFACE_CREATE_DSTATE;
extern uint16_t _TRACE_DISPLAYSURFACE_CREATE_FROM_DSTATE;
extern uint16_t _TRACE_DISPLAYSURFACE_CREATE_PIXMAN_DSTATE;
extern uint16_t _TRACE_DISPLAYSURFACE_FREE_DSTATE;
extern uint16_t _TRACE_DISPLAYCHANGELISTENER_REGISTER_DSTATE;
extern uint16_t _TRACE_DISPLAYCHANGELISTENER_UNREGISTER_DSTATE;
extern uint16_t _TRACE_PPM_SAVE_DSTATE;
extern uint16_t _TRACE_GD_SWITCH_DSTATE;
extern uint16_t _TRACE_GD_UPDATE_DSTATE;
extern uint16_t _TRACE_GD_KEY_EVENT_DSTATE;
extern uint16_t _TRACE_GD_GRAB_DSTATE;
extern uint16_t _TRACE_GD_UNGRAB_DSTATE;
extern uint16_t _TRACE_GD_KEYMAP_WINDOWING_DSTATE;
extern uint16_t _TRACE_GD_GL_AREA_CREATE_CONTEXT_DSTATE;
extern uint16_t _TRACE_GD_GL_AREA_DESTROY_CONTEXT_DSTATE;
extern uint16_t _TRACE_GD_MOTION_EVENT_DSTATE;
extern uint16_t _TRACE_VNC_KEY_GUEST_LEDS_DSTATE;
extern uint16_t _TRACE_VNC_KEY_MAP_INIT_DSTATE;
extern uint16_t _TRACE_VNC_KEY_EVENT_EXT_DSTATE;
extern uint16_t _TRACE_VNC_KEY_EVENT_MAP_DSTATE;
extern uint16_t _TRACE_VNC_KEY_SYNC_NUMLOCK_DSTATE;
extern uint16_t _TRACE_VNC_KEY_SYNC_CAPSLOCK_DSTATE;
extern uint16_t _TRACE_VNC_MSG_SERVER_AUDIO_BEGIN_DSTATE;
extern uint16_t _TRACE_VNC_MSG_SERVER_AUDIO_END_DSTATE;
extern uint16_t _TRACE_VNC_MSG_SERVER_AUDIO_DATA_DSTATE;
extern uint16_t _TRACE_VNC_MSG_SERVER_DESKTOP_RESIZE_DSTATE;
extern uint16_t _TRACE_VNC_MSG_SERVER_EXT_DESKTOP_RESIZE_DSTATE;
extern uint16_t _TRACE_VNC_MSG_CLIENT_AUDIO_ENABLE_DSTATE;
extern uint16_t _TRACE_VNC_MSG_CLIENT_AUDIO_DISABLE_DSTATE;
extern uint16_t _TRACE_VNC_MSG_CLIENT_AUDIO_FORMAT_DSTATE;
extern uint16_t _TRACE_VNC_MSG_CLIENT_SET_DESKTOP_SIZE_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_EOF_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_IO_ERROR_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_CONNECT_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_DISCONNECT_START_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_DISCONNECT_FINISH_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_IO_WRAP_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_THROTTLE_THRESHOLD_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_THROTTLE_INCREMENTAL_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_THROTTLE_FORCED_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_THROTTLE_AUDIO_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_UNTHROTTLE_FORCED_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_UNTHROTTLE_INCREMENTAL_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_OUTPUT_LIMIT_DSTATE;
extern uint16_t _TRACE_VNC_SERVER_DPY_PAGEFLIP_DSTATE;
extern uint16_t _TRACE_VNC_SERVER_DPY_RECREATE_DSTATE;
extern uint16_t _TRACE_VNC_JOB_ADD_RECT_DSTATE;
extern uint16_t _TRACE_VNC_JOB_DISCARD_RECT_DSTATE;
extern uint16_t _TRACE_VNC_JOB_CLAMP_RECT_DSTATE;
extern uint16_t _TRACE_VNC_JOB_CLAMPED_RECT_DSTATE;
extern uint16_t _TRACE_VNC_JOB_NRECTS_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_INIT_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_START_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_PASS_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_FAIL_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_REJECT_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_VENCRYPT_VERSION_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_VENCRYPT_SUBAUTH_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_SASL_MECH_LIST_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_SASL_MECH_CHOOSE_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_SASL_START_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_SASL_STEP_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_SASL_SSF_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_SASL_USERNAME_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_SASL_ACL_DSTATE;
extern uint16_t _TRACE_INPUT_EVENT_KEY_NUMBER_DSTATE;
extern uint16_t _TRACE_INPUT_EVENT_KEY_QCODE_DSTATE;
extern uint16_t _TRACE_INPUT_EVENT_BTN_DSTATE;
extern uint16_t _TRACE_INPUT_EVENT_REL_DSTATE;
extern uint16_t _TRACE_INPUT_EVENT_ABS_DSTATE;
extern uint16_t _TRACE_INPUT_EVENT_MTT_DSTATE;
extern uint16_t _TRACE_INPUT_EVENT_SYNC_DSTATE;
extern uint16_t _TRACE_SDL2_PROCESS_KEY_DSTATE;
extern uint16_t _TRACE_QEMU_SPICE_ADD_MEMSLOT_DSTATE;
extern uint16_t _TRACE_QEMU_SPICE_DEL_MEMSLOT_DSTATE;
extern uint16_t _TRACE_QEMU_SPICE_CREATE_PRIMARY_SURFACE_DSTATE;
extern uint16_t _TRACE_QEMU_SPICE_DESTROY_PRIMARY_SURFACE_DSTATE;
extern uint16_t _TRACE_QEMU_SPICE_WAKEUP_DSTATE;
extern uint16_t _TRACE_QEMU_SPICE_CREATE_UPDATE_DSTATE;
extern uint16_t _TRACE_QEMU_SPICE_DISPLAY_UPDATE_DSTATE;
extern uint16_t _TRACE_QEMU_SPICE_DISPLAY_SURFACE_DSTATE;
extern uint16_t _TRACE_QEMU_SPICE_DISPLAY_REFRESH_DSTATE;
extern uint16_t _TRACE_QEMU_SPICE_UI_INFO_DSTATE;
extern uint16_t _TRACE_QEMU_SPICE_GL_SURFACE_DSTATE;
extern uint16_t _TRACE_QEMU_SPICE_GL_SCANOUT_DISABLE_DSTATE;
extern uint16_t _TRACE_QEMU_SPICE_GL_SCANOUT_TEXTURE_DSTATE;
extern uint16_t _TRACE_QEMU_SPICE_GL_CURSOR_DSTATE;
extern uint16_t _TRACE_QEMU_SPICE_GL_FORWARD_DMABUF_DSTATE;
extern uint16_t _TRACE_QEMU_SPICE_GL_RENDER_DMABUF_DSTATE;
extern uint16_t _TRACE_QEMU_SPICE_GL_UPDATE_DSTATE;
extern uint16_t _TRACE_KEYMAP_PARSE_DSTATE;
extern uint16_t _TRACE_KEYMAP_ADD_DSTATE;
extern uint16_t _TRACE_KEYMAP_UNMAPPED_DSTATE;
extern uint16_t _TRACE_XKEYMAP_EXTENSION_DSTATE;
extern uint16_t _TRACE_XKEYMAP_VENDOR_DSTATE;
extern uint16_t _TRACE_XKEYMAP_KEYCODES_DSTATE;
extern uint16_t _TRACE_XKEYMAP_KEYMAP_DSTATE;
extern uint16_t _TRACE_CLIPBOARD_CHECK_SERIAL_DSTATE;
extern uint16_t _TRACE_CLIPBOARD_RESET_SERIAL_DSTATE;
extern uint16_t _TRACE_VDAGENT_FE_OPEN_DSTATE;
extern uint16_t _TRACE_VDAGENT_CLOSE_DSTATE;
extern uint16_t _TRACE_VDAGENT_DISCONNECT_DSTATE;
extern uint16_t _TRACE_VDAGENT_SEND_DSTATE;
extern uint16_t _TRACE_VDAGENT_SEND_EMPTY_CLIPBOARD_DSTATE;
extern uint16_t _TRACE_VDAGENT_RECV_CHUNK_DSTATE;
extern uint16_t _TRACE_VDAGENT_RECV_MSG_DSTATE;
extern uint16_t _TRACE_VDAGENT_PEER_CAP_DSTATE;
extern uint16_t _TRACE_VDAGENT_CB_GRAB_SELECTION_DSTATE;
extern uint16_t _TRACE_VDAGENT_CB_GRAB_DISCARD_DSTATE;
extern uint16_t _TRACE_VDAGENT_CB_GRAB_TYPE_DSTATE;
extern uint16_t _TRACE_VDAGENT_CB_SERIAL_DISCARD_DSTATE;
extern uint16_t _TRACE_DBUS_REGISTERED_LISTENER_DSTATE;
extern uint16_t _TRACE_DBUS_LISTENER_VANISHED_DSTATE;
extern uint16_t _TRACE_DBUS_KBD_PRESS_DSTATE;
extern uint16_t _TRACE_DBUS_KBD_RELEASE_DSTATE;
extern uint16_t _TRACE_DBUS_MOUSE_PRESS_DSTATE;
extern uint16_t _TRACE_DBUS_MOUSE_RELEASE_DSTATE;
extern uint16_t _TRACE_DBUS_MOUSE_SET_POS_DSTATE;
extern uint16_t _TRACE_DBUS_MOUSE_REL_MOTION_DSTATE;
extern uint16_t _TRACE_DBUS_TOUCH_SEND_EVENT_DSTATE;
extern uint16_t _TRACE_DBUS_UPDATE_DSTATE;
extern uint16_t _TRACE_DBUS_UPDATE_GL_DSTATE;
extern uint16_t _TRACE_DBUS_CLIPBOARD_GRAB_DSTATE;
extern uint16_t _TRACE_DBUS_CLIPBOARD_GRAB_FAILED_DSTATE;
extern uint16_t _TRACE_DBUS_CLIPBOARD_QEMU_REQUEST_DSTATE;
extern uint16_t _TRACE_DBUS_CLIPBOARD_REGISTER_DSTATE;
extern uint16_t _TRACE_DBUS_CLIPBOARD_UNREGISTER_DSTATE;
extern uint16_t _TRACE_DBUS_SCANOUT_TEXTURE_DSTATE;
extern uint16_t _TRACE_DBUS_GL_GFX_SWITCH_DSTATE;
extern uint16_t _TRACE_DBUS_FILTER_DSTATE;
extern uint16_t _TRACE_EGL_INIT_D3D11_DEVICE_DSTATE;
#define TRACE_CONSOLE_GFX_NEW_ENABLED 1
#define TRACE_CONSOLE_GFX_REUSE_ENABLED 1
#define TRACE_CONSOLE_GFX_CLOSE_ENABLED 1
#define TRACE_CONSOLE_PUTCHAR_CSI_ENABLED 1
#define TRACE_CONSOLE_PUTCHAR_UNHANDLED_ENABLED 1
#define TRACE_CONSOLE_TXT_NEW_ENABLED 1
#define TRACE_CONSOLE_SELECT_ENABLED 1
#define TRACE_CONSOLE_REFRESH_ENABLED 1
#define TRACE_DISPLAYSURFACE_CREATE_ENABLED 1
#define TRACE_DISPLAYSURFACE_CREATE_FROM_ENABLED 1
#define TRACE_DISPLAYSURFACE_CREATE_PIXMAN_ENABLED 1
#define TRACE_DISPLAYSURFACE_FREE_ENABLED 1
#define TRACE_DISPLAYCHANGELISTENER_REGISTER_ENABLED 1
#define TRACE_DISPLAYCHANGELISTENER_UNREGISTER_ENABLED 1
#define TRACE_PPM_SAVE_ENABLED 1
#define TRACE_GD_SWITCH_ENABLED 1
#define TRACE_GD_UPDATE_ENABLED 1
#define TRACE_GD_KEY_EVENT_ENABLED 1
#define TRACE_GD_GRAB_ENABLED 1
#define TRACE_GD_UNGRAB_ENABLED 1
#define TRACE_GD_KEYMAP_WINDOWING_ENABLED 1
#define TRACE_GD_GL_AREA_CREATE_CONTEXT_ENABLED 1
#define TRACE_GD_GL_AREA_DESTROY_CONTEXT_ENABLED 1
#define TRACE_GD_MOTION_EVENT_ENABLED 1
#define TRACE_VNC_KEY_GUEST_LEDS_ENABLED 1
#define TRACE_VNC_KEY_MAP_INIT_ENABLED 1
#define TRACE_VNC_KEY_EVENT_EXT_ENABLED 1
#define TRACE_VNC_KEY_EVENT_MAP_ENABLED 1
#define TRACE_VNC_KEY_SYNC_NUMLOCK_ENABLED 1
#define TRACE_VNC_KEY_SYNC_CAPSLOCK_ENABLED 1
#define TRACE_VNC_MSG_SERVER_AUDIO_BEGIN_ENABLED 1
#define TRACE_VNC_MSG_SERVER_AUDIO_END_ENABLED 1
#define TRACE_VNC_MSG_SERVER_AUDIO_DATA_ENABLED 1
#define TRACE_VNC_MSG_SERVER_DESKTOP_RESIZE_ENABLED 1
#define TRACE_VNC_MSG_SERVER_EXT_DESKTOP_RESIZE_ENABLED 1
#define TRACE_VNC_MSG_CLIENT_AUDIO_ENABLE_ENABLED 1
#define TRACE_VNC_MSG_CLIENT_AUDIO_DISABLE_ENABLED 1
#define TRACE_VNC_MSG_CLIENT_AUDIO_FORMAT_ENABLED 1
#define TRACE_VNC_MSG_CLIENT_SET_DESKTOP_SIZE_ENABLED 1
#define TRACE_VNC_CLIENT_EOF_ENABLED 1
#define TRACE_VNC_CLIENT_IO_ERROR_ENABLED 1
#define TRACE_VNC_CLIENT_CONNECT_ENABLED 1
#define TRACE_VNC_CLIENT_DISCONNECT_START_ENABLED 1
#define TRACE_VNC_CLIENT_DISCONNECT_FINISH_ENABLED 1
#define TRACE_VNC_CLIENT_IO_WRAP_ENABLED 1
#define TRACE_VNC_CLIENT_THROTTLE_THRESHOLD_ENABLED 1
#define TRACE_VNC_CLIENT_THROTTLE_INCREMENTAL_ENABLED 1
#define TRACE_VNC_CLIENT_THROTTLE_FORCED_ENABLED 1
#define TRACE_VNC_CLIENT_THROTTLE_AUDIO_ENABLED 1
#define TRACE_VNC_CLIENT_UNTHROTTLE_FORCED_ENABLED 1
#define TRACE_VNC_CLIENT_UNTHROTTLE_INCREMENTAL_ENABLED 1
#define TRACE_VNC_CLIENT_OUTPUT_LIMIT_ENABLED 1
#define TRACE_VNC_SERVER_DPY_PAGEFLIP_ENABLED 1
#define TRACE_VNC_SERVER_DPY_RECREATE_ENABLED 1
#define TRACE_VNC_JOB_ADD_RECT_ENABLED 1
#define TRACE_VNC_JOB_DISCARD_RECT_ENABLED 1
#define TRACE_VNC_JOB_CLAMP_RECT_ENABLED 1
#define TRACE_VNC_JOB_CLAMPED_RECT_ENABLED 1
#define TRACE_VNC_JOB_NRECTS_ENABLED 1
#define TRACE_VNC_AUTH_INIT_ENABLED 1
#define TRACE_VNC_AUTH_START_ENABLED 1
#define TRACE_VNC_AUTH_PASS_ENABLED 1
#define TRACE_VNC_AUTH_FAIL_ENABLED 1
#define TRACE_VNC_AUTH_REJECT_ENABLED 1
#define TRACE_VNC_AUTH_VENCRYPT_VERSION_ENABLED 1
#define TRACE_VNC_AUTH_VENCRYPT_SUBAUTH_ENABLED 1
#define TRACE_VNC_AUTH_SASL_MECH_LIST_ENABLED 1
#define TRACE_VNC_AUTH_SASL_MECH_CHOOSE_ENABLED 1
#define TRACE_VNC_AUTH_SASL_START_ENABLED 1
#define TRACE_VNC_AUTH_SASL_STEP_ENABLED 1
#define TRACE_VNC_AUTH_SASL_SSF_ENABLED 1
#define TRACE_VNC_AUTH_SASL_USERNAME_ENABLED 1
#define TRACE_VNC_AUTH_SASL_ACL_ENABLED 1
#define TRACE_INPUT_EVENT_KEY_NUMBER_ENABLED 1
#define TRACE_INPUT_EVENT_KEY_QCODE_ENABLED 1
#define TRACE_INPUT_EVENT_BTN_ENABLED 1
#define TRACE_INPUT_EVENT_REL_ENABLED 1
#define TRACE_INPUT_EVENT_ABS_ENABLED 1
#define TRACE_INPUT_EVENT_MTT_ENABLED 1
#define TRACE_INPUT_EVENT_SYNC_ENABLED 1
#define TRACE_SDL2_PROCESS_KEY_ENABLED 1
#define TRACE_QEMU_SPICE_ADD_MEMSLOT_ENABLED 1
#define TRACE_QEMU_SPICE_DEL_MEMSLOT_ENABLED 1
#define TRACE_QEMU_SPICE_CREATE_PRIMARY_SURFACE_ENABLED 1
#define TRACE_QEMU_SPICE_DESTROY_PRIMARY_SURFACE_ENABLED 1
#define TRACE_QEMU_SPICE_WAKEUP_ENABLED 1
#define TRACE_QEMU_SPICE_CREATE_UPDATE_ENABLED 1
#define TRACE_QEMU_SPICE_DISPLAY_UPDATE_ENABLED 1
#define TRACE_QEMU_SPICE_DISPLAY_SURFACE_ENABLED 1
#define TRACE_QEMU_SPICE_DISPLAY_REFRESH_ENABLED 1
#define TRACE_QEMU_SPICE_UI_INFO_ENABLED 1
#define TRACE_QEMU_SPICE_GL_SURFACE_ENABLED 1
#define TRACE_QEMU_SPICE_GL_SCANOUT_DISABLE_ENABLED 1
#define TRACE_QEMU_SPICE_GL_SCANOUT_TEXTURE_ENABLED 1
#define TRACE_QEMU_SPICE_GL_CURSOR_ENABLED 1
#define TRACE_QEMU_SPICE_GL_FORWARD_DMABUF_ENABLED 1
#define TRACE_QEMU_SPICE_GL_RENDER_DMABUF_ENABLED 1
#define TRACE_QEMU_SPICE_GL_UPDATE_ENABLED 1
#define TRACE_KEYMAP_PARSE_ENABLED 1
#define TRACE_KEYMAP_ADD_ENABLED 1
#define TRACE_KEYMAP_UNMAPPED_ENABLED 1
#define TRACE_XKEYMAP_EXTENSION_ENABLED 1
#define TRACE_XKEYMAP_VENDOR_ENABLED 1
#define TRACE_XKEYMAP_KEYCODES_ENABLED 1
#define TRACE_XKEYMAP_KEYMAP_ENABLED 1
#define TRACE_CLIPBOARD_CHECK_SERIAL_ENABLED 1
#define TRACE_CLIPBOARD_RESET_SERIAL_ENABLED 1
#define TRACE_VDAGENT_FE_OPEN_ENABLED 1
#define TRACE_VDAGENT_CLOSE_ENABLED 1
#define TRACE_VDAGENT_DISCONNECT_ENABLED 1
#define TRACE_VDAGENT_SEND_ENABLED 1
#define TRACE_VDAGENT_SEND_EMPTY_CLIPBOARD_ENABLED 1
#define TRACE_VDAGENT_RECV_CHUNK_ENABLED 1
#define TRACE_VDAGENT_RECV_MSG_ENABLED 1
#define TRACE_VDAGENT_PEER_CAP_ENABLED 1
#define TRACE_VDAGENT_CB_GRAB_SELECTION_ENABLED 1
#define TRACE_VDAGENT_CB_GRAB_DISCARD_ENABLED 1
#define TRACE_VDAGENT_CB_GRAB_TYPE_ENABLED 1
#define TRACE_VDAGENT_CB_SERIAL_DISCARD_ENABLED 1
#define TRACE_DBUS_REGISTERED_LISTENER_ENABLED 1
#define TRACE_DBUS_LISTENER_VANISHED_ENABLED 1
#define TRACE_DBUS_KBD_PRESS_ENABLED 1
#define TRACE_DBUS_KBD_RELEASE_ENABLED 1
#define TRACE_DBUS_MOUSE_PRESS_ENABLED 1
#define TRACE_DBUS_MOUSE_RELEASE_ENABLED 1
#define TRACE_DBUS_MOUSE_SET_POS_ENABLED 1
#define TRACE_DBUS_MOUSE_REL_MOTION_ENABLED 1
#define TRACE_DBUS_TOUCH_SEND_EVENT_ENABLED 1
#define TRACE_DBUS_UPDATE_ENABLED 1
#define TRACE_DBUS_UPDATE_GL_ENABLED 1
#define TRACE_DBUS_CLIPBOARD_GRAB_ENABLED 1
#define TRACE_DBUS_CLIPBOARD_GRAB_FAILED_ENABLED 1
#define TRACE_DBUS_CLIPBOARD_QEMU_REQUEST_ENABLED 1
#define TRACE_DBUS_CLIPBOARD_REGISTER_ENABLED 1
#define TRACE_DBUS_CLIPBOARD_UNREGISTER_ENABLED 1
#define TRACE_DBUS_SCANOUT_TEXTURE_ENABLED 1
#define TRACE_DBUS_GL_GFX_SWITCH_ENABLED 1
#define TRACE_DBUS_FILTER_ENABLED 1
#define TRACE_EGL_INIT_D3D11_DEVICE_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_CONSOLE_GFX_NEW_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CONSOLE_GFX_NEW) || \
    false)

static inline void _nocheck__trace_console_gfx_new(void)
{
    if (trace_event_get_state(TRACE_CONSOLE_GFX_NEW) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:console_gfx_new " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 445 "trace/trace-ui.h"
        } else {
#line 4 "../ui/trace-events"
            qemu_log("console_gfx_new " "" "\n");
#line 449 "trace/trace-ui.h"
        }
    }
}

static inline void trace_console_gfx_new(void)
{
    if (true) {
        _nocheck__trace_console_gfx_new();
    }
}

#define TRACE_CONSOLE_GFX_REUSE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CONSOLE_GFX_REUSE) || \
    false)

static inline void _nocheck__trace_console_gfx_reuse(int index)
{
    if (trace_event_get_state(TRACE_CONSOLE_GFX_REUSE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:console_gfx_reuse " "%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , index);
#line 476 "trace/trace-ui.h"
        } else {
#line 5 "../ui/trace-events"
            qemu_log("console_gfx_reuse " "%d" "\n", index);
#line 480 "trace/trace-ui.h"
        }
    }
}

static inline void trace_console_gfx_reuse(int index)
{
    if (true) {
        _nocheck__trace_console_gfx_reuse(index);
    }
}

#define TRACE_CONSOLE_GFX_CLOSE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CONSOLE_GFX_CLOSE) || \
    false)

static inline void _nocheck__trace_console_gfx_close(int index)
{
    if (trace_event_get_state(TRACE_CONSOLE_GFX_CLOSE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:console_gfx_close " "%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , index);
#line 507 "trace/trace-ui.h"
        } else {
#line 6 "../ui/trace-events"
            qemu_log("console_gfx_close " "%d" "\n", index);
#line 511 "trace/trace-ui.h"
        }
    }
}

static inline void trace_console_gfx_close(int index)
{
    if (true) {
        _nocheck__trace_console_gfx_close(index);
    }
}

#define TRACE_CONSOLE_PUTCHAR_CSI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CONSOLE_PUTCHAR_CSI) || \
    false)

static inline void _nocheck__trace_console_putchar_csi(int esc_param0, int esc_param1, int ch, int nb_esc_params)
{
    if (trace_event_get_state(TRACE_CONSOLE_PUTCHAR_CSI) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:console_putchar_csi " "escape sequence CSI%d;%d%c, %d parameters" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , esc_param0, esc_param1, ch, nb_esc_params);
#line 538 "trace/trace-ui.h"
        } else {
#line 7 "../ui/trace-events"
            qemu_log("console_putchar_csi " "escape sequence CSI%d;%d%c, %d parameters" "\n", esc_param0, esc_param1, ch, nb_esc_params);
#line 542 "trace/trace-ui.h"
        }
    }
}

static inline void trace_console_putchar_csi(int esc_param0, int esc_param1, int ch, int nb_esc_params)
{
    if (true) {
        _nocheck__trace_console_putchar_csi(esc_param0, esc_param1, ch, nb_esc_params);
    }
}

#define TRACE_CONSOLE_PUTCHAR_UNHANDLED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CONSOLE_PUTCHAR_UNHANDLED) || \
    false)

static inline void _nocheck__trace_console_putchar_unhandled(int ch)
{
    if (trace_event_get_state(TRACE_CONSOLE_PUTCHAR_UNHANDLED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:console_putchar_unhandled " "unhandled escape character '%c'" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ch);
#line 569 "trace/trace-ui.h"
        } else {
#line 8 "../ui/trace-events"
            qemu_log("console_putchar_unhandled " "unhandled escape character '%c'" "\n", ch);
#line 573 "trace/trace-ui.h"
        }
    }
}

static inline void trace_console_putchar_unhandled(int ch)
{
    if (true) {
        _nocheck__trace_console_putchar_unhandled(ch);
    }
}

#define TRACE_CONSOLE_TXT_NEW_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CONSOLE_TXT_NEW) || \
    false)

static inline void _nocheck__trace_console_txt_new(int w, int h)
{
    if (trace_event_get_state(TRACE_CONSOLE_TXT_NEW) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:console_txt_new " "%dx%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , w, h);
#line 600 "trace/trace-ui.h"
        } else {
#line 9 "../ui/trace-events"
            qemu_log("console_txt_new " "%dx%d" "\n", w, h);
#line 604 "trace/trace-ui.h"
        }
    }
}

static inline void trace_console_txt_new(int w, int h)
{
    if (true) {
        _nocheck__trace_console_txt_new(w, h);
    }
}

#define TRACE_CONSOLE_SELECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CONSOLE_SELECT) || \
    false)

static inline void _nocheck__trace_console_select(int nr)
{
    if (trace_event_get_state(TRACE_CONSOLE_SELECT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:console_select " "%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , nr);
#line 631 "trace/trace-ui.h"
        } else {
#line 10 "../ui/trace-events"
            qemu_log("console_select " "%d" "\n", nr);
#line 635 "trace/trace-ui.h"
        }
    }
}

static inline void trace_console_select(int nr)
{
    if (true) {
        _nocheck__trace_console_select(nr);
    }
}

#define TRACE_CONSOLE_REFRESH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CONSOLE_REFRESH) || \
    false)

static inline void _nocheck__trace_console_refresh(int interval)
{
    if (trace_event_get_state(TRACE_CONSOLE_REFRESH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:console_refresh " "interval %d ms" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , interval);
#line 662 "trace/trace-ui.h"
        } else {
#line 11 "../ui/trace-events"
            qemu_log("console_refresh " "interval %d ms" "\n", interval);
#line 666 "trace/trace-ui.h"
        }
    }
}

static inline void trace_console_refresh(int interval)
{
    if (true) {
        _nocheck__trace_console_refresh(interval);
    }
}

#define TRACE_DISPLAYSURFACE_CREATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DISPLAYSURFACE_CREATE) || \
    false)

static inline void _nocheck__trace_displaysurface_create(int w, int h)
{
    if (trace_event_get_state(TRACE_DISPLAYSURFACE_CREATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:displaysurface_create " "%dx%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , w, h);
#line 693 "trace/trace-ui.h"
        } else {
#line 12 "../ui/trace-events"
            qemu_log("displaysurface_create " "%dx%d" "\n", w, h);
#line 697 "trace/trace-ui.h"
        }
    }
}

static inline void trace_displaysurface_create(int w, int h)
{
    if (true) {
        _nocheck__trace_displaysurface_create(w, h);
    }
}

#define TRACE_DISPLAYSURFACE_CREATE_FROM_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DISPLAYSURFACE_CREATE_FROM) || \
    false)

static inline void _nocheck__trace_displaysurface_create_from(void * display_surface, int w, int h, uint32_t format)
{
    if (trace_event_get_state(TRACE_DISPLAYSURFACE_CREATE_FROM) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:displaysurface_create_from " "surface=%p, %dx%d, format 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , display_surface, w, h, format);
#line 724 "trace/trace-ui.h"
        } else {
#line 13 "../ui/trace-events"
            qemu_log("displaysurface_create_from " "surface=%p, %dx%d, format 0x%x" "\n", display_surface, w, h, format);
#line 728 "trace/trace-ui.h"
        }
    }
}

static inline void trace_displaysurface_create_from(void * display_surface, int w, int h, uint32_t format)
{
    if (true) {
        _nocheck__trace_displaysurface_create_from(display_surface, w, h, format);
    }
}

#define TRACE_DISPLAYSURFACE_CREATE_PIXMAN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DISPLAYSURFACE_CREATE_PIXMAN) || \
    false)

static inline void _nocheck__trace_displaysurface_create_pixman(void * display_surface)
{
    if (trace_event_get_state(TRACE_DISPLAYSURFACE_CREATE_PIXMAN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 14 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:displaysurface_create_pixman " "surface=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , display_surface);
#line 755 "trace/trace-ui.h"
        } else {
#line 14 "../ui/trace-events"
            qemu_log("displaysurface_create_pixman " "surface=%p" "\n", display_surface);
#line 759 "trace/trace-ui.h"
        }
    }
}

static inline void trace_displaysurface_create_pixman(void * display_surface)
{
    if (true) {
        _nocheck__trace_displaysurface_create_pixman(display_surface);
    }
}

#define TRACE_DISPLAYSURFACE_FREE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DISPLAYSURFACE_FREE) || \
    false)

static inline void _nocheck__trace_displaysurface_free(void * display_surface)
{
    if (trace_event_get_state(TRACE_DISPLAYSURFACE_FREE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 15 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:displaysurface_free " "surface=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , display_surface);
#line 786 "trace/trace-ui.h"
        } else {
#line 15 "../ui/trace-events"
            qemu_log("displaysurface_free " "surface=%p" "\n", display_surface);
#line 790 "trace/trace-ui.h"
        }
    }
}

static inline void trace_displaysurface_free(void * display_surface)
{
    if (true) {
        _nocheck__trace_displaysurface_free(display_surface);
    }
}

#define TRACE_DISPLAYCHANGELISTENER_REGISTER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DISPLAYCHANGELISTENER_REGISTER) || \
    false)

static inline void _nocheck__trace_displaychangelistener_register(void * dcl, const char * name)
{
    if (trace_event_get_state(TRACE_DISPLAYCHANGELISTENER_REGISTER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:displaychangelistener_register " "%p [ %s ]" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dcl, name);
#line 817 "trace/trace-ui.h"
        } else {
#line 16 "../ui/trace-events"
            qemu_log("displaychangelistener_register " "%p [ %s ]" "\n", dcl, name);
#line 821 "trace/trace-ui.h"
        }
    }
}

static inline void trace_displaychangelistener_register(void * dcl, const char * name)
{
    if (true) {
        _nocheck__trace_displaychangelistener_register(dcl, name);
    }
}

#define TRACE_DISPLAYCHANGELISTENER_UNREGISTER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DISPLAYCHANGELISTENER_UNREGISTER) || \
    false)

static inline void _nocheck__trace_displaychangelistener_unregister(void * dcl, const char * name)
{
    if (trace_event_get_state(TRACE_DISPLAYCHANGELISTENER_UNREGISTER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 17 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:displaychangelistener_unregister " "%p [ %s ]" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dcl, name);
#line 848 "trace/trace-ui.h"
        } else {
#line 17 "../ui/trace-events"
            qemu_log("displaychangelistener_unregister " "%p [ %s ]" "\n", dcl, name);
#line 852 "trace/trace-ui.h"
        }
    }
}

static inline void trace_displaychangelistener_unregister(void * dcl, const char * name)
{
    if (true) {
        _nocheck__trace_displaychangelistener_unregister(dcl, name);
    }
}

#define TRACE_PPM_SAVE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PPM_SAVE) || \
    false)

static inline void _nocheck__trace_ppm_save(int fd, void * image)
{
    if (trace_event_get_state(TRACE_PPM_SAVE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 18 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:ppm_save " "fd=%d image=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , fd, image);
#line 879 "trace/trace-ui.h"
        } else {
#line 18 "../ui/trace-events"
            qemu_log("ppm_save " "fd=%d image=%p" "\n", fd, image);
#line 883 "trace/trace-ui.h"
        }
    }
}

static inline void trace_ppm_save(int fd, void * image)
{
    if (true) {
        _nocheck__trace_ppm_save(fd, image);
    }
}

#define TRACE_GD_SWITCH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GD_SWITCH) || \
    false)

static inline void _nocheck__trace_gd_switch(const char * tab, int width, int height)
{
    if (trace_event_get_state(TRACE_GD_SWITCH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 23 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:gd_switch " "tab=%s, width=%d, height=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tab, width, height);
#line 910 "trace/trace-ui.h"
        } else {
#line 23 "../ui/trace-events"
            qemu_log("gd_switch " "tab=%s, width=%d, height=%d" "\n", tab, width, height);
#line 914 "trace/trace-ui.h"
        }
    }
}

static inline void trace_gd_switch(const char * tab, int width, int height)
{
    if (true) {
        _nocheck__trace_gd_switch(tab, width, height);
    }
}

#define TRACE_GD_UPDATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GD_UPDATE) || \
    false)

static inline void _nocheck__trace_gd_update(const char * tab, int x, int y, int w, int h)
{
    if (trace_event_get_state(TRACE_GD_UPDATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 24 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:gd_update " "tab=%s, x=%d, y=%d, w=%d, h=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tab, x, y, w, h);
#line 941 "trace/trace-ui.h"
        } else {
#line 24 "../ui/trace-events"
            qemu_log("gd_update " "tab=%s, x=%d, y=%d, w=%d, h=%d" "\n", tab, x, y, w, h);
#line 945 "trace/trace-ui.h"
        }
    }
}

static inline void trace_gd_update(const char * tab, int x, int y, int w, int h)
{
    if (true) {
        _nocheck__trace_gd_update(tab, x, y, w, h);
    }
}

#define TRACE_GD_KEY_EVENT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GD_KEY_EVENT) || \
    false)

static inline void _nocheck__trace_gd_key_event(const char * tab, int gdk_keycode, int qkeycode, const char * action)
{
    if (trace_event_get_state(TRACE_GD_KEY_EVENT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 25 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:gd_key_event " "tab=%s, translated GDK keycode %d to QKeyCode %d (%s)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tab, gdk_keycode, qkeycode, action);
#line 972 "trace/trace-ui.h"
        } else {
#line 25 "../ui/trace-events"
            qemu_log("gd_key_event " "tab=%s, translated GDK keycode %d to QKeyCode %d (%s)" "\n", tab, gdk_keycode, qkeycode, action);
#line 976 "trace/trace-ui.h"
        }
    }
}

static inline void trace_gd_key_event(const char * tab, int gdk_keycode, int qkeycode, const char * action)
{
    if (true) {
        _nocheck__trace_gd_key_event(tab, gdk_keycode, qkeycode, action);
    }
}

#define TRACE_GD_GRAB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GD_GRAB) || \
    false)

static inline void _nocheck__trace_gd_grab(const char * tab, const char * device, const char * reason)
{
    if (trace_event_get_state(TRACE_GD_GRAB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 26 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:gd_grab " "tab=%s, dev=%s, reason=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tab, device, reason);
#line 1003 "trace/trace-ui.h"
        } else {
#line 26 "../ui/trace-events"
            qemu_log("gd_grab " "tab=%s, dev=%s, reason=%s" "\n", tab, device, reason);
#line 1007 "trace/trace-ui.h"
        }
    }
}

static inline void trace_gd_grab(const char * tab, const char * device, const char * reason)
{
    if (true) {
        _nocheck__trace_gd_grab(tab, device, reason);
    }
}

#define TRACE_GD_UNGRAB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GD_UNGRAB) || \
    false)

static inline void _nocheck__trace_gd_ungrab(const char * tab, const char * device)
{
    if (trace_event_get_state(TRACE_GD_UNGRAB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 27 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:gd_ungrab " "tab=%s, dev=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tab, device);
#line 1034 "trace/trace-ui.h"
        } else {
#line 27 "../ui/trace-events"
            qemu_log("gd_ungrab " "tab=%s, dev=%s" "\n", tab, device);
#line 1038 "trace/trace-ui.h"
        }
    }
}

static inline void trace_gd_ungrab(const char * tab, const char * device)
{
    if (true) {
        _nocheck__trace_gd_ungrab(tab, device);
    }
}

#define TRACE_GD_KEYMAP_WINDOWING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GD_KEYMAP_WINDOWING) || \
    false)

static inline void _nocheck__trace_gd_keymap_windowing(const char * name)
{
    if (trace_event_get_state(TRACE_GD_KEYMAP_WINDOWING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 28 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:gd_keymap_windowing " "backend=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name);
#line 1065 "trace/trace-ui.h"
        } else {
#line 28 "../ui/trace-events"
            qemu_log("gd_keymap_windowing " "backend=%s" "\n", name);
#line 1069 "trace/trace-ui.h"
        }
    }
}

static inline void trace_gd_keymap_windowing(const char * name)
{
    if (true) {
        _nocheck__trace_gd_keymap_windowing(name);
    }
}

#define TRACE_GD_GL_AREA_CREATE_CONTEXT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GD_GL_AREA_CREATE_CONTEXT) || \
    false)

static inline void _nocheck__trace_gd_gl_area_create_context(void * ctx, int major, int minor)
{
    if (trace_event_get_state(TRACE_GD_GL_AREA_CREATE_CONTEXT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 29 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:gd_gl_area_create_context " "ctx=%p, major=%d, minor=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ctx, major, minor);
#line 1096 "trace/trace-ui.h"
        } else {
#line 29 "../ui/trace-events"
            qemu_log("gd_gl_area_create_context " "ctx=%p, major=%d, minor=%d" "\n", ctx, major, minor);
#line 1100 "trace/trace-ui.h"
        }
    }
}

static inline void trace_gd_gl_area_create_context(void * ctx, int major, int minor)
{
    if (true) {
        _nocheck__trace_gd_gl_area_create_context(ctx, major, minor);
    }
}

#define TRACE_GD_GL_AREA_DESTROY_CONTEXT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GD_GL_AREA_DESTROY_CONTEXT) || \
    false)

static inline void _nocheck__trace_gd_gl_area_destroy_context(void * ctx, void * current_ctx)
{
    if (trace_event_get_state(TRACE_GD_GL_AREA_DESTROY_CONTEXT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 30 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:gd_gl_area_destroy_context " "ctx=%p, current_ctx=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ctx, current_ctx);
#line 1127 "trace/trace-ui.h"
        } else {
#line 30 "../ui/trace-events"
            qemu_log("gd_gl_area_destroy_context " "ctx=%p, current_ctx=%p" "\n", ctx, current_ctx);
#line 1131 "trace/trace-ui.h"
        }
    }
}

static inline void trace_gd_gl_area_destroy_context(void * ctx, void * current_ctx)
{
    if (true) {
        _nocheck__trace_gd_gl_area_destroy_context(ctx, current_ctx);
    }
}

#define TRACE_GD_MOTION_EVENT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GD_MOTION_EVENT) || \
    false)

static inline void _nocheck__trace_gd_motion_event(int ww, int wh, int ws, int x, int y)
{
    if (trace_event_get_state(TRACE_GD_MOTION_EVENT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 31 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:gd_motion_event " "ww=%d, wh=%d, ws=%d, x=%d, y=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ww, wh, ws, x, y);
#line 1158 "trace/trace-ui.h"
        } else {
#line 31 "../ui/trace-events"
            qemu_log("gd_motion_event " "ww=%d, wh=%d, ws=%d, x=%d, y=%d" "\n", ww, wh, ws, x, y);
#line 1162 "trace/trace-ui.h"
        }
    }
}

static inline void trace_gd_motion_event(int ww, int wh, int ws, int x, int y)
{
    if (true) {
        _nocheck__trace_gd_motion_event(ww, wh, ws, x, y);
    }
}

#define TRACE_VNC_KEY_GUEST_LEDS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_KEY_GUEST_LEDS) || \
    false)

static inline void _nocheck__trace_vnc_key_guest_leds(bool caps, bool num, bool scroll)
{
    if (trace_event_get_state(TRACE_VNC_KEY_GUEST_LEDS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 37 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_key_guest_leds " "caps %d, num %d, scroll %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , caps, num, scroll);
#line 1189 "trace/trace-ui.h"
        } else {
#line 37 "../ui/trace-events"
            qemu_log("vnc_key_guest_leds " "caps %d, num %d, scroll %d" "\n", caps, num, scroll);
#line 1193 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_key_guest_leds(bool caps, bool num, bool scroll)
{
    if (true) {
        _nocheck__trace_vnc_key_guest_leds(caps, num, scroll);
    }
}

#define TRACE_VNC_KEY_MAP_INIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_KEY_MAP_INIT) || \
    false)

static inline void _nocheck__trace_vnc_key_map_init(const char * layout)
{
    if (trace_event_get_state(TRACE_VNC_KEY_MAP_INIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 38 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_key_map_init " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , layout);
#line 1220 "trace/trace-ui.h"
        } else {
#line 38 "../ui/trace-events"
            qemu_log("vnc_key_map_init " "%s" "\n", layout);
#line 1224 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_key_map_init(const char * layout)
{
    if (true) {
        _nocheck__trace_vnc_key_map_init(layout);
    }
}

#define TRACE_VNC_KEY_EVENT_EXT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_KEY_EVENT_EXT) || \
    false)

static inline void _nocheck__trace_vnc_key_event_ext(bool down, int sym, int keycode, const char * name)
{
    if (trace_event_get_state(TRACE_VNC_KEY_EVENT_EXT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 39 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_key_event_ext " "down %d, sym 0x%x, keycode 0x%x [%s]" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , down, sym, keycode, name);
#line 1251 "trace/trace-ui.h"
        } else {
#line 39 "../ui/trace-events"
            qemu_log("vnc_key_event_ext " "down %d, sym 0x%x, keycode 0x%x [%s]" "\n", down, sym, keycode, name);
#line 1255 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_key_event_ext(bool down, int sym, int keycode, const char * name)
{
    if (true) {
        _nocheck__trace_vnc_key_event_ext(down, sym, keycode, name);
    }
}

#define TRACE_VNC_KEY_EVENT_MAP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_KEY_EVENT_MAP) || \
    false)

static inline void _nocheck__trace_vnc_key_event_map(bool down, int sym, int keycode, const char * name)
{
    if (trace_event_get_state(TRACE_VNC_KEY_EVENT_MAP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 40 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_key_event_map " "down %d, sym 0x%x -> keycode 0x%x [%s]" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , down, sym, keycode, name);
#line 1282 "trace/trace-ui.h"
        } else {
#line 40 "../ui/trace-events"
            qemu_log("vnc_key_event_map " "down %d, sym 0x%x -> keycode 0x%x [%s]" "\n", down, sym, keycode, name);
#line 1286 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_key_event_map(bool down, int sym, int keycode, const char * name)
{
    if (true) {
        _nocheck__trace_vnc_key_event_map(down, sym, keycode, name);
    }
}

#define TRACE_VNC_KEY_SYNC_NUMLOCK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_KEY_SYNC_NUMLOCK) || \
    false)

static inline void _nocheck__trace_vnc_key_sync_numlock(bool on)
{
    if (trace_event_get_state(TRACE_VNC_KEY_SYNC_NUMLOCK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 41 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_key_sync_numlock " "%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , on);
#line 1313 "trace/trace-ui.h"
        } else {
#line 41 "../ui/trace-events"
            qemu_log("vnc_key_sync_numlock " "%d" "\n", on);
#line 1317 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_key_sync_numlock(bool on)
{
    if (true) {
        _nocheck__trace_vnc_key_sync_numlock(on);
    }
}

#define TRACE_VNC_KEY_SYNC_CAPSLOCK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_KEY_SYNC_CAPSLOCK) || \
    false)

static inline void _nocheck__trace_vnc_key_sync_capslock(bool on)
{
    if (trace_event_get_state(TRACE_VNC_KEY_SYNC_CAPSLOCK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 42 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_key_sync_capslock " "%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , on);
#line 1344 "trace/trace-ui.h"
        } else {
#line 42 "../ui/trace-events"
            qemu_log("vnc_key_sync_capslock " "%d" "\n", on);
#line 1348 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_key_sync_capslock(bool on)
{
    if (true) {
        _nocheck__trace_vnc_key_sync_capslock(on);
    }
}

#define TRACE_VNC_MSG_SERVER_AUDIO_BEGIN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_MSG_SERVER_AUDIO_BEGIN) || \
    false)

static inline void _nocheck__trace_vnc_msg_server_audio_begin(void * state, void * ioc)
{
    if (trace_event_get_state(TRACE_VNC_MSG_SERVER_AUDIO_BEGIN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 43 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_msg_server_audio_begin " "VNC server msg audio begin state=%p ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, ioc);
#line 1375 "trace/trace-ui.h"
        } else {
#line 43 "../ui/trace-events"
            qemu_log("vnc_msg_server_audio_begin " "VNC server msg audio begin state=%p ioc=%p" "\n", state, ioc);
#line 1379 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_msg_server_audio_begin(void * state, void * ioc)
{
    if (true) {
        _nocheck__trace_vnc_msg_server_audio_begin(state, ioc);
    }
}

#define TRACE_VNC_MSG_SERVER_AUDIO_END_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_MSG_SERVER_AUDIO_END) || \
    false)

static inline void _nocheck__trace_vnc_msg_server_audio_end(void * state, void * ioc)
{
    if (trace_event_get_state(TRACE_VNC_MSG_SERVER_AUDIO_END) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 44 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_msg_server_audio_end " "VNC server msg audio end state=%p ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, ioc);
#line 1406 "trace/trace-ui.h"
        } else {
#line 44 "../ui/trace-events"
            qemu_log("vnc_msg_server_audio_end " "VNC server msg audio end state=%p ioc=%p" "\n", state, ioc);
#line 1410 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_msg_server_audio_end(void * state, void * ioc)
{
    if (true) {
        _nocheck__trace_vnc_msg_server_audio_end(state, ioc);
    }
}

#define TRACE_VNC_MSG_SERVER_AUDIO_DATA_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_MSG_SERVER_AUDIO_DATA) || \
    false)

static inline void _nocheck__trace_vnc_msg_server_audio_data(void * state, void * ioc, const void * buf, size_t len)
{
    if (trace_event_get_state(TRACE_VNC_MSG_SERVER_AUDIO_DATA) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 45 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_msg_server_audio_data " "VNC server msg audio data state=%p ioc=%p buf=%p len=%zd" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, ioc, buf, len);
#line 1437 "trace/trace-ui.h"
        } else {
#line 45 "../ui/trace-events"
            qemu_log("vnc_msg_server_audio_data " "VNC server msg audio data state=%p ioc=%p buf=%p len=%zd" "\n", state, ioc, buf, len);
#line 1441 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_msg_server_audio_data(void * state, void * ioc, const void * buf, size_t len)
{
    if (true) {
        _nocheck__trace_vnc_msg_server_audio_data(state, ioc, buf, len);
    }
}

#define TRACE_VNC_MSG_SERVER_DESKTOP_RESIZE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_MSG_SERVER_DESKTOP_RESIZE) || \
    false)

static inline void _nocheck__trace_vnc_msg_server_desktop_resize(void * state, void * ioc, int width, int height)
{
    if (trace_event_get_state(TRACE_VNC_MSG_SERVER_DESKTOP_RESIZE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 46 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_msg_server_desktop_resize " "VNC server msg ext resize state=%p ioc=%p size=%dx%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, ioc, width, height);
#line 1468 "trace/trace-ui.h"
        } else {
#line 46 "../ui/trace-events"
            qemu_log("vnc_msg_server_desktop_resize " "VNC server msg ext resize state=%p ioc=%p size=%dx%d" "\n", state, ioc, width, height);
#line 1472 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_msg_server_desktop_resize(void * state, void * ioc, int width, int height)
{
    if (true) {
        _nocheck__trace_vnc_msg_server_desktop_resize(state, ioc, width, height);
    }
}

#define TRACE_VNC_MSG_SERVER_EXT_DESKTOP_RESIZE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_MSG_SERVER_EXT_DESKTOP_RESIZE) || \
    false)

static inline void _nocheck__trace_vnc_msg_server_ext_desktop_resize(void * state, void * ioc, int width, int height, int reason)
{
    if (trace_event_get_state(TRACE_VNC_MSG_SERVER_EXT_DESKTOP_RESIZE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 47 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_msg_server_ext_desktop_resize " "VNC server msg ext resize state=%p ioc=%p size=%dx%d reason=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, ioc, width, height, reason);
#line 1499 "trace/trace-ui.h"
        } else {
#line 47 "../ui/trace-events"
            qemu_log("vnc_msg_server_ext_desktop_resize " "VNC server msg ext resize state=%p ioc=%p size=%dx%d reason=%d" "\n", state, ioc, width, height, reason);
#line 1503 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_msg_server_ext_desktop_resize(void * state, void * ioc, int width, int height, int reason)
{
    if (true) {
        _nocheck__trace_vnc_msg_server_ext_desktop_resize(state, ioc, width, height, reason);
    }
}

#define TRACE_VNC_MSG_CLIENT_AUDIO_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_MSG_CLIENT_AUDIO_ENABLE) || \
    false)

static inline void _nocheck__trace_vnc_msg_client_audio_enable(void * state, void * ioc)
{
    if (trace_event_get_state(TRACE_VNC_MSG_CLIENT_AUDIO_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 48 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_msg_client_audio_enable " "VNC client msg audio enable state=%p ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, ioc);
#line 1530 "trace/trace-ui.h"
        } else {
#line 48 "../ui/trace-events"
            qemu_log("vnc_msg_client_audio_enable " "VNC client msg audio enable state=%p ioc=%p" "\n", state, ioc);
#line 1534 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_msg_client_audio_enable(void * state, void * ioc)
{
    if (true) {
        _nocheck__trace_vnc_msg_client_audio_enable(state, ioc);
    }
}

#define TRACE_VNC_MSG_CLIENT_AUDIO_DISABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_MSG_CLIENT_AUDIO_DISABLE) || \
    false)

static inline void _nocheck__trace_vnc_msg_client_audio_disable(void * state, void * ioc)
{
    if (trace_event_get_state(TRACE_VNC_MSG_CLIENT_AUDIO_DISABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 49 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_msg_client_audio_disable " "VNC client msg audio disable state=%p ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, ioc);
#line 1561 "trace/trace-ui.h"
        } else {
#line 49 "../ui/trace-events"
            qemu_log("vnc_msg_client_audio_disable " "VNC client msg audio disable state=%p ioc=%p" "\n", state, ioc);
#line 1565 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_msg_client_audio_disable(void * state, void * ioc)
{
    if (true) {
        _nocheck__trace_vnc_msg_client_audio_disable(state, ioc);
    }
}

#define TRACE_VNC_MSG_CLIENT_AUDIO_FORMAT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_MSG_CLIENT_AUDIO_FORMAT) || \
    false)

static inline void _nocheck__trace_vnc_msg_client_audio_format(void * state, void * ioc, int fmt, int channels, int freq)
{
    if (trace_event_get_state(TRACE_VNC_MSG_CLIENT_AUDIO_FORMAT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 50 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_msg_client_audio_format " "VNC client msg audio format state=%p ioc=%p fmt=%d channels=%d freq=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, ioc, fmt, channels, freq);
#line 1592 "trace/trace-ui.h"
        } else {
#line 50 "../ui/trace-events"
            qemu_log("vnc_msg_client_audio_format " "VNC client msg audio format state=%p ioc=%p fmt=%d channels=%d freq=%d" "\n", state, ioc, fmt, channels, freq);
#line 1596 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_msg_client_audio_format(void * state, void * ioc, int fmt, int channels, int freq)
{
    if (true) {
        _nocheck__trace_vnc_msg_client_audio_format(state, ioc, fmt, channels, freq);
    }
}

#define TRACE_VNC_MSG_CLIENT_SET_DESKTOP_SIZE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_MSG_CLIENT_SET_DESKTOP_SIZE) || \
    false)

static inline void _nocheck__trace_vnc_msg_client_set_desktop_size(void * state, void * ioc, int width, int height, int screens)
{
    if (trace_event_get_state(TRACE_VNC_MSG_CLIENT_SET_DESKTOP_SIZE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 51 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_msg_client_set_desktop_size " "VNC client msg set desktop size  state=%p ioc=%p size=%dx%d screens=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, ioc, width, height, screens);
#line 1623 "trace/trace-ui.h"
        } else {
#line 51 "../ui/trace-events"
            qemu_log("vnc_msg_client_set_desktop_size " "VNC client msg set desktop size  state=%p ioc=%p size=%dx%d screens=%d" "\n", state, ioc, width, height, screens);
#line 1627 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_msg_client_set_desktop_size(void * state, void * ioc, int width, int height, int screens)
{
    if (true) {
        _nocheck__trace_vnc_msg_client_set_desktop_size(state, ioc, width, height, screens);
    }
}

#define TRACE_VNC_CLIENT_EOF_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_EOF) || \
    false)

static inline void _nocheck__trace_vnc_client_eof(void * state, void * ioc)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_EOF) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 52 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_client_eof " "VNC client EOF state=%p ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, ioc);
#line 1654 "trace/trace-ui.h"
        } else {
#line 52 "../ui/trace-events"
            qemu_log("vnc_client_eof " "VNC client EOF state=%p ioc=%p" "\n", state, ioc);
#line 1658 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_client_eof(void * state, void * ioc)
{
    if (true) {
        _nocheck__trace_vnc_client_eof(state, ioc);
    }
}

#define TRACE_VNC_CLIENT_IO_ERROR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_IO_ERROR) || \
    false)

static inline void _nocheck__trace_vnc_client_io_error(void * state, void * ioc, const char * msg)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_IO_ERROR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 53 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_client_io_error " "VNC client I/O error state=%p ioc=%p errmsg=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, ioc, msg);
#line 1685 "trace/trace-ui.h"
        } else {
#line 53 "../ui/trace-events"
            qemu_log("vnc_client_io_error " "VNC client I/O error state=%p ioc=%p errmsg=%s" "\n", state, ioc, msg);
#line 1689 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_client_io_error(void * state, void * ioc, const char * msg)
{
    if (true) {
        _nocheck__trace_vnc_client_io_error(state, ioc, msg);
    }
}

#define TRACE_VNC_CLIENT_CONNECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_CONNECT) || \
    false)

static inline void _nocheck__trace_vnc_client_connect(void * state, void * ioc)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_CONNECT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 54 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_client_connect " "VNC client connect state=%p ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, ioc);
#line 1716 "trace/trace-ui.h"
        } else {
#line 54 "../ui/trace-events"
            qemu_log("vnc_client_connect " "VNC client connect state=%p ioc=%p" "\n", state, ioc);
#line 1720 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_client_connect(void * state, void * ioc)
{
    if (true) {
        _nocheck__trace_vnc_client_connect(state, ioc);
    }
}

#define TRACE_VNC_CLIENT_DISCONNECT_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_DISCONNECT_START) || \
    false)

static inline void _nocheck__trace_vnc_client_disconnect_start(void * state, void * ioc)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_DISCONNECT_START) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 55 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_client_disconnect_start " "VNC client disconnect start state=%p ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, ioc);
#line 1747 "trace/trace-ui.h"
        } else {
#line 55 "../ui/trace-events"
            qemu_log("vnc_client_disconnect_start " "VNC client disconnect start state=%p ioc=%p" "\n", state, ioc);
#line 1751 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_client_disconnect_start(void * state, void * ioc)
{
    if (true) {
        _nocheck__trace_vnc_client_disconnect_start(state, ioc);
    }
}

#define TRACE_VNC_CLIENT_DISCONNECT_FINISH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_DISCONNECT_FINISH) || \
    false)

static inline void _nocheck__trace_vnc_client_disconnect_finish(void * state, void * ioc)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_DISCONNECT_FINISH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 56 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_client_disconnect_finish " "VNC client disconnect finish state=%p ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, ioc);
#line 1778 "trace/trace-ui.h"
        } else {
#line 56 "../ui/trace-events"
            qemu_log("vnc_client_disconnect_finish " "VNC client disconnect finish state=%p ioc=%p" "\n", state, ioc);
#line 1782 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_client_disconnect_finish(void * state, void * ioc)
{
    if (true) {
        _nocheck__trace_vnc_client_disconnect_finish(state, ioc);
    }
}

#define TRACE_VNC_CLIENT_IO_WRAP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_IO_WRAP) || \
    false)

static inline void _nocheck__trace_vnc_client_io_wrap(void * state, void * ioc, const char * type)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_IO_WRAP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 57 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_client_io_wrap " "VNC client I/O wrap state=%p ioc=%p type=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, ioc, type);
#line 1809 "trace/trace-ui.h"
        } else {
#line 57 "../ui/trace-events"
            qemu_log("vnc_client_io_wrap " "VNC client I/O wrap state=%p ioc=%p type=%s" "\n", state, ioc, type);
#line 1813 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_client_io_wrap(void * state, void * ioc, const char * type)
{
    if (true) {
        _nocheck__trace_vnc_client_io_wrap(state, ioc, type);
    }
}

#define TRACE_VNC_CLIENT_THROTTLE_THRESHOLD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_THROTTLE_THRESHOLD) || \
    false)

static inline void _nocheck__trace_vnc_client_throttle_threshold(void * state, void * ioc, size_t oldoffset, size_t offset, int client_width, int client_height, int bytes_per_pixel, void * audio_cap)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_THROTTLE_THRESHOLD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 58 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_client_throttle_threshold " "VNC client throttle threshold state=%p ioc=%p oldoffset=%zu newoffset=%zu width=%d height=%d bpp=%d audio=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, ioc, oldoffset, offset, client_width, client_height, bytes_per_pixel, audio_cap);
#line 1840 "trace/trace-ui.h"
        } else {
#line 58 "../ui/trace-events"
            qemu_log("vnc_client_throttle_threshold " "VNC client throttle threshold state=%p ioc=%p oldoffset=%zu newoffset=%zu width=%d height=%d bpp=%d audio=%p" "\n", state, ioc, oldoffset, offset, client_width, client_height, bytes_per_pixel, audio_cap);
#line 1844 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_client_throttle_threshold(void * state, void * ioc, size_t oldoffset, size_t offset, int client_width, int client_height, int bytes_per_pixel, void * audio_cap)
{
    if (true) {
        _nocheck__trace_vnc_client_throttle_threshold(state, ioc, oldoffset, offset, client_width, client_height, bytes_per_pixel, audio_cap);
    }
}

#define TRACE_VNC_CLIENT_THROTTLE_INCREMENTAL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_THROTTLE_INCREMENTAL) || \
    false)

static inline void _nocheck__trace_vnc_client_throttle_incremental(void * state, void * ioc, int job_update, size_t offset)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_THROTTLE_INCREMENTAL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 59 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_client_throttle_incremental " "VNC client throttle incremental state=%p ioc=%p job-update=%d offset=%zu" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, ioc, job_update, offset);
#line 1871 "trace/trace-ui.h"
        } else {
#line 59 "../ui/trace-events"
            qemu_log("vnc_client_throttle_incremental " "VNC client throttle incremental state=%p ioc=%p job-update=%d offset=%zu" "\n", state, ioc, job_update, offset);
#line 1875 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_client_throttle_incremental(void * state, void * ioc, int job_update, size_t offset)
{
    if (true) {
        _nocheck__trace_vnc_client_throttle_incremental(state, ioc, job_update, offset);
    }
}

#define TRACE_VNC_CLIENT_THROTTLE_FORCED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_THROTTLE_FORCED) || \
    false)

static inline void _nocheck__trace_vnc_client_throttle_forced(void * state, void * ioc, int job_update, size_t offset)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_THROTTLE_FORCED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 60 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_client_throttle_forced " "VNC client throttle forced state=%p ioc=%p job-update=%d offset=%zu" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, ioc, job_update, offset);
#line 1902 "trace/trace-ui.h"
        } else {
#line 60 "../ui/trace-events"
            qemu_log("vnc_client_throttle_forced " "VNC client throttle forced state=%p ioc=%p job-update=%d offset=%zu" "\n", state, ioc, job_update, offset);
#line 1906 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_client_throttle_forced(void * state, void * ioc, int job_update, size_t offset)
{
    if (true) {
        _nocheck__trace_vnc_client_throttle_forced(state, ioc, job_update, offset);
    }
}

#define TRACE_VNC_CLIENT_THROTTLE_AUDIO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_THROTTLE_AUDIO) || \
    false)

static inline void _nocheck__trace_vnc_client_throttle_audio(void * state, void * ioc, size_t offset)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_THROTTLE_AUDIO) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 61 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_client_throttle_audio " "VNC client throttle audio state=%p ioc=%p offset=%zu" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, ioc, offset);
#line 1933 "trace/trace-ui.h"
        } else {
#line 61 "../ui/trace-events"
            qemu_log("vnc_client_throttle_audio " "VNC client throttle audio state=%p ioc=%p offset=%zu" "\n", state, ioc, offset);
#line 1937 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_client_throttle_audio(void * state, void * ioc, size_t offset)
{
    if (true) {
        _nocheck__trace_vnc_client_throttle_audio(state, ioc, offset);
    }
}

#define TRACE_VNC_CLIENT_UNTHROTTLE_FORCED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_UNTHROTTLE_FORCED) || \
    false)

static inline void _nocheck__trace_vnc_client_unthrottle_forced(void * state, void * ioc)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_UNTHROTTLE_FORCED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 62 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_client_unthrottle_forced " "VNC client unthrottle forced offset state=%p ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, ioc);
#line 1964 "trace/trace-ui.h"
        } else {
#line 62 "../ui/trace-events"
            qemu_log("vnc_client_unthrottle_forced " "VNC client unthrottle forced offset state=%p ioc=%p" "\n", state, ioc);
#line 1968 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_client_unthrottle_forced(void * state, void * ioc)
{
    if (true) {
        _nocheck__trace_vnc_client_unthrottle_forced(state, ioc);
    }
}

#define TRACE_VNC_CLIENT_UNTHROTTLE_INCREMENTAL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_UNTHROTTLE_INCREMENTAL) || \
    false)

static inline void _nocheck__trace_vnc_client_unthrottle_incremental(void * state, void * ioc, size_t offset)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_UNTHROTTLE_INCREMENTAL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 63 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_client_unthrottle_incremental " "VNC client unthrottle incremental state=%p ioc=%p offset=%zu" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, ioc, offset);
#line 1995 "trace/trace-ui.h"
        } else {
#line 63 "../ui/trace-events"
            qemu_log("vnc_client_unthrottle_incremental " "VNC client unthrottle incremental state=%p ioc=%p offset=%zu" "\n", state, ioc, offset);
#line 1999 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_client_unthrottle_incremental(void * state, void * ioc, size_t offset)
{
    if (true) {
        _nocheck__trace_vnc_client_unthrottle_incremental(state, ioc, offset);
    }
}

#define TRACE_VNC_CLIENT_OUTPUT_LIMIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_OUTPUT_LIMIT) || \
    false)

static inline void _nocheck__trace_vnc_client_output_limit(void * state, void * ioc, size_t offset, size_t threshold)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_OUTPUT_LIMIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 64 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_client_output_limit " "VNC client output limit state=%p ioc=%p offset=%zu threshold=%zu" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, ioc, offset, threshold);
#line 2026 "trace/trace-ui.h"
        } else {
#line 64 "../ui/trace-events"
            qemu_log("vnc_client_output_limit " "VNC client output limit state=%p ioc=%p offset=%zu threshold=%zu" "\n", state, ioc, offset, threshold);
#line 2030 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_client_output_limit(void * state, void * ioc, size_t offset, size_t threshold)
{
    if (true) {
        _nocheck__trace_vnc_client_output_limit(state, ioc, offset, threshold);
    }
}

#define TRACE_VNC_SERVER_DPY_PAGEFLIP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_SERVER_DPY_PAGEFLIP) || \
    false)

static inline void _nocheck__trace_vnc_server_dpy_pageflip(void * dpy, int w, int h, int fmt)
{
    if (trace_event_get_state(TRACE_VNC_SERVER_DPY_PAGEFLIP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 65 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_server_dpy_pageflip " "VNC server dpy pageflip dpy=%p size=%dx%d fmt=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dpy, w, h, fmt);
#line 2057 "trace/trace-ui.h"
        } else {
#line 65 "../ui/trace-events"
            qemu_log("vnc_server_dpy_pageflip " "VNC server dpy pageflip dpy=%p size=%dx%d fmt=%d" "\n", dpy, w, h, fmt);
#line 2061 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_server_dpy_pageflip(void * dpy, int w, int h, int fmt)
{
    if (true) {
        _nocheck__trace_vnc_server_dpy_pageflip(dpy, w, h, fmt);
    }
}

#define TRACE_VNC_SERVER_DPY_RECREATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_SERVER_DPY_RECREATE) || \
    false)

static inline void _nocheck__trace_vnc_server_dpy_recreate(void * dpy, int w, int h, int fmt)
{
    if (trace_event_get_state(TRACE_VNC_SERVER_DPY_RECREATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 66 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_server_dpy_recreate " "VNC server dpy recreate dpy=%p size=%dx%d fmt=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dpy, w, h, fmt);
#line 2088 "trace/trace-ui.h"
        } else {
#line 66 "../ui/trace-events"
            qemu_log("vnc_server_dpy_recreate " "VNC server dpy recreate dpy=%p size=%dx%d fmt=%d" "\n", dpy, w, h, fmt);
#line 2092 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_server_dpy_recreate(void * dpy, int w, int h, int fmt)
{
    if (true) {
        _nocheck__trace_vnc_server_dpy_recreate(dpy, w, h, fmt);
    }
}

#define TRACE_VNC_JOB_ADD_RECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_JOB_ADD_RECT) || \
    false)

static inline void _nocheck__trace_vnc_job_add_rect(void * state, void * job, int x, int y, int w, int h)
{
    if (trace_event_get_state(TRACE_VNC_JOB_ADD_RECT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 67 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_job_add_rect " "VNC add rect state=%p job=%p offset=%d,%d size=%dx%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, job, x, y, w, h);
#line 2119 "trace/trace-ui.h"
        } else {
#line 67 "../ui/trace-events"
            qemu_log("vnc_job_add_rect " "VNC add rect state=%p job=%p offset=%d,%d size=%dx%d" "\n", state, job, x, y, w, h);
#line 2123 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_job_add_rect(void * state, void * job, int x, int y, int w, int h)
{
    if (true) {
        _nocheck__trace_vnc_job_add_rect(state, job, x, y, w, h);
    }
}

#define TRACE_VNC_JOB_DISCARD_RECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_JOB_DISCARD_RECT) || \
    false)

static inline void _nocheck__trace_vnc_job_discard_rect(void * state, void * job, int x, int y, int w, int h)
{
    if (trace_event_get_state(TRACE_VNC_JOB_DISCARD_RECT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 68 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_job_discard_rect " "VNC job discard rect state=%p job=%p offset=%d,%d size=%dx%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, job, x, y, w, h);
#line 2150 "trace/trace-ui.h"
        } else {
#line 68 "../ui/trace-events"
            qemu_log("vnc_job_discard_rect " "VNC job discard rect state=%p job=%p offset=%d,%d size=%dx%d" "\n", state, job, x, y, w, h);
#line 2154 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_job_discard_rect(void * state, void * job, int x, int y, int w, int h)
{
    if (true) {
        _nocheck__trace_vnc_job_discard_rect(state, job, x, y, w, h);
    }
}

#define TRACE_VNC_JOB_CLAMP_RECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_JOB_CLAMP_RECT) || \
    false)

static inline void _nocheck__trace_vnc_job_clamp_rect(void * state, void * job, int x, int y, int w, int h)
{
    if (trace_event_get_state(TRACE_VNC_JOB_CLAMP_RECT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 69 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_job_clamp_rect " "VNC job clamp rect state=%p job=%p offset=%d,%d size=%dx%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, job, x, y, w, h);
#line 2181 "trace/trace-ui.h"
        } else {
#line 69 "../ui/trace-events"
            qemu_log("vnc_job_clamp_rect " "VNC job clamp rect state=%p job=%p offset=%d,%d size=%dx%d" "\n", state, job, x, y, w, h);
#line 2185 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_job_clamp_rect(void * state, void * job, int x, int y, int w, int h)
{
    if (true) {
        _nocheck__trace_vnc_job_clamp_rect(state, job, x, y, w, h);
    }
}

#define TRACE_VNC_JOB_CLAMPED_RECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_JOB_CLAMPED_RECT) || \
    false)

static inline void _nocheck__trace_vnc_job_clamped_rect(void * state, void * job, int x, int y, int w, int h)
{
    if (trace_event_get_state(TRACE_VNC_JOB_CLAMPED_RECT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 70 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_job_clamped_rect " "VNC job clamp rect state=%p job=%p offset=%d,%d size=%dx%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, job, x, y, w, h);
#line 2212 "trace/trace-ui.h"
        } else {
#line 70 "../ui/trace-events"
            qemu_log("vnc_job_clamped_rect " "VNC job clamp rect state=%p job=%p offset=%d,%d size=%dx%d" "\n", state, job, x, y, w, h);
#line 2216 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_job_clamped_rect(void * state, void * job, int x, int y, int w, int h)
{
    if (true) {
        _nocheck__trace_vnc_job_clamped_rect(state, job, x, y, w, h);
    }
}

#define TRACE_VNC_JOB_NRECTS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_JOB_NRECTS) || \
    false)

static inline void _nocheck__trace_vnc_job_nrects(void * state, void * job, int nrects)
{
    if (trace_event_get_state(TRACE_VNC_JOB_NRECTS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 71 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_job_nrects " "VNC job state=%p job=%p nrects=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, job, nrects);
#line 2243 "trace/trace-ui.h"
        } else {
#line 71 "../ui/trace-events"
            qemu_log("vnc_job_nrects " "VNC job state=%p job=%p nrects=%d" "\n", state, job, nrects);
#line 2247 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_job_nrects(void * state, void * job, int nrects)
{
    if (true) {
        _nocheck__trace_vnc_job_nrects(state, job, nrects);
    }
}

#define TRACE_VNC_AUTH_INIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_INIT) || \
    false)

static inline void _nocheck__trace_vnc_auth_init(void * display, int websock, int auth, int subauth)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_INIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 72 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_auth_init " "VNC auth init state=%p websock=%d auth=%d subauth=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , display, websock, auth, subauth);
#line 2274 "trace/trace-ui.h"
        } else {
#line 72 "../ui/trace-events"
            qemu_log("vnc_auth_init " "VNC auth init state=%p websock=%d auth=%d subauth=%d" "\n", display, websock, auth, subauth);
#line 2278 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_auth_init(void * display, int websock, int auth, int subauth)
{
    if (true) {
        _nocheck__trace_vnc_auth_init(display, websock, auth, subauth);
    }
}

#define TRACE_VNC_AUTH_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_START) || \
    false)

static inline void _nocheck__trace_vnc_auth_start(void * state, int method)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_START) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 73 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_auth_start " "VNC client auth start state=%p method=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, method);
#line 2305 "trace/trace-ui.h"
        } else {
#line 73 "../ui/trace-events"
            qemu_log("vnc_auth_start " "VNC client auth start state=%p method=%d" "\n", state, method);
#line 2309 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_auth_start(void * state, int method)
{
    if (true) {
        _nocheck__trace_vnc_auth_start(state, method);
    }
}

#define TRACE_VNC_AUTH_PASS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_PASS) || \
    false)

static inline void _nocheck__trace_vnc_auth_pass(void * state, int method)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_PASS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 74 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_auth_pass " "VNC client auth passed state=%p method=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, method);
#line 2336 "trace/trace-ui.h"
        } else {
#line 74 "../ui/trace-events"
            qemu_log("vnc_auth_pass " "VNC client auth passed state=%p method=%d" "\n", state, method);
#line 2340 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_auth_pass(void * state, int method)
{
    if (true) {
        _nocheck__trace_vnc_auth_pass(state, method);
    }
}

#define TRACE_VNC_AUTH_FAIL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_FAIL) || \
    false)

static inline void _nocheck__trace_vnc_auth_fail(void * state, int method, const char * message, const char * reason)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_FAIL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 75 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_auth_fail " "VNC client auth failed state=%p method=%d message=%s reason=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, method, message, reason);
#line 2367 "trace/trace-ui.h"
        } else {
#line 75 "../ui/trace-events"
            qemu_log("vnc_auth_fail " "VNC client auth failed state=%p method=%d message=%s reason=%s" "\n", state, method, message, reason);
#line 2371 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_auth_fail(void * state, int method, const char * message, const char * reason)
{
    if (true) {
        _nocheck__trace_vnc_auth_fail(state, method, message, reason);
    }
}

#define TRACE_VNC_AUTH_REJECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_REJECT) || \
    false)

static inline void _nocheck__trace_vnc_auth_reject(void * state, int expect, int got)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_REJECT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 76 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_auth_reject " "VNC client auth rejected state=%p method expected=%d got=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, expect, got);
#line 2398 "trace/trace-ui.h"
        } else {
#line 76 "../ui/trace-events"
            qemu_log("vnc_auth_reject " "VNC client auth rejected state=%p method expected=%d got=%d" "\n", state, expect, got);
#line 2402 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_auth_reject(void * state, int expect, int got)
{
    if (true) {
        _nocheck__trace_vnc_auth_reject(state, expect, got);
    }
}

#define TRACE_VNC_AUTH_VENCRYPT_VERSION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_VENCRYPT_VERSION) || \
    false)

static inline void _nocheck__trace_vnc_auth_vencrypt_version(void * state, int major, int minor)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_VENCRYPT_VERSION) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 77 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_auth_vencrypt_version " "VNC client auth vencrypt version state=%p major=%d minor=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, major, minor);
#line 2429 "trace/trace-ui.h"
        } else {
#line 77 "../ui/trace-events"
            qemu_log("vnc_auth_vencrypt_version " "VNC client auth vencrypt version state=%p major=%d minor=%d" "\n", state, major, minor);
#line 2433 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_auth_vencrypt_version(void * state, int major, int minor)
{
    if (true) {
        _nocheck__trace_vnc_auth_vencrypt_version(state, major, minor);
    }
}

#define TRACE_VNC_AUTH_VENCRYPT_SUBAUTH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_VENCRYPT_SUBAUTH) || \
    false)

static inline void _nocheck__trace_vnc_auth_vencrypt_subauth(void * state, int auth)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_VENCRYPT_SUBAUTH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 78 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_auth_vencrypt_subauth " "VNC client auth vencrypt subauth state=%p auth=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, auth);
#line 2460 "trace/trace-ui.h"
        } else {
#line 78 "../ui/trace-events"
            qemu_log("vnc_auth_vencrypt_subauth " "VNC client auth vencrypt subauth state=%p auth=%d" "\n", state, auth);
#line 2464 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_auth_vencrypt_subauth(void * state, int auth)
{
    if (true) {
        _nocheck__trace_vnc_auth_vencrypt_subauth(state, auth);
    }
}

#define TRACE_VNC_AUTH_SASL_MECH_LIST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_SASL_MECH_LIST) || \
    false)

static inline void _nocheck__trace_vnc_auth_sasl_mech_list(void * state, const char * mechs)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_SASL_MECH_LIST) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 79 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_auth_sasl_mech_list " "VNC client auth SASL state=%p mechlist=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, mechs);
#line 2491 "trace/trace-ui.h"
        } else {
#line 79 "../ui/trace-events"
            qemu_log("vnc_auth_sasl_mech_list " "VNC client auth SASL state=%p mechlist=%s" "\n", state, mechs);
#line 2495 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_auth_sasl_mech_list(void * state, const char * mechs)
{
    if (true) {
        _nocheck__trace_vnc_auth_sasl_mech_list(state, mechs);
    }
}

#define TRACE_VNC_AUTH_SASL_MECH_CHOOSE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_SASL_MECH_CHOOSE) || \
    false)

static inline void _nocheck__trace_vnc_auth_sasl_mech_choose(void * state, const char * mech)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_SASL_MECH_CHOOSE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 80 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_auth_sasl_mech_choose " "VNC client auth SASL state=%p mech=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, mech);
#line 2522 "trace/trace-ui.h"
        } else {
#line 80 "../ui/trace-events"
            qemu_log("vnc_auth_sasl_mech_choose " "VNC client auth SASL state=%p mech=%s" "\n", state, mech);
#line 2526 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_auth_sasl_mech_choose(void * state, const char * mech)
{
    if (true) {
        _nocheck__trace_vnc_auth_sasl_mech_choose(state, mech);
    }
}

#define TRACE_VNC_AUTH_SASL_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_SASL_START) || \
    false)

static inline void _nocheck__trace_vnc_auth_sasl_start(void * state, const void * clientdata, size_t clientlen, const void * serverdata, size_t severlen, int ret)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_SASL_START) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 81 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_auth_sasl_start " "VNC client auth SASL start state=%p clientdata=%p clientlen=%zu serverdata=%p serverlen=%zu ret=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, clientdata, clientlen, serverdata, severlen, ret);
#line 2553 "trace/trace-ui.h"
        } else {
#line 81 "../ui/trace-events"
            qemu_log("vnc_auth_sasl_start " "VNC client auth SASL start state=%p clientdata=%p clientlen=%zu serverdata=%p serverlen=%zu ret=%d" "\n", state, clientdata, clientlen, serverdata, severlen, ret);
#line 2557 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_auth_sasl_start(void * state, const void * clientdata, size_t clientlen, const void * serverdata, size_t severlen, int ret)
{
    if (true) {
        _nocheck__trace_vnc_auth_sasl_start(state, clientdata, clientlen, serverdata, severlen, ret);
    }
}

#define TRACE_VNC_AUTH_SASL_STEP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_SASL_STEP) || \
    false)

static inline void _nocheck__trace_vnc_auth_sasl_step(void * state, const void * clientdata, size_t clientlen, const void * serverdata, size_t severlen, int ret)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_SASL_STEP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 82 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_auth_sasl_step " "VNC client auth SASL step state=%p clientdata=%p clientlen=%zu serverdata=%p serverlen=%zu ret=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, clientdata, clientlen, serverdata, severlen, ret);
#line 2584 "trace/trace-ui.h"
        } else {
#line 82 "../ui/trace-events"
            qemu_log("vnc_auth_sasl_step " "VNC client auth SASL step state=%p clientdata=%p clientlen=%zu serverdata=%p serverlen=%zu ret=%d" "\n", state, clientdata, clientlen, serverdata, severlen, ret);
#line 2588 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_auth_sasl_step(void * state, const void * clientdata, size_t clientlen, const void * serverdata, size_t severlen, int ret)
{
    if (true) {
        _nocheck__trace_vnc_auth_sasl_step(state, clientdata, clientlen, serverdata, severlen, ret);
    }
}

#define TRACE_VNC_AUTH_SASL_SSF_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_SASL_SSF) || \
    false)

static inline void _nocheck__trace_vnc_auth_sasl_ssf(void * state, int ssf)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_SASL_SSF) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 83 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_auth_sasl_ssf " "VNC client auth SASL SSF state=%p size=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, ssf);
#line 2615 "trace/trace-ui.h"
        } else {
#line 83 "../ui/trace-events"
            qemu_log("vnc_auth_sasl_ssf " "VNC client auth SASL SSF state=%p size=%d" "\n", state, ssf);
#line 2619 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_auth_sasl_ssf(void * state, int ssf)
{
    if (true) {
        _nocheck__trace_vnc_auth_sasl_ssf(state, ssf);
    }
}

#define TRACE_VNC_AUTH_SASL_USERNAME_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_SASL_USERNAME) || \
    false)

static inline void _nocheck__trace_vnc_auth_sasl_username(void * state, const char * name)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_SASL_USERNAME) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 84 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_auth_sasl_username " "VNC client auth SASL user state=%p name=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, name);
#line 2646 "trace/trace-ui.h"
        } else {
#line 84 "../ui/trace-events"
            qemu_log("vnc_auth_sasl_username " "VNC client auth SASL user state=%p name=%s" "\n", state, name);
#line 2650 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_auth_sasl_username(void * state, const char * name)
{
    if (true) {
        _nocheck__trace_vnc_auth_sasl_username(state, name);
    }
}

#define TRACE_VNC_AUTH_SASL_ACL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_SASL_ACL) || \
    false)

static inline void _nocheck__trace_vnc_auth_sasl_acl(void * state, int allow)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_SASL_ACL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 85 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vnc_auth_sasl_acl " "VNC client auth SASL ACL state=%p allow=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, allow);
#line 2677 "trace/trace-ui.h"
        } else {
#line 85 "../ui/trace-events"
            qemu_log("vnc_auth_sasl_acl " "VNC client auth SASL ACL state=%p allow=%d" "\n", state, allow);
#line 2681 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vnc_auth_sasl_acl(void * state, int allow)
{
    if (true) {
        _nocheck__trace_vnc_auth_sasl_acl(state, allow);
    }
}

#define TRACE_INPUT_EVENT_KEY_NUMBER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_INPUT_EVENT_KEY_NUMBER) || \
    false)

static inline void _nocheck__trace_input_event_key_number(int conidx, int number, const char * qcode, bool down)
{
    if (trace_event_get_state(TRACE_INPUT_EVENT_KEY_NUMBER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 89 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:input_event_key_number " "con %d, key number 0x%x [%s], down %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , conidx, number, qcode, down);
#line 2708 "trace/trace-ui.h"
        } else {
#line 89 "../ui/trace-events"
            qemu_log("input_event_key_number " "con %d, key number 0x%x [%s], down %d" "\n", conidx, number, qcode, down);
#line 2712 "trace/trace-ui.h"
        }
    }
}

static inline void trace_input_event_key_number(int conidx, int number, const char * qcode, bool down)
{
    if (true) {
        _nocheck__trace_input_event_key_number(conidx, number, qcode, down);
    }
}

#define TRACE_INPUT_EVENT_KEY_QCODE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_INPUT_EVENT_KEY_QCODE) || \
    false)

static inline void _nocheck__trace_input_event_key_qcode(int conidx, const char * qcode, bool down)
{
    if (trace_event_get_state(TRACE_INPUT_EVENT_KEY_QCODE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 90 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:input_event_key_qcode " "con %d, key qcode %s, down %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , conidx, qcode, down);
#line 2739 "trace/trace-ui.h"
        } else {
#line 90 "../ui/trace-events"
            qemu_log("input_event_key_qcode " "con %d, key qcode %s, down %d" "\n", conidx, qcode, down);
#line 2743 "trace/trace-ui.h"
        }
    }
}

static inline void trace_input_event_key_qcode(int conidx, const char * qcode, bool down)
{
    if (true) {
        _nocheck__trace_input_event_key_qcode(conidx, qcode, down);
    }
}

#define TRACE_INPUT_EVENT_BTN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_INPUT_EVENT_BTN) || \
    false)

static inline void _nocheck__trace_input_event_btn(int conidx, const char * btn, bool down)
{
    if (trace_event_get_state(TRACE_INPUT_EVENT_BTN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 91 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:input_event_btn " "con %d, button %s, down %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , conidx, btn, down);
#line 2770 "trace/trace-ui.h"
        } else {
#line 91 "../ui/trace-events"
            qemu_log("input_event_btn " "con %d, button %s, down %d" "\n", conidx, btn, down);
#line 2774 "trace/trace-ui.h"
        }
    }
}

static inline void trace_input_event_btn(int conidx, const char * btn, bool down)
{
    if (true) {
        _nocheck__trace_input_event_btn(conidx, btn, down);
    }
}

#define TRACE_INPUT_EVENT_REL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_INPUT_EVENT_REL) || \
    false)

static inline void _nocheck__trace_input_event_rel(int conidx, const char * axis, int value)
{
    if (trace_event_get_state(TRACE_INPUT_EVENT_REL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 92 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:input_event_rel " "con %d, axis %s, value %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , conidx, axis, value);
#line 2801 "trace/trace-ui.h"
        } else {
#line 92 "../ui/trace-events"
            qemu_log("input_event_rel " "con %d, axis %s, value %d" "\n", conidx, axis, value);
#line 2805 "trace/trace-ui.h"
        }
    }
}

static inline void trace_input_event_rel(int conidx, const char * axis, int value)
{
    if (true) {
        _nocheck__trace_input_event_rel(conidx, axis, value);
    }
}

#define TRACE_INPUT_EVENT_ABS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_INPUT_EVENT_ABS) || \
    false)

static inline void _nocheck__trace_input_event_abs(int conidx, const char * axis, int value)
{
    if (trace_event_get_state(TRACE_INPUT_EVENT_ABS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 93 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:input_event_abs " "con %d, axis %s, value 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , conidx, axis, value);
#line 2832 "trace/trace-ui.h"
        } else {
#line 93 "../ui/trace-events"
            qemu_log("input_event_abs " "con %d, axis %s, value 0x%x" "\n", conidx, axis, value);
#line 2836 "trace/trace-ui.h"
        }
    }
}

static inline void trace_input_event_abs(int conidx, const char * axis, int value)
{
    if (true) {
        _nocheck__trace_input_event_abs(conidx, axis, value);
    }
}

#define TRACE_INPUT_EVENT_MTT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_INPUT_EVENT_MTT) || \
    false)

static inline void _nocheck__trace_input_event_mtt(int conidx, const char * axis, int value)
{
    if (trace_event_get_state(TRACE_INPUT_EVENT_MTT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 94 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:input_event_mtt " "con %d, axis %s, value 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , conidx, axis, value);
#line 2863 "trace/trace-ui.h"
        } else {
#line 94 "../ui/trace-events"
            qemu_log("input_event_mtt " "con %d, axis %s, value 0x%x" "\n", conidx, axis, value);
#line 2867 "trace/trace-ui.h"
        }
    }
}

static inline void trace_input_event_mtt(int conidx, const char * axis, int value)
{
    if (true) {
        _nocheck__trace_input_event_mtt(conidx, axis, value);
    }
}

#define TRACE_INPUT_EVENT_SYNC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_INPUT_EVENT_SYNC) || \
    false)

static inline void _nocheck__trace_input_event_sync(void)
{
    if (trace_event_get_state(TRACE_INPUT_EVENT_SYNC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 95 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:input_event_sync " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 2894 "trace/trace-ui.h"
        } else {
#line 95 "../ui/trace-events"
            qemu_log("input_event_sync " "" "\n");
#line 2898 "trace/trace-ui.h"
        }
    }
}

static inline void trace_input_event_sync(void)
{
    if (true) {
        _nocheck__trace_input_event_sync();
    }
}

#define TRACE_SDL2_PROCESS_KEY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SDL2_PROCESS_KEY) || \
    false)

static inline void _nocheck__trace_sdl2_process_key(int sdl_scancode, int qcode, const char * action)
{
    if (trace_event_get_state(TRACE_SDL2_PROCESS_KEY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 98 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:sdl2_process_key " "translated SDL scancode %d to QKeyCode %d (%s)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , sdl_scancode, qcode, action);
#line 2925 "trace/trace-ui.h"
        } else {
#line 98 "../ui/trace-events"
            qemu_log("sdl2_process_key " "translated SDL scancode %d to QKeyCode %d (%s)" "\n", sdl_scancode, qcode, action);
#line 2929 "trace/trace-ui.h"
        }
    }
}

static inline void trace_sdl2_process_key(int sdl_scancode, int qcode, const char * action)
{
    if (true) {
        _nocheck__trace_sdl2_process_key(sdl_scancode, qcode, action);
    }
}

#define TRACE_QEMU_SPICE_ADD_MEMSLOT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SPICE_ADD_MEMSLOT) || \
    false)

static inline void _nocheck__trace_qemu_spice_add_memslot(int qid, uint32_t slot_id, unsigned long virt_start, unsigned long virt_end, int async)
{
    if (trace_event_get_state(TRACE_QEMU_SPICE_ADD_MEMSLOT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 101 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_spice_add_memslot " "%d %u: host virt 0x%lx - 0x%lx async=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid, slot_id, virt_start, virt_end, async);
#line 2956 "trace/trace-ui.h"
        } else {
#line 101 "../ui/trace-events"
            qemu_log("qemu_spice_add_memslot " "%d %u: host virt 0x%lx - 0x%lx async=%d" "\n", qid, slot_id, virt_start, virt_end, async);
#line 2960 "trace/trace-ui.h"
        }
    }
}

static inline void trace_qemu_spice_add_memslot(int qid, uint32_t slot_id, unsigned long virt_start, unsigned long virt_end, int async)
{
    if (true) {
        _nocheck__trace_qemu_spice_add_memslot(qid, slot_id, virt_start, virt_end, async);
    }
}

#define TRACE_QEMU_SPICE_DEL_MEMSLOT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SPICE_DEL_MEMSLOT) || \
    false)

static inline void _nocheck__trace_qemu_spice_del_memslot(int qid, uint32_t gid, uint32_t slot_id)
{
    if (trace_event_get_state(TRACE_QEMU_SPICE_DEL_MEMSLOT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 102 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_spice_del_memslot " "%d gid=%u sid=%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid, gid, slot_id);
#line 2987 "trace/trace-ui.h"
        } else {
#line 102 "../ui/trace-events"
            qemu_log("qemu_spice_del_memslot " "%d gid=%u sid=%u" "\n", qid, gid, slot_id);
#line 2991 "trace/trace-ui.h"
        }
    }
}

static inline void trace_qemu_spice_del_memslot(int qid, uint32_t gid, uint32_t slot_id)
{
    if (true) {
        _nocheck__trace_qemu_spice_del_memslot(qid, gid, slot_id);
    }
}

#define TRACE_QEMU_SPICE_CREATE_PRIMARY_SURFACE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SPICE_CREATE_PRIMARY_SURFACE) || \
    false)

static inline void _nocheck__trace_qemu_spice_create_primary_surface(int qid, uint32_t sid, void * surface, int async)
{
    if (trace_event_get_state(TRACE_QEMU_SPICE_CREATE_PRIMARY_SURFACE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 103 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_spice_create_primary_surface " "%d sid=%u surface=%p async=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid, sid, surface, async);
#line 3018 "trace/trace-ui.h"
        } else {
#line 103 "../ui/trace-events"
            qemu_log("qemu_spice_create_primary_surface " "%d sid=%u surface=%p async=%d" "\n", qid, sid, surface, async);
#line 3022 "trace/trace-ui.h"
        }
    }
}

static inline void trace_qemu_spice_create_primary_surface(int qid, uint32_t sid, void * surface, int async)
{
    if (true) {
        _nocheck__trace_qemu_spice_create_primary_surface(qid, sid, surface, async);
    }
}

#define TRACE_QEMU_SPICE_DESTROY_PRIMARY_SURFACE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SPICE_DESTROY_PRIMARY_SURFACE) || \
    false)

static inline void _nocheck__trace_qemu_spice_destroy_primary_surface(int qid, uint32_t sid, int async)
{
    if (trace_event_get_state(TRACE_QEMU_SPICE_DESTROY_PRIMARY_SURFACE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 104 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_spice_destroy_primary_surface " "%d sid=%u async=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid, sid, async);
#line 3049 "trace/trace-ui.h"
        } else {
#line 104 "../ui/trace-events"
            qemu_log("qemu_spice_destroy_primary_surface " "%d sid=%u async=%d" "\n", qid, sid, async);
#line 3053 "trace/trace-ui.h"
        }
    }
}

static inline void trace_qemu_spice_destroy_primary_surface(int qid, uint32_t sid, int async)
{
    if (true) {
        _nocheck__trace_qemu_spice_destroy_primary_surface(qid, sid, async);
    }
}

#define TRACE_QEMU_SPICE_WAKEUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SPICE_WAKEUP) || \
    false)

static inline void _nocheck__trace_qemu_spice_wakeup(uint32_t qid)
{
    if (trace_event_get_state(TRACE_QEMU_SPICE_WAKEUP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 105 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_spice_wakeup " "%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid);
#line 3080 "trace/trace-ui.h"
        } else {
#line 105 "../ui/trace-events"
            qemu_log("qemu_spice_wakeup " "%d" "\n", qid);
#line 3084 "trace/trace-ui.h"
        }
    }
}

static inline void trace_qemu_spice_wakeup(uint32_t qid)
{
    if (true) {
        _nocheck__trace_qemu_spice_wakeup(qid);
    }
}

#define TRACE_QEMU_SPICE_CREATE_UPDATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SPICE_CREATE_UPDATE) || \
    false)

static inline void _nocheck__trace_qemu_spice_create_update(uint32_t left, uint32_t right, uint32_t top, uint32_t bottom)
{
    if (trace_event_get_state(TRACE_QEMU_SPICE_CREATE_UPDATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 106 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_spice_create_update " "lr %d -> %d,  tb -> %d -> %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , left, right, top, bottom);
#line 3111 "trace/trace-ui.h"
        } else {
#line 106 "../ui/trace-events"
            qemu_log("qemu_spice_create_update " "lr %d -> %d,  tb -> %d -> %d" "\n", left, right, top, bottom);
#line 3115 "trace/trace-ui.h"
        }
    }
}

static inline void trace_qemu_spice_create_update(uint32_t left, uint32_t right, uint32_t top, uint32_t bottom)
{
    if (true) {
        _nocheck__trace_qemu_spice_create_update(left, right, top, bottom);
    }
}

#define TRACE_QEMU_SPICE_DISPLAY_UPDATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SPICE_DISPLAY_UPDATE) || \
    false)

static inline void _nocheck__trace_qemu_spice_display_update(int qid, uint32_t x, uint32_t y, uint32_t w, uint32_t h)
{
    if (trace_event_get_state(TRACE_QEMU_SPICE_DISPLAY_UPDATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 107 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_spice_display_update " "%d +%d+%d %dx%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid, x, y, w, h);
#line 3142 "trace/trace-ui.h"
        } else {
#line 107 "../ui/trace-events"
            qemu_log("qemu_spice_display_update " "%d +%d+%d %dx%d" "\n", qid, x, y, w, h);
#line 3146 "trace/trace-ui.h"
        }
    }
}

static inline void trace_qemu_spice_display_update(int qid, uint32_t x, uint32_t y, uint32_t w, uint32_t h)
{
    if (true) {
        _nocheck__trace_qemu_spice_display_update(qid, x, y, w, h);
    }
}

#define TRACE_QEMU_SPICE_DISPLAY_SURFACE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SPICE_DISPLAY_SURFACE) || \
    false)

static inline void _nocheck__trace_qemu_spice_display_surface(int qid, uint32_t w, uint32_t h, int fast)
{
    if (trace_event_get_state(TRACE_QEMU_SPICE_DISPLAY_SURFACE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 108 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_spice_display_surface " "%d %dx%d, fast %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid, w, h, fast);
#line 3173 "trace/trace-ui.h"
        } else {
#line 108 "../ui/trace-events"
            qemu_log("qemu_spice_display_surface " "%d %dx%d, fast %d" "\n", qid, w, h, fast);
#line 3177 "trace/trace-ui.h"
        }
    }
}

static inline void trace_qemu_spice_display_surface(int qid, uint32_t w, uint32_t h, int fast)
{
    if (true) {
        _nocheck__trace_qemu_spice_display_surface(qid, w, h, fast);
    }
}

#define TRACE_QEMU_SPICE_DISPLAY_REFRESH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SPICE_DISPLAY_REFRESH) || \
    false)

static inline void _nocheck__trace_qemu_spice_display_refresh(int qid, int notify)
{
    if (trace_event_get_state(TRACE_QEMU_SPICE_DISPLAY_REFRESH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 109 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_spice_display_refresh " "%d notify %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid, notify);
#line 3204 "trace/trace-ui.h"
        } else {
#line 109 "../ui/trace-events"
            qemu_log("qemu_spice_display_refresh " "%d notify %d" "\n", qid, notify);
#line 3208 "trace/trace-ui.h"
        }
    }
}

static inline void trace_qemu_spice_display_refresh(int qid, int notify)
{
    if (true) {
        _nocheck__trace_qemu_spice_display_refresh(qid, notify);
    }
}

#define TRACE_QEMU_SPICE_UI_INFO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SPICE_UI_INFO) || \
    false)

static inline void _nocheck__trace_qemu_spice_ui_info(int qid, uint32_t width, uint32_t height)
{
    if (trace_event_get_state(TRACE_QEMU_SPICE_UI_INFO) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 110 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_spice_ui_info " "%d %dx%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid, width, height);
#line 3235 "trace/trace-ui.h"
        } else {
#line 110 "../ui/trace-events"
            qemu_log("qemu_spice_ui_info " "%d %dx%d" "\n", qid, width, height);
#line 3239 "trace/trace-ui.h"
        }
    }
}

static inline void trace_qemu_spice_ui_info(int qid, uint32_t width, uint32_t height)
{
    if (true) {
        _nocheck__trace_qemu_spice_ui_info(qid, width, height);
    }
}

#define TRACE_QEMU_SPICE_GL_SURFACE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SPICE_GL_SURFACE) || \
    false)

static inline void _nocheck__trace_qemu_spice_gl_surface(int qid, uint32_t w, uint32_t h, uint32_t fourcc)
{
    if (trace_event_get_state(TRACE_QEMU_SPICE_GL_SURFACE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 112 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_spice_gl_surface " "%d %dx%d, fourcc 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid, w, h, fourcc);
#line 3266 "trace/trace-ui.h"
        } else {
#line 112 "../ui/trace-events"
            qemu_log("qemu_spice_gl_surface " "%d %dx%d, fourcc 0x%x" "\n", qid, w, h, fourcc);
#line 3270 "trace/trace-ui.h"
        }
    }
}

static inline void trace_qemu_spice_gl_surface(int qid, uint32_t w, uint32_t h, uint32_t fourcc)
{
    if (true) {
        _nocheck__trace_qemu_spice_gl_surface(qid, w, h, fourcc);
    }
}

#define TRACE_QEMU_SPICE_GL_SCANOUT_DISABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SPICE_GL_SCANOUT_DISABLE) || \
    false)

static inline void _nocheck__trace_qemu_spice_gl_scanout_disable(int qid)
{
    if (trace_event_get_state(TRACE_QEMU_SPICE_GL_SCANOUT_DISABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 113 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_spice_gl_scanout_disable " "%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid);
#line 3297 "trace/trace-ui.h"
        } else {
#line 113 "../ui/trace-events"
            qemu_log("qemu_spice_gl_scanout_disable " "%d" "\n", qid);
#line 3301 "trace/trace-ui.h"
        }
    }
}

static inline void trace_qemu_spice_gl_scanout_disable(int qid)
{
    if (true) {
        _nocheck__trace_qemu_spice_gl_scanout_disable(qid);
    }
}

#define TRACE_QEMU_SPICE_GL_SCANOUT_TEXTURE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SPICE_GL_SCANOUT_TEXTURE) || \
    false)

static inline void _nocheck__trace_qemu_spice_gl_scanout_texture(int qid, uint32_t w, uint32_t h, uint32_t fourcc)
{
    if (trace_event_get_state(TRACE_QEMU_SPICE_GL_SCANOUT_TEXTURE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 114 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_spice_gl_scanout_texture " "%d %dx%d, fourcc 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid, w, h, fourcc);
#line 3328 "trace/trace-ui.h"
        } else {
#line 114 "../ui/trace-events"
            qemu_log("qemu_spice_gl_scanout_texture " "%d %dx%d, fourcc 0x%x" "\n", qid, w, h, fourcc);
#line 3332 "trace/trace-ui.h"
        }
    }
}

static inline void trace_qemu_spice_gl_scanout_texture(int qid, uint32_t w, uint32_t h, uint32_t fourcc)
{
    if (true) {
        _nocheck__trace_qemu_spice_gl_scanout_texture(qid, w, h, fourcc);
    }
}

#define TRACE_QEMU_SPICE_GL_CURSOR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SPICE_GL_CURSOR) || \
    false)

static inline void _nocheck__trace_qemu_spice_gl_cursor(int qid, bool enabled, bool hotspot)
{
    if (trace_event_get_state(TRACE_QEMU_SPICE_GL_CURSOR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 115 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_spice_gl_cursor " "%d enabled %d, hotspot %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid, enabled, hotspot);
#line 3359 "trace/trace-ui.h"
        } else {
#line 115 "../ui/trace-events"
            qemu_log("qemu_spice_gl_cursor " "%d enabled %d, hotspot %d" "\n", qid, enabled, hotspot);
#line 3363 "trace/trace-ui.h"
        }
    }
}

static inline void trace_qemu_spice_gl_cursor(int qid, bool enabled, bool hotspot)
{
    if (true) {
        _nocheck__trace_qemu_spice_gl_cursor(qid, enabled, hotspot);
    }
}

#define TRACE_QEMU_SPICE_GL_FORWARD_DMABUF_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SPICE_GL_FORWARD_DMABUF) || \
    false)

static inline void _nocheck__trace_qemu_spice_gl_forward_dmabuf(int qid, uint32_t width, uint32_t height)
{
    if (trace_event_get_state(TRACE_QEMU_SPICE_GL_FORWARD_DMABUF) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 116 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_spice_gl_forward_dmabuf " "%d %dx%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid, width, height);
#line 3390 "trace/trace-ui.h"
        } else {
#line 116 "../ui/trace-events"
            qemu_log("qemu_spice_gl_forward_dmabuf " "%d %dx%d" "\n", qid, width, height);
#line 3394 "trace/trace-ui.h"
        }
    }
}

static inline void trace_qemu_spice_gl_forward_dmabuf(int qid, uint32_t width, uint32_t height)
{
    if (true) {
        _nocheck__trace_qemu_spice_gl_forward_dmabuf(qid, width, height);
    }
}

#define TRACE_QEMU_SPICE_GL_RENDER_DMABUF_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SPICE_GL_RENDER_DMABUF) || \
    false)

static inline void _nocheck__trace_qemu_spice_gl_render_dmabuf(int qid, uint32_t width, uint32_t height)
{
    if (trace_event_get_state(TRACE_QEMU_SPICE_GL_RENDER_DMABUF) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 117 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_spice_gl_render_dmabuf " "%d %dx%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid, width, height);
#line 3421 "trace/trace-ui.h"
        } else {
#line 117 "../ui/trace-events"
            qemu_log("qemu_spice_gl_render_dmabuf " "%d %dx%d" "\n", qid, width, height);
#line 3425 "trace/trace-ui.h"
        }
    }
}

static inline void trace_qemu_spice_gl_render_dmabuf(int qid, uint32_t width, uint32_t height)
{
    if (true) {
        _nocheck__trace_qemu_spice_gl_render_dmabuf(qid, width, height);
    }
}

#define TRACE_QEMU_SPICE_GL_UPDATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SPICE_GL_UPDATE) || \
    false)

static inline void _nocheck__trace_qemu_spice_gl_update(int qid, uint32_t x, uint32_t y, uint32_t w, uint32_t h)
{
    if (trace_event_get_state(TRACE_QEMU_SPICE_GL_UPDATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 118 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_spice_gl_update " "%d +%d+%d %dx%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , qid, x, y, w, h);
#line 3452 "trace/trace-ui.h"
        } else {
#line 118 "../ui/trace-events"
            qemu_log("qemu_spice_gl_update " "%d +%d+%d %dx%d" "\n", qid, x, y, w, h);
#line 3456 "trace/trace-ui.h"
        }
    }
}

static inline void trace_qemu_spice_gl_update(int qid, uint32_t x, uint32_t y, uint32_t w, uint32_t h)
{
    if (true) {
        _nocheck__trace_qemu_spice_gl_update(qid, x, y, w, h);
    }
}

#define TRACE_KEYMAP_PARSE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_KEYMAP_PARSE) || \
    false)

static inline void _nocheck__trace_keymap_parse(const char * file)
{
    if (trace_event_get_state(TRACE_KEYMAP_PARSE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 121 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:keymap_parse " "file %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , file);
#line 3483 "trace/trace-ui.h"
        } else {
#line 121 "../ui/trace-events"
            qemu_log("keymap_parse " "file %s" "\n", file);
#line 3487 "trace/trace-ui.h"
        }
    }
}

static inline void trace_keymap_parse(const char * file)
{
    if (true) {
        _nocheck__trace_keymap_parse(file);
    }
}

#define TRACE_KEYMAP_ADD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_KEYMAP_ADD) || \
    false)

static inline void _nocheck__trace_keymap_add(int sym, int code, const char * line)
{
    if (trace_event_get_state(TRACE_KEYMAP_ADD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 122 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:keymap_add " "sym=0x%04x code=0x%04x (line: %s)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , sym, code, line);
#line 3514 "trace/trace-ui.h"
        } else {
#line 122 "../ui/trace-events"
            qemu_log("keymap_add " "sym=0x%04x code=0x%04x (line: %s)" "\n", sym, code, line);
#line 3518 "trace/trace-ui.h"
        }
    }
}

static inline void trace_keymap_add(int sym, int code, const char * line)
{
    if (true) {
        _nocheck__trace_keymap_add(sym, code, line);
    }
}

#define TRACE_KEYMAP_UNMAPPED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_KEYMAP_UNMAPPED) || \
    false)

static inline void _nocheck__trace_keymap_unmapped(int sym)
{
    if (trace_event_get_state(TRACE_KEYMAP_UNMAPPED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 123 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:keymap_unmapped " "sym=0x%04x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , sym);
#line 3545 "trace/trace-ui.h"
        } else {
#line 123 "../ui/trace-events"
            qemu_log("keymap_unmapped " "sym=0x%04x" "\n", sym);
#line 3549 "trace/trace-ui.h"
        }
    }
}

static inline void trace_keymap_unmapped(int sym)
{
    if (true) {
        _nocheck__trace_keymap_unmapped(sym);
    }
}

#define TRACE_XKEYMAP_EXTENSION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XKEYMAP_EXTENSION) || \
    false)

static inline void _nocheck__trace_xkeymap_extension(const char * name)
{
    if (trace_event_get_state(TRACE_XKEYMAP_EXTENSION) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 126 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:xkeymap_extension " "extension '%s'" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name);
#line 3576 "trace/trace-ui.h"
        } else {
#line 126 "../ui/trace-events"
            qemu_log("xkeymap_extension " "extension '%s'" "\n", name);
#line 3580 "trace/trace-ui.h"
        }
    }
}

static inline void trace_xkeymap_extension(const char * name)
{
    if (true) {
        _nocheck__trace_xkeymap_extension(name);
    }
}

#define TRACE_XKEYMAP_VENDOR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XKEYMAP_VENDOR) || \
    false)

static inline void _nocheck__trace_xkeymap_vendor(const char * name)
{
    if (trace_event_get_state(TRACE_XKEYMAP_VENDOR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 127 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:xkeymap_vendor " "vendor '%s'" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name);
#line 3607 "trace/trace-ui.h"
        } else {
#line 127 "../ui/trace-events"
            qemu_log("xkeymap_vendor " "vendor '%s'" "\n", name);
#line 3611 "trace/trace-ui.h"
        }
    }
}

static inline void trace_xkeymap_vendor(const char * name)
{
    if (true) {
        _nocheck__trace_xkeymap_vendor(name);
    }
}

#define TRACE_XKEYMAP_KEYCODES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XKEYMAP_KEYCODES) || \
    false)

static inline void _nocheck__trace_xkeymap_keycodes(const char * name)
{
    if (trace_event_get_state(TRACE_XKEYMAP_KEYCODES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 128 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:xkeymap_keycodes " "keycodes '%s'" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name);
#line 3638 "trace/trace-ui.h"
        } else {
#line 128 "../ui/trace-events"
            qemu_log("xkeymap_keycodes " "keycodes '%s'" "\n", name);
#line 3642 "trace/trace-ui.h"
        }
    }
}

static inline void trace_xkeymap_keycodes(const char * name)
{
    if (true) {
        _nocheck__trace_xkeymap_keycodes(name);
    }
}

#define TRACE_XKEYMAP_KEYMAP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XKEYMAP_KEYMAP) || \
    false)

static inline void _nocheck__trace_xkeymap_keymap(const char * name)
{
    if (trace_event_get_state(TRACE_XKEYMAP_KEYMAP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 129 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:xkeymap_keymap " "keymap '%s'" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name);
#line 3669 "trace/trace-ui.h"
        } else {
#line 129 "../ui/trace-events"
            qemu_log("xkeymap_keymap " "keymap '%s'" "\n", name);
#line 3673 "trace/trace-ui.h"
        }
    }
}

static inline void trace_xkeymap_keymap(const char * name)
{
    if (true) {
        _nocheck__trace_xkeymap_keymap(name);
    }
}

#define TRACE_CLIPBOARD_CHECK_SERIAL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CLIPBOARD_CHECK_SERIAL) || \
    false)

static inline void _nocheck__trace_clipboard_check_serial(int cur, int recv, bool ok)
{
    if (trace_event_get_state(TRACE_CLIPBOARD_CHECK_SERIAL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 132 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:clipboard_check_serial " "cur:%d recv:%d %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cur, recv, ok);
#line 3700 "trace/trace-ui.h"
        } else {
#line 132 "../ui/trace-events"
            qemu_log("clipboard_check_serial " "cur:%d recv:%d %d" "\n", cur, recv, ok);
#line 3704 "trace/trace-ui.h"
        }
    }
}

static inline void trace_clipboard_check_serial(int cur, int recv, bool ok)
{
    if (true) {
        _nocheck__trace_clipboard_check_serial(cur, recv, ok);
    }
}

#define TRACE_CLIPBOARD_RESET_SERIAL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CLIPBOARD_RESET_SERIAL) || \
    false)

static inline void _nocheck__trace_clipboard_reset_serial(void)
{
    if (trace_event_get_state(TRACE_CLIPBOARD_RESET_SERIAL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 133 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:clipboard_reset_serial " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 3731 "trace/trace-ui.h"
        } else {
#line 133 "../ui/trace-events"
            qemu_log("clipboard_reset_serial " "" "\n");
#line 3735 "trace/trace-ui.h"
        }
    }
}

static inline void trace_clipboard_reset_serial(void)
{
    if (true) {
        _nocheck__trace_clipboard_reset_serial();
    }
}

#define TRACE_VDAGENT_FE_OPEN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VDAGENT_FE_OPEN) || \
    false)

static inline void _nocheck__trace_vdagent_fe_open(bool fe_open)
{
    if (trace_event_get_state(TRACE_VDAGENT_FE_OPEN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 136 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vdagent_fe_open " "fe_open=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , fe_open);
#line 3762 "trace/trace-ui.h"
        } else {
#line 136 "../ui/trace-events"
            qemu_log("vdagent_fe_open " "fe_open=%d" "\n", fe_open);
#line 3766 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vdagent_fe_open(bool fe_open)
{
    if (true) {
        _nocheck__trace_vdagent_fe_open(fe_open);
    }
}

#define TRACE_VDAGENT_CLOSE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VDAGENT_CLOSE) || \
    false)

static inline void _nocheck__trace_vdagent_close(void)
{
    if (trace_event_get_state(TRACE_VDAGENT_CLOSE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 137 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vdagent_close " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 3793 "trace/trace-ui.h"
        } else {
#line 137 "../ui/trace-events"
            qemu_log("vdagent_close " "" "\n");
#line 3797 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vdagent_close(void)
{
    if (true) {
        _nocheck__trace_vdagent_close();
    }
}

#define TRACE_VDAGENT_DISCONNECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VDAGENT_DISCONNECT) || \
    false)

static inline void _nocheck__trace_vdagent_disconnect(void)
{
    if (trace_event_get_state(TRACE_VDAGENT_DISCONNECT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 138 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vdagent_disconnect " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 3824 "trace/trace-ui.h"
        } else {
#line 138 "../ui/trace-events"
            qemu_log("vdagent_disconnect " "" "\n");
#line 3828 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vdagent_disconnect(void)
{
    if (true) {
        _nocheck__trace_vdagent_disconnect();
    }
}

#define TRACE_VDAGENT_SEND_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VDAGENT_SEND) || \
    false)

static inline void _nocheck__trace_vdagent_send(const char * name)
{
    if (trace_event_get_state(TRACE_VDAGENT_SEND) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 139 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vdagent_send " "msg %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name);
#line 3855 "trace/trace-ui.h"
        } else {
#line 139 "../ui/trace-events"
            qemu_log("vdagent_send " "msg %s" "\n", name);
#line 3859 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vdagent_send(const char * name)
{
    if (true) {
        _nocheck__trace_vdagent_send(name);
    }
}

#define TRACE_VDAGENT_SEND_EMPTY_CLIPBOARD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VDAGENT_SEND_EMPTY_CLIPBOARD) || \
    false)

static inline void _nocheck__trace_vdagent_send_empty_clipboard(void)
{
    if (trace_event_get_state(TRACE_VDAGENT_SEND_EMPTY_CLIPBOARD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 140 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vdagent_send_empty_clipboard " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 3886 "trace/trace-ui.h"
        } else {
#line 140 "../ui/trace-events"
            qemu_log("vdagent_send_empty_clipboard " "" "\n");
#line 3890 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vdagent_send_empty_clipboard(void)
{
    if (true) {
        _nocheck__trace_vdagent_send_empty_clipboard();
    }
}

#define TRACE_VDAGENT_RECV_CHUNK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VDAGENT_RECV_CHUNK) || \
    false)

static inline void _nocheck__trace_vdagent_recv_chunk(uint32_t size)
{
    if (trace_event_get_state(TRACE_VDAGENT_RECV_CHUNK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 141 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vdagent_recv_chunk " "size %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , size);
#line 3917 "trace/trace-ui.h"
        } else {
#line 141 "../ui/trace-events"
            qemu_log("vdagent_recv_chunk " "size %d" "\n", size);
#line 3921 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vdagent_recv_chunk(uint32_t size)
{
    if (true) {
        _nocheck__trace_vdagent_recv_chunk(size);
    }
}

#define TRACE_VDAGENT_RECV_MSG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VDAGENT_RECV_MSG) || \
    false)

static inline void _nocheck__trace_vdagent_recv_msg(const char * name, uint32_t size)
{
    if (trace_event_get_state(TRACE_VDAGENT_RECV_MSG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 142 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vdagent_recv_msg " "msg %s, size %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, size);
#line 3948 "trace/trace-ui.h"
        } else {
#line 142 "../ui/trace-events"
            qemu_log("vdagent_recv_msg " "msg %s, size %d" "\n", name, size);
#line 3952 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vdagent_recv_msg(const char * name, uint32_t size)
{
    if (true) {
        _nocheck__trace_vdagent_recv_msg(name, size);
    }
}

#define TRACE_VDAGENT_PEER_CAP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VDAGENT_PEER_CAP) || \
    false)

static inline void _nocheck__trace_vdagent_peer_cap(const char * name)
{
    if (trace_event_get_state(TRACE_VDAGENT_PEER_CAP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 143 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vdagent_peer_cap " "cap %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name);
#line 3979 "trace/trace-ui.h"
        } else {
#line 143 "../ui/trace-events"
            qemu_log("vdagent_peer_cap " "cap %s" "\n", name);
#line 3983 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vdagent_peer_cap(const char * name)
{
    if (true) {
        _nocheck__trace_vdagent_peer_cap(name);
    }
}

#define TRACE_VDAGENT_CB_GRAB_SELECTION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VDAGENT_CB_GRAB_SELECTION) || \
    false)

static inline void _nocheck__trace_vdagent_cb_grab_selection(const char * name)
{
    if (trace_event_get_state(TRACE_VDAGENT_CB_GRAB_SELECTION) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 144 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vdagent_cb_grab_selection " "selection %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name);
#line 4010 "trace/trace-ui.h"
        } else {
#line 144 "../ui/trace-events"
            qemu_log("vdagent_cb_grab_selection " "selection %s" "\n", name);
#line 4014 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vdagent_cb_grab_selection(const char * name)
{
    if (true) {
        _nocheck__trace_vdagent_cb_grab_selection(name);
    }
}

#define TRACE_VDAGENT_CB_GRAB_DISCARD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VDAGENT_CB_GRAB_DISCARD) || \
    false)

static inline void _nocheck__trace_vdagent_cb_grab_discard(const char * name, int cur, int recv)
{
    if (trace_event_get_state(TRACE_VDAGENT_CB_GRAB_DISCARD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 145 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vdagent_cb_grab_discard " "selection %s, cur:%d recv:%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, cur, recv);
#line 4041 "trace/trace-ui.h"
        } else {
#line 145 "../ui/trace-events"
            qemu_log("vdagent_cb_grab_discard " "selection %s, cur:%d recv:%d" "\n", name, cur, recv);
#line 4045 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vdagent_cb_grab_discard(const char * name, int cur, int recv)
{
    if (true) {
        _nocheck__trace_vdagent_cb_grab_discard(name, cur, recv);
    }
}

#define TRACE_VDAGENT_CB_GRAB_TYPE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VDAGENT_CB_GRAB_TYPE) || \
    false)

static inline void _nocheck__trace_vdagent_cb_grab_type(const char * name)
{
    if (trace_event_get_state(TRACE_VDAGENT_CB_GRAB_TYPE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 146 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vdagent_cb_grab_type " "type %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name);
#line 4072 "trace/trace-ui.h"
        } else {
#line 146 "../ui/trace-events"
            qemu_log("vdagent_cb_grab_type " "type %s" "\n", name);
#line 4076 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vdagent_cb_grab_type(const char * name)
{
    if (true) {
        _nocheck__trace_vdagent_cb_grab_type(name);
    }
}

#define TRACE_VDAGENT_CB_SERIAL_DISCARD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VDAGENT_CB_SERIAL_DISCARD) || \
    false)

static inline void _nocheck__trace_vdagent_cb_serial_discard(uint32_t current, uint32_t received)
{
    if (trace_event_get_state(TRACE_VDAGENT_CB_SERIAL_DISCARD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 147 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:vdagent_cb_serial_discard " "current=%u, received=%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , current, received);
#line 4103 "trace/trace-ui.h"
        } else {
#line 147 "../ui/trace-events"
            qemu_log("vdagent_cb_serial_discard " "current=%u, received=%u" "\n", current, received);
#line 4107 "trace/trace-ui.h"
        }
    }
}

static inline void trace_vdagent_cb_serial_discard(uint32_t current, uint32_t received)
{
    if (true) {
        _nocheck__trace_vdagent_cb_serial_discard(current, received);
    }
}

#define TRACE_DBUS_REGISTERED_LISTENER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DBUS_REGISTERED_LISTENER) || \
    false)

static inline void _nocheck__trace_dbus_registered_listener(const char * bus_name)
{
    if (trace_event_get_state(TRACE_DBUS_REGISTERED_LISTENER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 150 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:dbus_registered_listener " "peer %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , bus_name);
#line 4134 "trace/trace-ui.h"
        } else {
#line 150 "../ui/trace-events"
            qemu_log("dbus_registered_listener " "peer %s" "\n", bus_name);
#line 4138 "trace/trace-ui.h"
        }
    }
}

static inline void trace_dbus_registered_listener(const char * bus_name)
{
    if (true) {
        _nocheck__trace_dbus_registered_listener(bus_name);
    }
}

#define TRACE_DBUS_LISTENER_VANISHED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DBUS_LISTENER_VANISHED) || \
    false)

static inline void _nocheck__trace_dbus_listener_vanished(const char * bus_name)
{
    if (trace_event_get_state(TRACE_DBUS_LISTENER_VANISHED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 151 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:dbus_listener_vanished " "peer %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , bus_name);
#line 4165 "trace/trace-ui.h"
        } else {
#line 151 "../ui/trace-events"
            qemu_log("dbus_listener_vanished " "peer %s" "\n", bus_name);
#line 4169 "trace/trace-ui.h"
        }
    }
}

static inline void trace_dbus_listener_vanished(const char * bus_name)
{
    if (true) {
        _nocheck__trace_dbus_listener_vanished(bus_name);
    }
}

#define TRACE_DBUS_KBD_PRESS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DBUS_KBD_PRESS) || \
    false)

static inline void _nocheck__trace_dbus_kbd_press(unsigned int keycode)
{
    if (trace_event_get_state(TRACE_DBUS_KBD_PRESS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 152 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:dbus_kbd_press " "keycode %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , keycode);
#line 4196 "trace/trace-ui.h"
        } else {
#line 152 "../ui/trace-events"
            qemu_log("dbus_kbd_press " "keycode %u" "\n", keycode);
#line 4200 "trace/trace-ui.h"
        }
    }
}

static inline void trace_dbus_kbd_press(unsigned int keycode)
{
    if (true) {
        _nocheck__trace_dbus_kbd_press(keycode);
    }
}

#define TRACE_DBUS_KBD_RELEASE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DBUS_KBD_RELEASE) || \
    false)

static inline void _nocheck__trace_dbus_kbd_release(unsigned int keycode)
{
    if (trace_event_get_state(TRACE_DBUS_KBD_RELEASE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 153 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:dbus_kbd_release " "keycode %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , keycode);
#line 4227 "trace/trace-ui.h"
        } else {
#line 153 "../ui/trace-events"
            qemu_log("dbus_kbd_release " "keycode %u" "\n", keycode);
#line 4231 "trace/trace-ui.h"
        }
    }
}

static inline void trace_dbus_kbd_release(unsigned int keycode)
{
    if (true) {
        _nocheck__trace_dbus_kbd_release(keycode);
    }
}

#define TRACE_DBUS_MOUSE_PRESS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DBUS_MOUSE_PRESS) || \
    false)

static inline void _nocheck__trace_dbus_mouse_press(unsigned int button)
{
    if (trace_event_get_state(TRACE_DBUS_MOUSE_PRESS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 154 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:dbus_mouse_press " "button %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , button);
#line 4258 "trace/trace-ui.h"
        } else {
#line 154 "../ui/trace-events"
            qemu_log("dbus_mouse_press " "button %u" "\n", button);
#line 4262 "trace/trace-ui.h"
        }
    }
}

static inline void trace_dbus_mouse_press(unsigned int button)
{
    if (true) {
        _nocheck__trace_dbus_mouse_press(button);
    }
}

#define TRACE_DBUS_MOUSE_RELEASE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DBUS_MOUSE_RELEASE) || \
    false)

static inline void _nocheck__trace_dbus_mouse_release(unsigned int button)
{
    if (trace_event_get_state(TRACE_DBUS_MOUSE_RELEASE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 155 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:dbus_mouse_release " "button %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , button);
#line 4289 "trace/trace-ui.h"
        } else {
#line 155 "../ui/trace-events"
            qemu_log("dbus_mouse_release " "button %u" "\n", button);
#line 4293 "trace/trace-ui.h"
        }
    }
}

static inline void trace_dbus_mouse_release(unsigned int button)
{
    if (true) {
        _nocheck__trace_dbus_mouse_release(button);
    }
}

#define TRACE_DBUS_MOUSE_SET_POS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DBUS_MOUSE_SET_POS) || \
    false)

static inline void _nocheck__trace_dbus_mouse_set_pos(unsigned int x, unsigned int y)
{
    if (trace_event_get_state(TRACE_DBUS_MOUSE_SET_POS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 156 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:dbus_mouse_set_pos " "x=%u, y=%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , x, y);
#line 4320 "trace/trace-ui.h"
        } else {
#line 156 "../ui/trace-events"
            qemu_log("dbus_mouse_set_pos " "x=%u, y=%u" "\n", x, y);
#line 4324 "trace/trace-ui.h"
        }
    }
}

static inline void trace_dbus_mouse_set_pos(unsigned int x, unsigned int y)
{
    if (true) {
        _nocheck__trace_dbus_mouse_set_pos(x, y);
    }
}

#define TRACE_DBUS_MOUSE_REL_MOTION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DBUS_MOUSE_REL_MOTION) || \
    false)

static inline void _nocheck__trace_dbus_mouse_rel_motion(int dx, int dy)
{
    if (trace_event_get_state(TRACE_DBUS_MOUSE_REL_MOTION) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 157 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:dbus_mouse_rel_motion " "dx=%d, dy=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dx, dy);
#line 4351 "trace/trace-ui.h"
        } else {
#line 157 "../ui/trace-events"
            qemu_log("dbus_mouse_rel_motion " "dx=%d, dy=%d" "\n", dx, dy);
#line 4355 "trace/trace-ui.h"
        }
    }
}

static inline void trace_dbus_mouse_rel_motion(int dx, int dy)
{
    if (true) {
        _nocheck__trace_dbus_mouse_rel_motion(dx, dy);
    }
}

#define TRACE_DBUS_TOUCH_SEND_EVENT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DBUS_TOUCH_SEND_EVENT) || \
    false)

static inline void _nocheck__trace_dbus_touch_send_event(unsigned int kind, uint32_t num_slot, uint32_t x, uint32_t y)
{
    if (trace_event_get_state(TRACE_DBUS_TOUCH_SEND_EVENT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 158 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:dbus_touch_send_event " "kind=%u, num_slot=%u, x=%d, y=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , kind, num_slot, x, y);
#line 4382 "trace/trace-ui.h"
        } else {
#line 158 "../ui/trace-events"
            qemu_log("dbus_touch_send_event " "kind=%u, num_slot=%u, x=%d, y=%d" "\n", kind, num_slot, x, y);
#line 4386 "trace/trace-ui.h"
        }
    }
}

static inline void trace_dbus_touch_send_event(unsigned int kind, uint32_t num_slot, uint32_t x, uint32_t y)
{
    if (true) {
        _nocheck__trace_dbus_touch_send_event(kind, num_slot, x, y);
    }
}

#define TRACE_DBUS_UPDATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DBUS_UPDATE) || \
    false)

static inline void _nocheck__trace_dbus_update(int x, int y, int w, int h)
{
    if (trace_event_get_state(TRACE_DBUS_UPDATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 159 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:dbus_update " "x=%d, y=%d, w=%d, h=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , x, y, w, h);
#line 4413 "trace/trace-ui.h"
        } else {
#line 159 "../ui/trace-events"
            qemu_log("dbus_update " "x=%d, y=%d, w=%d, h=%d" "\n", x, y, w, h);
#line 4417 "trace/trace-ui.h"
        }
    }
}

static inline void trace_dbus_update(int x, int y, int w, int h)
{
    if (true) {
        _nocheck__trace_dbus_update(x, y, w, h);
    }
}

#define TRACE_DBUS_UPDATE_GL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DBUS_UPDATE_GL) || \
    false)

static inline void _nocheck__trace_dbus_update_gl(int x, int y, int w, int h)
{
    if (trace_event_get_state(TRACE_DBUS_UPDATE_GL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 160 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:dbus_update_gl " "x=%d, y=%d, w=%d, h=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , x, y, w, h);
#line 4444 "trace/trace-ui.h"
        } else {
#line 160 "../ui/trace-events"
            qemu_log("dbus_update_gl " "x=%d, y=%d, w=%d, h=%d" "\n", x, y, w, h);
#line 4448 "trace/trace-ui.h"
        }
    }
}

static inline void trace_dbus_update_gl(int x, int y, int w, int h)
{
    if (true) {
        _nocheck__trace_dbus_update_gl(x, y, w, h);
    }
}

#define TRACE_DBUS_CLIPBOARD_GRAB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DBUS_CLIPBOARD_GRAB) || \
    false)

static inline void _nocheck__trace_dbus_clipboard_grab(int selection, unsigned int serial)
{
    if (trace_event_get_state(TRACE_DBUS_CLIPBOARD_GRAB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 161 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:dbus_clipboard_grab " "selection=%d serial=%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , selection, serial);
#line 4475 "trace/trace-ui.h"
        } else {
#line 161 "../ui/trace-events"
            qemu_log("dbus_clipboard_grab " "selection=%d serial=%u" "\n", selection, serial);
#line 4479 "trace/trace-ui.h"
        }
    }
}

static inline void trace_dbus_clipboard_grab(int selection, unsigned int serial)
{
    if (true) {
        _nocheck__trace_dbus_clipboard_grab(selection, serial);
    }
}

#define TRACE_DBUS_CLIPBOARD_GRAB_FAILED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DBUS_CLIPBOARD_GRAB_FAILED) || \
    false)

static inline void _nocheck__trace_dbus_clipboard_grab_failed(void)
{
    if (trace_event_get_state(TRACE_DBUS_CLIPBOARD_GRAB_FAILED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 162 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:dbus_clipboard_grab_failed " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 4506 "trace/trace-ui.h"
        } else {
#line 162 "../ui/trace-events"
            qemu_log("dbus_clipboard_grab_failed " "" "\n");
#line 4510 "trace/trace-ui.h"
        }
    }
}

static inline void trace_dbus_clipboard_grab_failed(void)
{
    if (true) {
        _nocheck__trace_dbus_clipboard_grab_failed();
    }
}

#define TRACE_DBUS_CLIPBOARD_QEMU_REQUEST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DBUS_CLIPBOARD_QEMU_REQUEST) || \
    false)

static inline void _nocheck__trace_dbus_clipboard_qemu_request(int type)
{
    if (trace_event_get_state(TRACE_DBUS_CLIPBOARD_QEMU_REQUEST) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 163 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:dbus_clipboard_qemu_request " "type=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , type);
#line 4537 "trace/trace-ui.h"
        } else {
#line 163 "../ui/trace-events"
            qemu_log("dbus_clipboard_qemu_request " "type=%d" "\n", type);
#line 4541 "trace/trace-ui.h"
        }
    }
}

static inline void trace_dbus_clipboard_qemu_request(int type)
{
    if (true) {
        _nocheck__trace_dbus_clipboard_qemu_request(type);
    }
}

#define TRACE_DBUS_CLIPBOARD_REGISTER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DBUS_CLIPBOARD_REGISTER) || \
    false)

static inline void _nocheck__trace_dbus_clipboard_register(const char * bus_name)
{
    if (trace_event_get_state(TRACE_DBUS_CLIPBOARD_REGISTER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 164 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:dbus_clipboard_register " "peer %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , bus_name);
#line 4568 "trace/trace-ui.h"
        } else {
#line 164 "../ui/trace-events"
            qemu_log("dbus_clipboard_register " "peer %s" "\n", bus_name);
#line 4572 "trace/trace-ui.h"
        }
    }
}

static inline void trace_dbus_clipboard_register(const char * bus_name)
{
    if (true) {
        _nocheck__trace_dbus_clipboard_register(bus_name);
    }
}

#define TRACE_DBUS_CLIPBOARD_UNREGISTER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DBUS_CLIPBOARD_UNREGISTER) || \
    false)

static inline void _nocheck__trace_dbus_clipboard_unregister(const char * bus_name)
{
    if (trace_event_get_state(TRACE_DBUS_CLIPBOARD_UNREGISTER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 165 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:dbus_clipboard_unregister " "peer %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , bus_name);
#line 4599 "trace/trace-ui.h"
        } else {
#line 165 "../ui/trace-events"
            qemu_log("dbus_clipboard_unregister " "peer %s" "\n", bus_name);
#line 4603 "trace/trace-ui.h"
        }
    }
}

static inline void trace_dbus_clipboard_unregister(const char * bus_name)
{
    if (true) {
        _nocheck__trace_dbus_clipboard_unregister(bus_name);
    }
}

#define TRACE_DBUS_SCANOUT_TEXTURE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DBUS_SCANOUT_TEXTURE) || \
    false)

static inline void _nocheck__trace_dbus_scanout_texture(uint32_t tex_id, bool backing_y_0_top, uint32_t backing_width, uint32_t backing_height, uint32_t x, uint32_t y, uint32_t w, uint32_t h)
{
    if (trace_event_get_state(TRACE_DBUS_SCANOUT_TEXTURE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 166 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:dbus_scanout_texture " "tex_id:%u y0top:%d back:%ux%u %u+%u-%ux%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tex_id, backing_y_0_top, backing_width, backing_height, x, y, w, h);
#line 4630 "trace/trace-ui.h"
        } else {
#line 166 "../ui/trace-events"
            qemu_log("dbus_scanout_texture " "tex_id:%u y0top:%d back:%ux%u %u+%u-%ux%u" "\n", tex_id, backing_y_0_top, backing_width, backing_height, x, y, w, h);
#line 4634 "trace/trace-ui.h"
        }
    }
}

static inline void trace_dbus_scanout_texture(uint32_t tex_id, bool backing_y_0_top, uint32_t backing_width, uint32_t backing_height, uint32_t x, uint32_t y, uint32_t w, uint32_t h)
{
    if (true) {
        _nocheck__trace_dbus_scanout_texture(tex_id, backing_y_0_top, backing_width, backing_height, x, y, w, h);
    }
}

#define TRACE_DBUS_GL_GFX_SWITCH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DBUS_GL_GFX_SWITCH) || \
    false)

static inline void _nocheck__trace_dbus_gl_gfx_switch(void * p)
{
    if (trace_event_get_state(TRACE_DBUS_GL_GFX_SWITCH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 167 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:dbus_gl_gfx_switch " "surf: %p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , p);
#line 4661 "trace/trace-ui.h"
        } else {
#line 167 "../ui/trace-events"
            qemu_log("dbus_gl_gfx_switch " "surf: %p" "\n", p);
#line 4665 "trace/trace-ui.h"
        }
    }
}

static inline void trace_dbus_gl_gfx_switch(void * p)
{
    if (true) {
        _nocheck__trace_dbus_gl_gfx_switch(p);
    }
}

#define TRACE_DBUS_FILTER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DBUS_FILTER) || \
    false)

static inline void _nocheck__trace_dbus_filter(unsigned int serial, unsigned int filter)
{
    if (trace_event_get_state(TRACE_DBUS_FILTER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 168 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:dbus_filter " "serial=%u (<= %u)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , serial, filter);
#line 4692 "trace/trace-ui.h"
        } else {
#line 168 "../ui/trace-events"
            qemu_log("dbus_filter " "serial=%u (<= %u)" "\n", serial, filter);
#line 4696 "trace/trace-ui.h"
        }
    }
}

static inline void trace_dbus_filter(unsigned int serial, unsigned int filter)
{
    if (true) {
        _nocheck__trace_dbus_filter(serial, filter);
    }
}

#define TRACE_EGL_INIT_D3D11_DEVICE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_EGL_INIT_D3D11_DEVICE) || \
    false)

static inline void _nocheck__trace_egl_init_d3d11_device(void * p)
{
    if (trace_event_get_state(TRACE_EGL_INIT_D3D11_DEVICE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 171 "../ui/trace-events"
            qemu_log("%d@%zu.%06zu:egl_init_d3d11_device " "d3d device: %p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , p);
#line 4723 "trace/trace-ui.h"
        } else {
#line 171 "../ui/trace-events"
            qemu_log("egl_init_d3d11_device " "d3d device: %p" "\n", p);
#line 4727 "trace/trace-ui.h"
        }
    }
}

static inline void trace_egl_init_d3d11_device(void * p)
{
    if (true) {
        _nocheck__trace_egl_init_d3d11_device(p);
    }
}
#endif /* TRACE_UI_GENERATED_TRACERS_H */
