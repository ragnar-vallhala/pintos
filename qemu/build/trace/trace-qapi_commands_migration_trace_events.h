/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_QAPI_COMMANDS_MIGRATION_TRACE_EVENTS_GENERATED_TRACERS_H
#define TRACE_QAPI_COMMANDS_MIGRATION_TRACE_EVENTS_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_QMP_ENTER_QUERY_MIGRATE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_MIGRATE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_MIGRATE_SET_CAPABILITIES_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_MIGRATE_SET_CAPABILITIES_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_MIGRATE_CAPABILITIES_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_MIGRATE_CAPABILITIES_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_MIGRATE_SET_PARAMETERS_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_MIGRATE_SET_PARAMETERS_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_MIGRATE_PARAMETERS_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_MIGRATE_PARAMETERS_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_MIGRATE_START_POSTCOPY_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_MIGRATE_START_POSTCOPY_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_X_COLO_LOST_HEARTBEAT_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_X_COLO_LOST_HEARTBEAT_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_MIGRATE_CANCEL_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_MIGRATE_CANCEL_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_MIGRATE_CONTINUE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_MIGRATE_CONTINUE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_MIGRATE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_MIGRATE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_MIGRATE_INCOMING_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_MIGRATE_INCOMING_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_XEN_SAVE_DEVICES_STATE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_XEN_SAVE_DEVICES_STATE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_XEN_SET_GLOBAL_DIRTY_LOG_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_XEN_SET_GLOBAL_DIRTY_LOG_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_XEN_LOAD_DEVICES_STATE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_XEN_LOAD_DEVICES_STATE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_XEN_SET_REPLICATION_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_XEN_SET_REPLICATION_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_XEN_REPLICATION_STATUS_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_XEN_REPLICATION_STATUS_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_XEN_COLO_DO_CHECKPOINT_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_XEN_COLO_DO_CHECKPOINT_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_COLO_STATUS_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_COLO_STATUS_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_MIGRATE_RECOVER_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_MIGRATE_RECOVER_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_MIGRATE_PAUSE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_MIGRATE_PAUSE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_CALC_DIRTY_RATE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_CALC_DIRTY_RATE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_DIRTY_RATE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_DIRTY_RATE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_SET_VCPU_DIRTY_LIMIT_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_SET_VCPU_DIRTY_LIMIT_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_CANCEL_VCPU_DIRTY_LIMIT_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_CANCEL_VCPU_DIRTY_LIMIT_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_VCPU_DIRTY_LIMIT_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_VCPU_DIRTY_LIMIT_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_MIGRATIONTHREADS_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_MIGRATIONTHREADS_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_SNAPSHOT_SAVE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_SNAPSHOT_SAVE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_SNAPSHOT_LOAD_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_SNAPSHOT_LOAD_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_SNAPSHOT_DELETE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_SNAPSHOT_DELETE_EVENT;
extern uint16_t _TRACE_QMP_ENTER_QUERY_MIGRATE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_MIGRATE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_MIGRATE_SET_CAPABILITIES_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_MIGRATE_SET_CAPABILITIES_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_MIGRATE_CAPABILITIES_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_MIGRATE_CAPABILITIES_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_MIGRATE_SET_PARAMETERS_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_MIGRATE_SET_PARAMETERS_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_MIGRATE_PARAMETERS_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_MIGRATE_PARAMETERS_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_MIGRATE_START_POSTCOPY_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_MIGRATE_START_POSTCOPY_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_X_COLO_LOST_HEARTBEAT_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_X_COLO_LOST_HEARTBEAT_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_MIGRATE_CANCEL_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_MIGRATE_CANCEL_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_MIGRATE_CONTINUE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_MIGRATE_CONTINUE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_MIGRATE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_MIGRATE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_MIGRATE_INCOMING_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_MIGRATE_INCOMING_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_XEN_SAVE_DEVICES_STATE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_XEN_SAVE_DEVICES_STATE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_XEN_SET_GLOBAL_DIRTY_LOG_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_XEN_SET_GLOBAL_DIRTY_LOG_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_XEN_LOAD_DEVICES_STATE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_XEN_LOAD_DEVICES_STATE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_XEN_SET_REPLICATION_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_XEN_SET_REPLICATION_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_XEN_REPLICATION_STATUS_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_XEN_REPLICATION_STATUS_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_XEN_COLO_DO_CHECKPOINT_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_XEN_COLO_DO_CHECKPOINT_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_COLO_STATUS_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_COLO_STATUS_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_MIGRATE_RECOVER_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_MIGRATE_RECOVER_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_MIGRATE_PAUSE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_MIGRATE_PAUSE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_CALC_DIRTY_RATE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_CALC_DIRTY_RATE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_DIRTY_RATE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_DIRTY_RATE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_SET_VCPU_DIRTY_LIMIT_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_SET_VCPU_DIRTY_LIMIT_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_CANCEL_VCPU_DIRTY_LIMIT_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_CANCEL_VCPU_DIRTY_LIMIT_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_VCPU_DIRTY_LIMIT_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_VCPU_DIRTY_LIMIT_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_MIGRATIONTHREADS_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_MIGRATIONTHREADS_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_SNAPSHOT_SAVE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_SNAPSHOT_SAVE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_SNAPSHOT_LOAD_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_SNAPSHOT_LOAD_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_SNAPSHOT_DELETE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_SNAPSHOT_DELETE_DSTATE;
#define TRACE_QMP_ENTER_QUERY_MIGRATE_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_MIGRATE_ENABLED 1
#define TRACE_QMP_ENTER_MIGRATE_SET_CAPABILITIES_ENABLED 1
#define TRACE_QMP_EXIT_MIGRATE_SET_CAPABILITIES_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_MIGRATE_CAPABILITIES_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_MIGRATE_CAPABILITIES_ENABLED 1
#define TRACE_QMP_ENTER_MIGRATE_SET_PARAMETERS_ENABLED 1
#define TRACE_QMP_EXIT_MIGRATE_SET_PARAMETERS_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_MIGRATE_PARAMETERS_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_MIGRATE_PARAMETERS_ENABLED 1
#define TRACE_QMP_ENTER_MIGRATE_START_POSTCOPY_ENABLED 1
#define TRACE_QMP_EXIT_MIGRATE_START_POSTCOPY_ENABLED 1
#define TRACE_QMP_ENTER_X_COLO_LOST_HEARTBEAT_ENABLED 1
#define TRACE_QMP_EXIT_X_COLO_LOST_HEARTBEAT_ENABLED 1
#define TRACE_QMP_ENTER_MIGRATE_CANCEL_ENABLED 1
#define TRACE_QMP_EXIT_MIGRATE_CANCEL_ENABLED 1
#define TRACE_QMP_ENTER_MIGRATE_CONTINUE_ENABLED 1
#define TRACE_QMP_EXIT_MIGRATE_CONTINUE_ENABLED 1
#define TRACE_QMP_ENTER_MIGRATE_ENABLED 1
#define TRACE_QMP_EXIT_MIGRATE_ENABLED 1
#define TRACE_QMP_ENTER_MIGRATE_INCOMING_ENABLED 1
#define TRACE_QMP_EXIT_MIGRATE_INCOMING_ENABLED 1
#define TRACE_QMP_ENTER_XEN_SAVE_DEVICES_STATE_ENABLED 1
#define TRACE_QMP_EXIT_XEN_SAVE_DEVICES_STATE_ENABLED 1
#define TRACE_QMP_ENTER_XEN_SET_GLOBAL_DIRTY_LOG_ENABLED 1
#define TRACE_QMP_EXIT_XEN_SET_GLOBAL_DIRTY_LOG_ENABLED 1
#define TRACE_QMP_ENTER_XEN_LOAD_DEVICES_STATE_ENABLED 1
#define TRACE_QMP_EXIT_XEN_LOAD_DEVICES_STATE_ENABLED 1
#define TRACE_QMP_ENTER_XEN_SET_REPLICATION_ENABLED 1
#define TRACE_QMP_EXIT_XEN_SET_REPLICATION_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_XEN_REPLICATION_STATUS_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_XEN_REPLICATION_STATUS_ENABLED 1
#define TRACE_QMP_ENTER_XEN_COLO_DO_CHECKPOINT_ENABLED 1
#define TRACE_QMP_EXIT_XEN_COLO_DO_CHECKPOINT_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_COLO_STATUS_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_COLO_STATUS_ENABLED 1
#define TRACE_QMP_ENTER_MIGRATE_RECOVER_ENABLED 1
#define TRACE_QMP_EXIT_MIGRATE_RECOVER_ENABLED 1
#define TRACE_QMP_ENTER_MIGRATE_PAUSE_ENABLED 1
#define TRACE_QMP_EXIT_MIGRATE_PAUSE_ENABLED 1
#define TRACE_QMP_ENTER_CALC_DIRTY_RATE_ENABLED 1
#define TRACE_QMP_EXIT_CALC_DIRTY_RATE_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_DIRTY_RATE_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_DIRTY_RATE_ENABLED 1
#define TRACE_QMP_ENTER_SET_VCPU_DIRTY_LIMIT_ENABLED 1
#define TRACE_QMP_EXIT_SET_VCPU_DIRTY_LIMIT_ENABLED 1
#define TRACE_QMP_ENTER_CANCEL_VCPU_DIRTY_LIMIT_ENABLED 1
#define TRACE_QMP_EXIT_CANCEL_VCPU_DIRTY_LIMIT_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_VCPU_DIRTY_LIMIT_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_VCPU_DIRTY_LIMIT_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_MIGRATIONTHREADS_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_MIGRATIONTHREADS_ENABLED 1
#define TRACE_QMP_ENTER_SNAPSHOT_SAVE_ENABLED 1
#define TRACE_QMP_EXIT_SNAPSHOT_SAVE_ENABLED 1
#define TRACE_QMP_ENTER_SNAPSHOT_LOAD_ENABLED 1
#define TRACE_QMP_EXIT_SNAPSHOT_LOAD_ENABLED 1
#define TRACE_QMP_ENTER_SNAPSHOT_DELETE_ENABLED 1
#define TRACE_QMP_EXIT_SNAPSHOT_DELETE_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_QMP_ENTER_QUERY_MIGRATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_MIGRATE) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_migrate(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_MIGRATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 3 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_migrate " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 202 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 3 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_query_migrate " "%s" "\n", json);
#line 206 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_migrate(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_migrate(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_MIGRATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_MIGRATE) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_migrate(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_MIGRATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_migrate " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 233 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 4 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_query_migrate " "%s %d" "\n", result, succeeded);
#line 237 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_migrate(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_migrate(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_MIGRATE_SET_CAPABILITIES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_MIGRATE_SET_CAPABILITIES) || \
    false)

static inline void _nocheck__trace_qmp_enter_migrate_set_capabilities(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_MIGRATE_SET_CAPABILITIES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_migrate_set_capabilities " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 264 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 5 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_migrate_set_capabilities " "%s" "\n", json);
#line 268 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_migrate_set_capabilities(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_migrate_set_capabilities(json);
    }
}

#define TRACE_QMP_EXIT_MIGRATE_SET_CAPABILITIES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_MIGRATE_SET_CAPABILITIES) || \
    false)

static inline void _nocheck__trace_qmp_exit_migrate_set_capabilities(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_MIGRATE_SET_CAPABILITIES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_migrate_set_capabilities " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 295 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 6 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_migrate_set_capabilities " "%s %d" "\n", result, succeeded);
#line 299 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_migrate_set_capabilities(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_migrate_set_capabilities(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_MIGRATE_CAPABILITIES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_MIGRATE_CAPABILITIES) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_migrate_capabilities(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_MIGRATE_CAPABILITIES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_migrate_capabilities " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 326 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 7 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_query_migrate_capabilities " "%s" "\n", json);
#line 330 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_migrate_capabilities(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_migrate_capabilities(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_MIGRATE_CAPABILITIES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_MIGRATE_CAPABILITIES) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_migrate_capabilities(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_MIGRATE_CAPABILITIES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_migrate_capabilities " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 357 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 8 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_query_migrate_capabilities " "%s %d" "\n", result, succeeded);
#line 361 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_migrate_capabilities(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_migrate_capabilities(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_MIGRATE_SET_PARAMETERS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_MIGRATE_SET_PARAMETERS) || \
    false)

static inline void _nocheck__trace_qmp_enter_migrate_set_parameters(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_MIGRATE_SET_PARAMETERS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_migrate_set_parameters " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 388 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 9 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_migrate_set_parameters " "%s" "\n", json);
#line 392 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_migrate_set_parameters(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_migrate_set_parameters(json);
    }
}

#define TRACE_QMP_EXIT_MIGRATE_SET_PARAMETERS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_MIGRATE_SET_PARAMETERS) || \
    false)

static inline void _nocheck__trace_qmp_exit_migrate_set_parameters(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_MIGRATE_SET_PARAMETERS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_migrate_set_parameters " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 419 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 10 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_migrate_set_parameters " "%s %d" "\n", result, succeeded);
#line 423 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_migrate_set_parameters(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_migrate_set_parameters(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_MIGRATE_PARAMETERS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_MIGRATE_PARAMETERS) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_migrate_parameters(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_MIGRATE_PARAMETERS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_migrate_parameters " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 450 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 11 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_query_migrate_parameters " "%s" "\n", json);
#line 454 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_migrate_parameters(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_migrate_parameters(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_MIGRATE_PARAMETERS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_MIGRATE_PARAMETERS) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_migrate_parameters(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_MIGRATE_PARAMETERS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_migrate_parameters " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 481 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 12 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_query_migrate_parameters " "%s %d" "\n", result, succeeded);
#line 485 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_migrate_parameters(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_migrate_parameters(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_MIGRATE_START_POSTCOPY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_MIGRATE_START_POSTCOPY) || \
    false)

static inline void _nocheck__trace_qmp_enter_migrate_start_postcopy(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_MIGRATE_START_POSTCOPY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_migrate_start_postcopy " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 512 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 13 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_migrate_start_postcopy " "%s" "\n", json);
#line 516 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_migrate_start_postcopy(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_migrate_start_postcopy(json);
    }
}

#define TRACE_QMP_EXIT_MIGRATE_START_POSTCOPY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_MIGRATE_START_POSTCOPY) || \
    false)

static inline void _nocheck__trace_qmp_exit_migrate_start_postcopy(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_MIGRATE_START_POSTCOPY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 14 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_migrate_start_postcopy " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 543 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 14 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_migrate_start_postcopy " "%s %d" "\n", result, succeeded);
#line 547 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_migrate_start_postcopy(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_migrate_start_postcopy(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_X_COLO_LOST_HEARTBEAT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_X_COLO_LOST_HEARTBEAT) || \
    false)

static inline void _nocheck__trace_qmp_enter_x_colo_lost_heartbeat(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_X_COLO_LOST_HEARTBEAT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 15 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_x_colo_lost_heartbeat " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 574 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 15 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_x_colo_lost_heartbeat " "%s" "\n", json);
#line 578 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_x_colo_lost_heartbeat(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_x_colo_lost_heartbeat(json);
    }
}

#define TRACE_QMP_EXIT_X_COLO_LOST_HEARTBEAT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_X_COLO_LOST_HEARTBEAT) || \
    false)

static inline void _nocheck__trace_qmp_exit_x_colo_lost_heartbeat(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_X_COLO_LOST_HEARTBEAT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_x_colo_lost_heartbeat " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 605 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 16 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_x_colo_lost_heartbeat " "%s %d" "\n", result, succeeded);
#line 609 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_x_colo_lost_heartbeat(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_x_colo_lost_heartbeat(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_MIGRATE_CANCEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_MIGRATE_CANCEL) || \
    false)

static inline void _nocheck__trace_qmp_enter_migrate_cancel(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_MIGRATE_CANCEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 17 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_migrate_cancel " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 636 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 17 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_migrate_cancel " "%s" "\n", json);
#line 640 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_migrate_cancel(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_migrate_cancel(json);
    }
}

#define TRACE_QMP_EXIT_MIGRATE_CANCEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_MIGRATE_CANCEL) || \
    false)

static inline void _nocheck__trace_qmp_exit_migrate_cancel(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_MIGRATE_CANCEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 18 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_migrate_cancel " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 667 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 18 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_migrate_cancel " "%s %d" "\n", result, succeeded);
#line 671 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_migrate_cancel(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_migrate_cancel(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_MIGRATE_CONTINUE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_MIGRATE_CONTINUE) || \
    false)

static inline void _nocheck__trace_qmp_enter_migrate_continue(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_MIGRATE_CONTINUE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 19 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_migrate_continue " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 698 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 19 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_migrate_continue " "%s" "\n", json);
#line 702 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_migrate_continue(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_migrate_continue(json);
    }
}

#define TRACE_QMP_EXIT_MIGRATE_CONTINUE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_MIGRATE_CONTINUE) || \
    false)

static inline void _nocheck__trace_qmp_exit_migrate_continue(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_MIGRATE_CONTINUE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 20 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_migrate_continue " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 729 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 20 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_migrate_continue " "%s %d" "\n", result, succeeded);
#line 733 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_migrate_continue(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_migrate_continue(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_MIGRATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_MIGRATE) || \
    false)

static inline void _nocheck__trace_qmp_enter_migrate(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_MIGRATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 21 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_migrate " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 760 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 21 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_migrate " "%s" "\n", json);
#line 764 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_migrate(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_migrate(json);
    }
}

#define TRACE_QMP_EXIT_MIGRATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_MIGRATE) || \
    false)

static inline void _nocheck__trace_qmp_exit_migrate(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_MIGRATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 22 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_migrate " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 791 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 22 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_migrate " "%s %d" "\n", result, succeeded);
#line 795 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_migrate(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_migrate(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_MIGRATE_INCOMING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_MIGRATE_INCOMING) || \
    false)

static inline void _nocheck__trace_qmp_enter_migrate_incoming(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_MIGRATE_INCOMING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 23 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_migrate_incoming " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 822 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 23 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_migrate_incoming " "%s" "\n", json);
#line 826 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_migrate_incoming(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_migrate_incoming(json);
    }
}

#define TRACE_QMP_EXIT_MIGRATE_INCOMING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_MIGRATE_INCOMING) || \
    false)

static inline void _nocheck__trace_qmp_exit_migrate_incoming(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_MIGRATE_INCOMING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 24 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_migrate_incoming " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 853 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 24 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_migrate_incoming " "%s %d" "\n", result, succeeded);
#line 857 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_migrate_incoming(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_migrate_incoming(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_XEN_SAVE_DEVICES_STATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_XEN_SAVE_DEVICES_STATE) || \
    false)

static inline void _nocheck__trace_qmp_enter_xen_save_devices_state(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_XEN_SAVE_DEVICES_STATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 25 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_xen_save_devices_state " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 884 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 25 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_xen_save_devices_state " "%s" "\n", json);
#line 888 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_xen_save_devices_state(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_xen_save_devices_state(json);
    }
}

#define TRACE_QMP_EXIT_XEN_SAVE_DEVICES_STATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_XEN_SAVE_DEVICES_STATE) || \
    false)

static inline void _nocheck__trace_qmp_exit_xen_save_devices_state(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_XEN_SAVE_DEVICES_STATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 26 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_xen_save_devices_state " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 915 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 26 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_xen_save_devices_state " "%s %d" "\n", result, succeeded);
#line 919 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_xen_save_devices_state(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_xen_save_devices_state(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_XEN_SET_GLOBAL_DIRTY_LOG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_XEN_SET_GLOBAL_DIRTY_LOG) || \
    false)

static inline void _nocheck__trace_qmp_enter_xen_set_global_dirty_log(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_XEN_SET_GLOBAL_DIRTY_LOG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 27 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_xen_set_global_dirty_log " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 946 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 27 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_xen_set_global_dirty_log " "%s" "\n", json);
#line 950 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_xen_set_global_dirty_log(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_xen_set_global_dirty_log(json);
    }
}

#define TRACE_QMP_EXIT_XEN_SET_GLOBAL_DIRTY_LOG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_XEN_SET_GLOBAL_DIRTY_LOG) || \
    false)

static inline void _nocheck__trace_qmp_exit_xen_set_global_dirty_log(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_XEN_SET_GLOBAL_DIRTY_LOG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 28 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_xen_set_global_dirty_log " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 977 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 28 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_xen_set_global_dirty_log " "%s %d" "\n", result, succeeded);
#line 981 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_xen_set_global_dirty_log(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_xen_set_global_dirty_log(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_XEN_LOAD_DEVICES_STATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_XEN_LOAD_DEVICES_STATE) || \
    false)

static inline void _nocheck__trace_qmp_enter_xen_load_devices_state(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_XEN_LOAD_DEVICES_STATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 29 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_xen_load_devices_state " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1008 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 29 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_xen_load_devices_state " "%s" "\n", json);
#line 1012 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_xen_load_devices_state(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_xen_load_devices_state(json);
    }
}

#define TRACE_QMP_EXIT_XEN_LOAD_DEVICES_STATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_XEN_LOAD_DEVICES_STATE) || \
    false)

static inline void _nocheck__trace_qmp_exit_xen_load_devices_state(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_XEN_LOAD_DEVICES_STATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 30 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_xen_load_devices_state " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1039 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 30 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_xen_load_devices_state " "%s %d" "\n", result, succeeded);
#line 1043 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_xen_load_devices_state(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_xen_load_devices_state(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_XEN_SET_REPLICATION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_XEN_SET_REPLICATION) || \
    false)

static inline void _nocheck__trace_qmp_enter_xen_set_replication(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_XEN_SET_REPLICATION) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 31 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_xen_set_replication " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1070 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 31 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_xen_set_replication " "%s" "\n", json);
#line 1074 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_xen_set_replication(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_xen_set_replication(json);
    }
}

#define TRACE_QMP_EXIT_XEN_SET_REPLICATION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_XEN_SET_REPLICATION) || \
    false)

static inline void _nocheck__trace_qmp_exit_xen_set_replication(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_XEN_SET_REPLICATION) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 32 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_xen_set_replication " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1101 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 32 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_xen_set_replication " "%s %d" "\n", result, succeeded);
#line 1105 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_xen_set_replication(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_xen_set_replication(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_XEN_REPLICATION_STATUS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_XEN_REPLICATION_STATUS) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_xen_replication_status(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_XEN_REPLICATION_STATUS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 33 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_xen_replication_status " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1132 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 33 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_query_xen_replication_status " "%s" "\n", json);
#line 1136 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_xen_replication_status(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_xen_replication_status(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_XEN_REPLICATION_STATUS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_XEN_REPLICATION_STATUS) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_xen_replication_status(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_XEN_REPLICATION_STATUS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 34 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_xen_replication_status " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1163 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 34 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_query_xen_replication_status " "%s %d" "\n", result, succeeded);
#line 1167 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_xen_replication_status(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_xen_replication_status(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_XEN_COLO_DO_CHECKPOINT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_XEN_COLO_DO_CHECKPOINT) || \
    false)

static inline void _nocheck__trace_qmp_enter_xen_colo_do_checkpoint(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_XEN_COLO_DO_CHECKPOINT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 35 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_xen_colo_do_checkpoint " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1194 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 35 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_xen_colo_do_checkpoint " "%s" "\n", json);
#line 1198 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_xen_colo_do_checkpoint(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_xen_colo_do_checkpoint(json);
    }
}

#define TRACE_QMP_EXIT_XEN_COLO_DO_CHECKPOINT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_XEN_COLO_DO_CHECKPOINT) || \
    false)

static inline void _nocheck__trace_qmp_exit_xen_colo_do_checkpoint(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_XEN_COLO_DO_CHECKPOINT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 36 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_xen_colo_do_checkpoint " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1225 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 36 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_xen_colo_do_checkpoint " "%s %d" "\n", result, succeeded);
#line 1229 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_xen_colo_do_checkpoint(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_xen_colo_do_checkpoint(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_COLO_STATUS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_COLO_STATUS) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_colo_status(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_COLO_STATUS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 37 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_colo_status " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1256 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 37 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_query_colo_status " "%s" "\n", json);
#line 1260 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_colo_status(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_colo_status(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_COLO_STATUS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_COLO_STATUS) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_colo_status(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_COLO_STATUS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 38 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_colo_status " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1287 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 38 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_query_colo_status " "%s %d" "\n", result, succeeded);
#line 1291 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_colo_status(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_colo_status(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_MIGRATE_RECOVER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_MIGRATE_RECOVER) || \
    false)

static inline void _nocheck__trace_qmp_enter_migrate_recover(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_MIGRATE_RECOVER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 39 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_migrate_recover " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1318 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 39 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_migrate_recover " "%s" "\n", json);
#line 1322 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_migrate_recover(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_migrate_recover(json);
    }
}

#define TRACE_QMP_EXIT_MIGRATE_RECOVER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_MIGRATE_RECOVER) || \
    false)

static inline void _nocheck__trace_qmp_exit_migrate_recover(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_MIGRATE_RECOVER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 40 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_migrate_recover " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1349 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 40 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_migrate_recover " "%s %d" "\n", result, succeeded);
#line 1353 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_migrate_recover(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_migrate_recover(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_MIGRATE_PAUSE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_MIGRATE_PAUSE) || \
    false)

static inline void _nocheck__trace_qmp_enter_migrate_pause(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_MIGRATE_PAUSE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 41 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_migrate_pause " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1380 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 41 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_migrate_pause " "%s" "\n", json);
#line 1384 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_migrate_pause(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_migrate_pause(json);
    }
}

#define TRACE_QMP_EXIT_MIGRATE_PAUSE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_MIGRATE_PAUSE) || \
    false)

static inline void _nocheck__trace_qmp_exit_migrate_pause(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_MIGRATE_PAUSE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 42 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_migrate_pause " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1411 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 42 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_migrate_pause " "%s %d" "\n", result, succeeded);
#line 1415 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_migrate_pause(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_migrate_pause(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_CALC_DIRTY_RATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_CALC_DIRTY_RATE) || \
    false)

static inline void _nocheck__trace_qmp_enter_calc_dirty_rate(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_CALC_DIRTY_RATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 43 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_calc_dirty_rate " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1442 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 43 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_calc_dirty_rate " "%s" "\n", json);
#line 1446 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_calc_dirty_rate(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_calc_dirty_rate(json);
    }
}

#define TRACE_QMP_EXIT_CALC_DIRTY_RATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_CALC_DIRTY_RATE) || \
    false)

static inline void _nocheck__trace_qmp_exit_calc_dirty_rate(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_CALC_DIRTY_RATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 44 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_calc_dirty_rate " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1473 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 44 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_calc_dirty_rate " "%s %d" "\n", result, succeeded);
#line 1477 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_calc_dirty_rate(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_calc_dirty_rate(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_DIRTY_RATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_DIRTY_RATE) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_dirty_rate(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_DIRTY_RATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 45 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_dirty_rate " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1504 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 45 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_query_dirty_rate " "%s" "\n", json);
#line 1508 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_dirty_rate(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_dirty_rate(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_DIRTY_RATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_DIRTY_RATE) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_dirty_rate(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_DIRTY_RATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 46 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_dirty_rate " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1535 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 46 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_query_dirty_rate " "%s %d" "\n", result, succeeded);
#line 1539 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_dirty_rate(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_dirty_rate(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_SET_VCPU_DIRTY_LIMIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_SET_VCPU_DIRTY_LIMIT) || \
    false)

static inline void _nocheck__trace_qmp_enter_set_vcpu_dirty_limit(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_SET_VCPU_DIRTY_LIMIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 47 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_set_vcpu_dirty_limit " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1566 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 47 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_set_vcpu_dirty_limit " "%s" "\n", json);
#line 1570 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_set_vcpu_dirty_limit(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_set_vcpu_dirty_limit(json);
    }
}

#define TRACE_QMP_EXIT_SET_VCPU_DIRTY_LIMIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_SET_VCPU_DIRTY_LIMIT) || \
    false)

static inline void _nocheck__trace_qmp_exit_set_vcpu_dirty_limit(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_SET_VCPU_DIRTY_LIMIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 48 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_set_vcpu_dirty_limit " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1597 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 48 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_set_vcpu_dirty_limit " "%s %d" "\n", result, succeeded);
#line 1601 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_set_vcpu_dirty_limit(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_set_vcpu_dirty_limit(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_CANCEL_VCPU_DIRTY_LIMIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_CANCEL_VCPU_DIRTY_LIMIT) || \
    false)

static inline void _nocheck__trace_qmp_enter_cancel_vcpu_dirty_limit(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_CANCEL_VCPU_DIRTY_LIMIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 49 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_cancel_vcpu_dirty_limit " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1628 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 49 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_cancel_vcpu_dirty_limit " "%s" "\n", json);
#line 1632 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_cancel_vcpu_dirty_limit(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_cancel_vcpu_dirty_limit(json);
    }
}

#define TRACE_QMP_EXIT_CANCEL_VCPU_DIRTY_LIMIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_CANCEL_VCPU_DIRTY_LIMIT) || \
    false)

static inline void _nocheck__trace_qmp_exit_cancel_vcpu_dirty_limit(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_CANCEL_VCPU_DIRTY_LIMIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 50 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_cancel_vcpu_dirty_limit " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1659 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 50 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_cancel_vcpu_dirty_limit " "%s %d" "\n", result, succeeded);
#line 1663 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_cancel_vcpu_dirty_limit(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_cancel_vcpu_dirty_limit(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_VCPU_DIRTY_LIMIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_VCPU_DIRTY_LIMIT) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_vcpu_dirty_limit(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_VCPU_DIRTY_LIMIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 51 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_vcpu_dirty_limit " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1690 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 51 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_query_vcpu_dirty_limit " "%s" "\n", json);
#line 1694 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_vcpu_dirty_limit(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_vcpu_dirty_limit(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_VCPU_DIRTY_LIMIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_VCPU_DIRTY_LIMIT) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_vcpu_dirty_limit(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_VCPU_DIRTY_LIMIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 52 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_vcpu_dirty_limit " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1721 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 52 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_query_vcpu_dirty_limit " "%s %d" "\n", result, succeeded);
#line 1725 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_vcpu_dirty_limit(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_vcpu_dirty_limit(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_MIGRATIONTHREADS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_MIGRATIONTHREADS) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_migrationthreads(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_MIGRATIONTHREADS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 53 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_migrationthreads " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1752 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 53 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_query_migrationthreads " "%s" "\n", json);
#line 1756 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_migrationthreads(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_migrationthreads(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_MIGRATIONTHREADS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_MIGRATIONTHREADS) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_migrationthreads(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_MIGRATIONTHREADS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 54 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_migrationthreads " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1783 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 54 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_query_migrationthreads " "%s %d" "\n", result, succeeded);
#line 1787 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_migrationthreads(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_migrationthreads(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_SNAPSHOT_SAVE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_SNAPSHOT_SAVE) || \
    false)

static inline void _nocheck__trace_qmp_enter_snapshot_save(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_SNAPSHOT_SAVE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 55 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_snapshot_save " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1814 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 55 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_snapshot_save " "%s" "\n", json);
#line 1818 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_snapshot_save(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_snapshot_save(json);
    }
}

#define TRACE_QMP_EXIT_SNAPSHOT_SAVE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_SNAPSHOT_SAVE) || \
    false)

static inline void _nocheck__trace_qmp_exit_snapshot_save(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_SNAPSHOT_SAVE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 56 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_snapshot_save " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1845 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 56 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_snapshot_save " "%s %d" "\n", result, succeeded);
#line 1849 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_snapshot_save(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_snapshot_save(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_SNAPSHOT_LOAD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_SNAPSHOT_LOAD) || \
    false)

static inline void _nocheck__trace_qmp_enter_snapshot_load(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_SNAPSHOT_LOAD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 57 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_snapshot_load " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1876 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 57 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_snapshot_load " "%s" "\n", json);
#line 1880 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_snapshot_load(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_snapshot_load(json);
    }
}

#define TRACE_QMP_EXIT_SNAPSHOT_LOAD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_SNAPSHOT_LOAD) || \
    false)

static inline void _nocheck__trace_qmp_exit_snapshot_load(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_SNAPSHOT_LOAD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 58 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_snapshot_load " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1907 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 58 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_snapshot_load " "%s %d" "\n", result, succeeded);
#line 1911 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_snapshot_load(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_snapshot_load(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_SNAPSHOT_DELETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_SNAPSHOT_DELETE) || \
    false)

static inline void _nocheck__trace_qmp_enter_snapshot_delete(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_SNAPSHOT_DELETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 59 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_snapshot_delete " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1938 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 59 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_enter_snapshot_delete " "%s" "\n", json);
#line 1942 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_snapshot_delete(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_snapshot_delete(json);
    }
}

#define TRACE_QMP_EXIT_SNAPSHOT_DELETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_SNAPSHOT_DELETE) || \
    false)

static inline void _nocheck__trace_qmp_exit_snapshot_delete(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_SNAPSHOT_DELETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 60 "qapi/qapi-commands-migration.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_snapshot_delete " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1969 "trace/trace-qapi_commands_migration_trace_events.h"
        } else {
#line 60 "qapi/qapi-commands-migration.trace-events"
            qemu_log("qmp_exit_snapshot_delete " "%s %d" "\n", result, succeeded);
#line 1973 "trace/trace-qapi_commands_migration_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_snapshot_delete(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_snapshot_delete(result, succeeded);
    }
}
#endif /* TRACE_QAPI_COMMANDS_MIGRATION_TRACE_EVENTS_GENERATED_TRACERS_H */
