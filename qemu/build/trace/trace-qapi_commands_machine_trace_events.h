/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_QAPI_COMMANDS_MACHINE_TRACE_EVENTS_GENERATED_TRACERS_H
#define TRACE_QAPI_COMMANDS_MACHINE_TRACE_EVENTS_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_QMP_ENTER_QUERY_CPUS_FAST_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_CPUS_FAST_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_MACHINES_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_MACHINES_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_CURRENT_MACHINE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_CURRENT_MACHINE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_TARGET_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_TARGET_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_UUID_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_UUID_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_VM_GENERATION_ID_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_VM_GENERATION_ID_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_SYSTEM_RESET_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_SYSTEM_RESET_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_SYSTEM_POWERDOWN_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_SYSTEM_POWERDOWN_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_SYSTEM_WAKEUP_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_SYSTEM_WAKEUP_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_INJECT_NMI_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_INJECT_NMI_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_KVM_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_KVM_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_MEMSAVE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_MEMSAVE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_PMEMSAVE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_PMEMSAVE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_MEMDEV_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_MEMDEV_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_HOTPLUGGABLE_CPUS_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_HOTPLUGGABLE_CPUS_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_SET_NUMA_NODE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_SET_NUMA_NODE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BALLOON_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BALLOON_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_BALLOON_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_BALLOON_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_HV_BALLOON_STATUS_REPORT_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_HV_BALLOON_STATUS_REPORT_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_MEMORY_SIZE_SUMMARY_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_MEMORY_SIZE_SUMMARY_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_MEMORY_DEVICES_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_MEMORY_DEVICES_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_X_QUERY_IRQ_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_X_QUERY_IRQ_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_X_QUERY_JIT_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_X_QUERY_JIT_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_X_QUERY_NUMA_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_X_QUERY_NUMA_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_X_QUERY_OPCOUNT_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_X_QUERY_OPCOUNT_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_X_QUERY_RAMBLOCK_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_X_QUERY_RAMBLOCK_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_X_QUERY_ROMS_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_X_QUERY_ROMS_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_X_QUERY_USB_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_X_QUERY_USB_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_DUMPDTB_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_DUMPDTB_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_X_QUERY_INTERRUPT_CONTROLLERS_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_X_QUERY_INTERRUPT_CONTROLLERS_EVENT;
extern uint16_t _TRACE_QMP_ENTER_QUERY_CPUS_FAST_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_CPUS_FAST_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_MACHINES_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_MACHINES_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_CURRENT_MACHINE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_CURRENT_MACHINE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_TARGET_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_TARGET_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_UUID_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_UUID_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_VM_GENERATION_ID_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_VM_GENERATION_ID_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_SYSTEM_RESET_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_SYSTEM_RESET_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_SYSTEM_POWERDOWN_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_SYSTEM_POWERDOWN_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_SYSTEM_WAKEUP_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_SYSTEM_WAKEUP_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_INJECT_NMI_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_INJECT_NMI_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_KVM_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_KVM_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_MEMSAVE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_MEMSAVE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_PMEMSAVE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_PMEMSAVE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_MEMDEV_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_MEMDEV_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_HOTPLUGGABLE_CPUS_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_HOTPLUGGABLE_CPUS_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_SET_NUMA_NODE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_SET_NUMA_NODE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BALLOON_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BALLOON_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_BALLOON_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_BALLOON_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_HV_BALLOON_STATUS_REPORT_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_HV_BALLOON_STATUS_REPORT_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_MEMORY_SIZE_SUMMARY_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_MEMORY_SIZE_SUMMARY_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_MEMORY_DEVICES_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_MEMORY_DEVICES_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_X_QUERY_IRQ_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_X_QUERY_IRQ_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_X_QUERY_JIT_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_X_QUERY_JIT_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_X_QUERY_NUMA_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_X_QUERY_NUMA_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_X_QUERY_OPCOUNT_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_X_QUERY_OPCOUNT_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_X_QUERY_RAMBLOCK_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_X_QUERY_RAMBLOCK_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_X_QUERY_ROMS_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_X_QUERY_ROMS_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_X_QUERY_USB_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_X_QUERY_USB_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_DUMPDTB_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_DUMPDTB_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_X_QUERY_INTERRUPT_CONTROLLERS_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_X_QUERY_INTERRUPT_CONTROLLERS_DSTATE;
#define TRACE_QMP_ENTER_QUERY_CPUS_FAST_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_CPUS_FAST_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_MACHINES_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_MACHINES_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_CURRENT_MACHINE_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_CURRENT_MACHINE_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_TARGET_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_TARGET_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_UUID_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_UUID_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_VM_GENERATION_ID_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_VM_GENERATION_ID_ENABLED 1
#define TRACE_QMP_ENTER_SYSTEM_RESET_ENABLED 1
#define TRACE_QMP_EXIT_SYSTEM_RESET_ENABLED 1
#define TRACE_QMP_ENTER_SYSTEM_POWERDOWN_ENABLED 1
#define TRACE_QMP_EXIT_SYSTEM_POWERDOWN_ENABLED 1
#define TRACE_QMP_ENTER_SYSTEM_WAKEUP_ENABLED 1
#define TRACE_QMP_EXIT_SYSTEM_WAKEUP_ENABLED 1
#define TRACE_QMP_ENTER_INJECT_NMI_ENABLED 1
#define TRACE_QMP_EXIT_INJECT_NMI_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_KVM_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_KVM_ENABLED 1
#define TRACE_QMP_ENTER_MEMSAVE_ENABLED 1
#define TRACE_QMP_EXIT_MEMSAVE_ENABLED 1
#define TRACE_QMP_ENTER_PMEMSAVE_ENABLED 1
#define TRACE_QMP_EXIT_PMEMSAVE_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_MEMDEV_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_MEMDEV_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_HOTPLUGGABLE_CPUS_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_HOTPLUGGABLE_CPUS_ENABLED 1
#define TRACE_QMP_ENTER_SET_NUMA_NODE_ENABLED 1
#define TRACE_QMP_EXIT_SET_NUMA_NODE_ENABLED 1
#define TRACE_QMP_ENTER_BALLOON_ENABLED 1
#define TRACE_QMP_EXIT_BALLOON_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_BALLOON_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_BALLOON_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_HV_BALLOON_STATUS_REPORT_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_HV_BALLOON_STATUS_REPORT_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_MEMORY_SIZE_SUMMARY_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_MEMORY_SIZE_SUMMARY_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_MEMORY_DEVICES_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_MEMORY_DEVICES_ENABLED 1
#define TRACE_QMP_ENTER_X_QUERY_IRQ_ENABLED 1
#define TRACE_QMP_EXIT_X_QUERY_IRQ_ENABLED 1
#define TRACE_QMP_ENTER_X_QUERY_JIT_ENABLED 1
#define TRACE_QMP_EXIT_X_QUERY_JIT_ENABLED 1
#define TRACE_QMP_ENTER_X_QUERY_NUMA_ENABLED 1
#define TRACE_QMP_EXIT_X_QUERY_NUMA_ENABLED 1
#define TRACE_QMP_ENTER_X_QUERY_OPCOUNT_ENABLED 1
#define TRACE_QMP_EXIT_X_QUERY_OPCOUNT_ENABLED 1
#define TRACE_QMP_ENTER_X_QUERY_RAMBLOCK_ENABLED 1
#define TRACE_QMP_EXIT_X_QUERY_RAMBLOCK_ENABLED 1
#define TRACE_QMP_ENTER_X_QUERY_ROMS_ENABLED 1
#define TRACE_QMP_EXIT_X_QUERY_ROMS_ENABLED 1
#define TRACE_QMP_ENTER_X_QUERY_USB_ENABLED 1
#define TRACE_QMP_EXIT_X_QUERY_USB_ENABLED 1
#define TRACE_QMP_ENTER_DUMPDTB_ENABLED 1
#define TRACE_QMP_EXIT_DUMPDTB_ENABLED 1
#define TRACE_QMP_ENTER_X_QUERY_INTERRUPT_CONTROLLERS_ENABLED 1
#define TRACE_QMP_EXIT_X_QUERY_INTERRUPT_CONTROLLERS_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_QMP_ENTER_QUERY_CPUS_FAST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_CPUS_FAST) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_cpus_fast(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_CPUS_FAST) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 3 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_cpus_fast " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 208 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 3 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_query_cpus_fast " "%s" "\n", json);
#line 212 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_cpus_fast(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_cpus_fast(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_CPUS_FAST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_CPUS_FAST) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_cpus_fast(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_CPUS_FAST) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_cpus_fast " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 239 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 4 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_query_cpus_fast " "%s %d" "\n", result, succeeded);
#line 243 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_cpus_fast(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_cpus_fast(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_MACHINES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_MACHINES) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_machines(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_MACHINES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_machines " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 270 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 5 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_query_machines " "%s" "\n", json);
#line 274 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_machines(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_machines(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_MACHINES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_MACHINES) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_machines(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_MACHINES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_machines " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 301 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 6 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_query_machines " "%s %d" "\n", result, succeeded);
#line 305 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_machines(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_machines(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_CURRENT_MACHINE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_CURRENT_MACHINE) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_current_machine(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_CURRENT_MACHINE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_current_machine " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 332 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 7 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_query_current_machine " "%s" "\n", json);
#line 336 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_current_machine(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_current_machine(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_CURRENT_MACHINE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_CURRENT_MACHINE) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_current_machine(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_CURRENT_MACHINE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_current_machine " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 363 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 8 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_query_current_machine " "%s %d" "\n", result, succeeded);
#line 367 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_current_machine(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_current_machine(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_TARGET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_TARGET) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_target(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_TARGET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_target " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 394 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 9 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_query_target " "%s" "\n", json);
#line 398 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_target(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_target(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_TARGET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_TARGET) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_target(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_TARGET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_target " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 425 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 10 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_query_target " "%s %d" "\n", result, succeeded);
#line 429 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_target(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_target(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_UUID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_UUID) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_uuid(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_UUID) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_uuid " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 456 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 11 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_query_uuid " "%s" "\n", json);
#line 460 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_uuid(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_uuid(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_UUID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_UUID) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_uuid(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_UUID) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_uuid " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 487 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 12 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_query_uuid " "%s %d" "\n", result, succeeded);
#line 491 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_uuid(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_uuid(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_VM_GENERATION_ID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_VM_GENERATION_ID) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_vm_generation_id(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_VM_GENERATION_ID) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_vm_generation_id " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 518 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 13 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_query_vm_generation_id " "%s" "\n", json);
#line 522 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_vm_generation_id(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_vm_generation_id(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_VM_GENERATION_ID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_VM_GENERATION_ID) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_vm_generation_id(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_VM_GENERATION_ID) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 14 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_vm_generation_id " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 549 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 14 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_query_vm_generation_id " "%s %d" "\n", result, succeeded);
#line 553 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_vm_generation_id(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_vm_generation_id(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_SYSTEM_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_SYSTEM_RESET) || \
    false)

static inline void _nocheck__trace_qmp_enter_system_reset(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_SYSTEM_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 15 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_system_reset " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 580 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 15 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_system_reset " "%s" "\n", json);
#line 584 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_system_reset(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_system_reset(json);
    }
}

#define TRACE_QMP_EXIT_SYSTEM_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_SYSTEM_RESET) || \
    false)

static inline void _nocheck__trace_qmp_exit_system_reset(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_SYSTEM_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_system_reset " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 611 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 16 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_system_reset " "%s %d" "\n", result, succeeded);
#line 615 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_system_reset(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_system_reset(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_SYSTEM_POWERDOWN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_SYSTEM_POWERDOWN) || \
    false)

static inline void _nocheck__trace_qmp_enter_system_powerdown(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_SYSTEM_POWERDOWN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 17 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_system_powerdown " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 642 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 17 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_system_powerdown " "%s" "\n", json);
#line 646 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_system_powerdown(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_system_powerdown(json);
    }
}

#define TRACE_QMP_EXIT_SYSTEM_POWERDOWN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_SYSTEM_POWERDOWN) || \
    false)

static inline void _nocheck__trace_qmp_exit_system_powerdown(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_SYSTEM_POWERDOWN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 18 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_system_powerdown " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 673 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 18 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_system_powerdown " "%s %d" "\n", result, succeeded);
#line 677 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_system_powerdown(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_system_powerdown(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_SYSTEM_WAKEUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_SYSTEM_WAKEUP) || \
    false)

static inline void _nocheck__trace_qmp_enter_system_wakeup(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_SYSTEM_WAKEUP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 19 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_system_wakeup " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 704 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 19 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_system_wakeup " "%s" "\n", json);
#line 708 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_system_wakeup(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_system_wakeup(json);
    }
}

#define TRACE_QMP_EXIT_SYSTEM_WAKEUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_SYSTEM_WAKEUP) || \
    false)

static inline void _nocheck__trace_qmp_exit_system_wakeup(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_SYSTEM_WAKEUP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 20 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_system_wakeup " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 735 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 20 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_system_wakeup " "%s %d" "\n", result, succeeded);
#line 739 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_system_wakeup(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_system_wakeup(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_INJECT_NMI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_INJECT_NMI) || \
    false)

static inline void _nocheck__trace_qmp_enter_inject_nmi(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_INJECT_NMI) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 21 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_inject_nmi " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 766 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 21 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_inject_nmi " "%s" "\n", json);
#line 770 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_inject_nmi(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_inject_nmi(json);
    }
}

#define TRACE_QMP_EXIT_INJECT_NMI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_INJECT_NMI) || \
    false)

static inline void _nocheck__trace_qmp_exit_inject_nmi(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_INJECT_NMI) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 22 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_inject_nmi " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 797 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 22 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_inject_nmi " "%s %d" "\n", result, succeeded);
#line 801 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_inject_nmi(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_inject_nmi(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_KVM_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_KVM) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_kvm(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_KVM) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 23 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_kvm " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 828 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 23 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_query_kvm " "%s" "\n", json);
#line 832 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_kvm(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_kvm(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_KVM_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_KVM) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_kvm(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_KVM) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 24 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_kvm " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 859 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 24 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_query_kvm " "%s %d" "\n", result, succeeded);
#line 863 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_kvm(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_kvm(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_MEMSAVE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_MEMSAVE) || \
    false)

static inline void _nocheck__trace_qmp_enter_memsave(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_MEMSAVE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 25 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_memsave " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 890 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 25 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_memsave " "%s" "\n", json);
#line 894 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_memsave(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_memsave(json);
    }
}

#define TRACE_QMP_EXIT_MEMSAVE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_MEMSAVE) || \
    false)

static inline void _nocheck__trace_qmp_exit_memsave(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_MEMSAVE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 26 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_memsave " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 921 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 26 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_memsave " "%s %d" "\n", result, succeeded);
#line 925 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_memsave(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_memsave(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_PMEMSAVE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_PMEMSAVE) || \
    false)

static inline void _nocheck__trace_qmp_enter_pmemsave(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_PMEMSAVE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 27 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_pmemsave " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 952 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 27 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_pmemsave " "%s" "\n", json);
#line 956 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_pmemsave(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_pmemsave(json);
    }
}

#define TRACE_QMP_EXIT_PMEMSAVE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_PMEMSAVE) || \
    false)

static inline void _nocheck__trace_qmp_exit_pmemsave(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_PMEMSAVE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 28 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_pmemsave " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 983 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 28 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_pmemsave " "%s %d" "\n", result, succeeded);
#line 987 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_pmemsave(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_pmemsave(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_MEMDEV_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_MEMDEV) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_memdev(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_MEMDEV) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 29 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_memdev " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1014 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 29 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_query_memdev " "%s" "\n", json);
#line 1018 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_memdev(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_memdev(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_MEMDEV_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_MEMDEV) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_memdev(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_MEMDEV) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 30 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_memdev " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1045 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 30 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_query_memdev " "%s %d" "\n", result, succeeded);
#line 1049 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_memdev(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_memdev(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_HOTPLUGGABLE_CPUS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_HOTPLUGGABLE_CPUS) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_hotpluggable_cpus(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_HOTPLUGGABLE_CPUS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 31 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_hotpluggable_cpus " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1076 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 31 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_query_hotpluggable_cpus " "%s" "\n", json);
#line 1080 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_hotpluggable_cpus(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_hotpluggable_cpus(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_HOTPLUGGABLE_CPUS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_HOTPLUGGABLE_CPUS) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_hotpluggable_cpus(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_HOTPLUGGABLE_CPUS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 32 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_hotpluggable_cpus " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1107 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 32 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_query_hotpluggable_cpus " "%s %d" "\n", result, succeeded);
#line 1111 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_hotpluggable_cpus(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_hotpluggable_cpus(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_SET_NUMA_NODE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_SET_NUMA_NODE) || \
    false)

static inline void _nocheck__trace_qmp_enter_set_numa_node(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_SET_NUMA_NODE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 33 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_set_numa_node " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1138 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 33 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_set_numa_node " "%s" "\n", json);
#line 1142 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_set_numa_node(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_set_numa_node(json);
    }
}

#define TRACE_QMP_EXIT_SET_NUMA_NODE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_SET_NUMA_NODE) || \
    false)

static inline void _nocheck__trace_qmp_exit_set_numa_node(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_SET_NUMA_NODE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 34 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_set_numa_node " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1169 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 34 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_set_numa_node " "%s %d" "\n", result, succeeded);
#line 1173 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_set_numa_node(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_set_numa_node(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BALLOON_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BALLOON) || \
    false)

static inline void _nocheck__trace_qmp_enter_balloon(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BALLOON) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 35 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_balloon " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1200 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 35 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_balloon " "%s" "\n", json);
#line 1204 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_balloon(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_balloon(json);
    }
}

#define TRACE_QMP_EXIT_BALLOON_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BALLOON) || \
    false)

static inline void _nocheck__trace_qmp_exit_balloon(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BALLOON) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 36 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_balloon " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1231 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 36 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_balloon " "%s %d" "\n", result, succeeded);
#line 1235 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_balloon(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_balloon(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_BALLOON_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_BALLOON) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_balloon(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_BALLOON) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 37 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_balloon " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1262 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 37 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_query_balloon " "%s" "\n", json);
#line 1266 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_balloon(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_balloon(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_BALLOON_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_BALLOON) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_balloon(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_BALLOON) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 38 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_balloon " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1293 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 38 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_query_balloon " "%s %d" "\n", result, succeeded);
#line 1297 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_balloon(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_balloon(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_HV_BALLOON_STATUS_REPORT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_HV_BALLOON_STATUS_REPORT) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_hv_balloon_status_report(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_HV_BALLOON_STATUS_REPORT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 39 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_hv_balloon_status_report " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1324 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 39 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_query_hv_balloon_status_report " "%s" "\n", json);
#line 1328 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_hv_balloon_status_report(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_hv_balloon_status_report(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_HV_BALLOON_STATUS_REPORT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_HV_BALLOON_STATUS_REPORT) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_hv_balloon_status_report(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_HV_BALLOON_STATUS_REPORT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 40 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_hv_balloon_status_report " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1355 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 40 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_query_hv_balloon_status_report " "%s %d" "\n", result, succeeded);
#line 1359 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_hv_balloon_status_report(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_hv_balloon_status_report(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_MEMORY_SIZE_SUMMARY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_MEMORY_SIZE_SUMMARY) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_memory_size_summary(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_MEMORY_SIZE_SUMMARY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 41 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_memory_size_summary " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1386 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 41 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_query_memory_size_summary " "%s" "\n", json);
#line 1390 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_memory_size_summary(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_memory_size_summary(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_MEMORY_SIZE_SUMMARY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_MEMORY_SIZE_SUMMARY) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_memory_size_summary(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_MEMORY_SIZE_SUMMARY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 42 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_memory_size_summary " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1417 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 42 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_query_memory_size_summary " "%s %d" "\n", result, succeeded);
#line 1421 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_memory_size_summary(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_memory_size_summary(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_MEMORY_DEVICES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_MEMORY_DEVICES) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_memory_devices(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_MEMORY_DEVICES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 43 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_memory_devices " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1448 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 43 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_query_memory_devices " "%s" "\n", json);
#line 1452 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_memory_devices(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_memory_devices(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_MEMORY_DEVICES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_MEMORY_DEVICES) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_memory_devices(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_MEMORY_DEVICES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 44 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_memory_devices " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1479 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 44 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_query_memory_devices " "%s %d" "\n", result, succeeded);
#line 1483 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_memory_devices(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_memory_devices(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_X_QUERY_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_X_QUERY_IRQ) || \
    false)

static inline void _nocheck__trace_qmp_enter_x_query_irq(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_X_QUERY_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 45 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_x_query_irq " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1510 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 45 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_x_query_irq " "%s" "\n", json);
#line 1514 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_x_query_irq(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_x_query_irq(json);
    }
}

#define TRACE_QMP_EXIT_X_QUERY_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_X_QUERY_IRQ) || \
    false)

static inline void _nocheck__trace_qmp_exit_x_query_irq(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_X_QUERY_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 46 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_x_query_irq " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1541 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 46 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_x_query_irq " "%s %d" "\n", result, succeeded);
#line 1545 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_x_query_irq(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_x_query_irq(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_X_QUERY_JIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_X_QUERY_JIT) || \
    false)

static inline void _nocheck__trace_qmp_enter_x_query_jit(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_X_QUERY_JIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 47 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_x_query_jit " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1572 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 47 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_x_query_jit " "%s" "\n", json);
#line 1576 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_x_query_jit(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_x_query_jit(json);
    }
}

#define TRACE_QMP_EXIT_X_QUERY_JIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_X_QUERY_JIT) || \
    false)

static inline void _nocheck__trace_qmp_exit_x_query_jit(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_X_QUERY_JIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 48 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_x_query_jit " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1603 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 48 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_x_query_jit " "%s %d" "\n", result, succeeded);
#line 1607 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_x_query_jit(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_x_query_jit(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_X_QUERY_NUMA_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_X_QUERY_NUMA) || \
    false)

static inline void _nocheck__trace_qmp_enter_x_query_numa(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_X_QUERY_NUMA) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 49 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_x_query_numa " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1634 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 49 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_x_query_numa " "%s" "\n", json);
#line 1638 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_x_query_numa(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_x_query_numa(json);
    }
}

#define TRACE_QMP_EXIT_X_QUERY_NUMA_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_X_QUERY_NUMA) || \
    false)

static inline void _nocheck__trace_qmp_exit_x_query_numa(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_X_QUERY_NUMA) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 50 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_x_query_numa " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1665 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 50 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_x_query_numa " "%s %d" "\n", result, succeeded);
#line 1669 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_x_query_numa(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_x_query_numa(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_X_QUERY_OPCOUNT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_X_QUERY_OPCOUNT) || \
    false)

static inline void _nocheck__trace_qmp_enter_x_query_opcount(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_X_QUERY_OPCOUNT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 51 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_x_query_opcount " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1696 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 51 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_x_query_opcount " "%s" "\n", json);
#line 1700 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_x_query_opcount(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_x_query_opcount(json);
    }
}

#define TRACE_QMP_EXIT_X_QUERY_OPCOUNT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_X_QUERY_OPCOUNT) || \
    false)

static inline void _nocheck__trace_qmp_exit_x_query_opcount(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_X_QUERY_OPCOUNT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 52 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_x_query_opcount " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1727 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 52 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_x_query_opcount " "%s %d" "\n", result, succeeded);
#line 1731 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_x_query_opcount(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_x_query_opcount(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_X_QUERY_RAMBLOCK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_X_QUERY_RAMBLOCK) || \
    false)

static inline void _nocheck__trace_qmp_enter_x_query_ramblock(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_X_QUERY_RAMBLOCK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 53 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_x_query_ramblock " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1758 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 53 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_x_query_ramblock " "%s" "\n", json);
#line 1762 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_x_query_ramblock(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_x_query_ramblock(json);
    }
}

#define TRACE_QMP_EXIT_X_QUERY_RAMBLOCK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_X_QUERY_RAMBLOCK) || \
    false)

static inline void _nocheck__trace_qmp_exit_x_query_ramblock(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_X_QUERY_RAMBLOCK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 54 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_x_query_ramblock " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1789 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 54 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_x_query_ramblock " "%s %d" "\n", result, succeeded);
#line 1793 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_x_query_ramblock(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_x_query_ramblock(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_X_QUERY_ROMS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_X_QUERY_ROMS) || \
    false)

static inline void _nocheck__trace_qmp_enter_x_query_roms(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_X_QUERY_ROMS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 55 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_x_query_roms " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1820 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 55 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_x_query_roms " "%s" "\n", json);
#line 1824 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_x_query_roms(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_x_query_roms(json);
    }
}

#define TRACE_QMP_EXIT_X_QUERY_ROMS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_X_QUERY_ROMS) || \
    false)

static inline void _nocheck__trace_qmp_exit_x_query_roms(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_X_QUERY_ROMS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 56 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_x_query_roms " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1851 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 56 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_x_query_roms " "%s %d" "\n", result, succeeded);
#line 1855 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_x_query_roms(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_x_query_roms(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_X_QUERY_USB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_X_QUERY_USB) || \
    false)

static inline void _nocheck__trace_qmp_enter_x_query_usb(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_X_QUERY_USB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 57 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_x_query_usb " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1882 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 57 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_x_query_usb " "%s" "\n", json);
#line 1886 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_x_query_usb(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_x_query_usb(json);
    }
}

#define TRACE_QMP_EXIT_X_QUERY_USB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_X_QUERY_USB) || \
    false)

static inline void _nocheck__trace_qmp_exit_x_query_usb(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_X_QUERY_USB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 58 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_x_query_usb " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1913 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 58 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_x_query_usb " "%s %d" "\n", result, succeeded);
#line 1917 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_x_query_usb(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_x_query_usb(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_DUMPDTB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_DUMPDTB) || \
    false)

static inline void _nocheck__trace_qmp_enter_dumpdtb(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_DUMPDTB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 59 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_dumpdtb " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1944 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 59 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_dumpdtb " "%s" "\n", json);
#line 1948 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_dumpdtb(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_dumpdtb(json);
    }
}

#define TRACE_QMP_EXIT_DUMPDTB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_DUMPDTB) || \
    false)

static inline void _nocheck__trace_qmp_exit_dumpdtb(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_DUMPDTB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 60 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_dumpdtb " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1975 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 60 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_dumpdtb " "%s %d" "\n", result, succeeded);
#line 1979 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_dumpdtb(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_dumpdtb(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_X_QUERY_INTERRUPT_CONTROLLERS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_X_QUERY_INTERRUPT_CONTROLLERS) || \
    false)

static inline void _nocheck__trace_qmp_enter_x_query_interrupt_controllers(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_X_QUERY_INTERRUPT_CONTROLLERS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 61 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_x_query_interrupt_controllers " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 2006 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 61 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_enter_x_query_interrupt_controllers " "%s" "\n", json);
#line 2010 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_x_query_interrupt_controllers(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_x_query_interrupt_controllers(json);
    }
}

#define TRACE_QMP_EXIT_X_QUERY_INTERRUPT_CONTROLLERS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_X_QUERY_INTERRUPT_CONTROLLERS) || \
    false)

static inline void _nocheck__trace_qmp_exit_x_query_interrupt_controllers(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_X_QUERY_INTERRUPT_CONTROLLERS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 62 "qapi/qapi-commands-machine.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_x_query_interrupt_controllers " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 2037 "trace/trace-qapi_commands_machine_trace_events.h"
        } else {
#line 62 "qapi/qapi-commands-machine.trace-events"
            qemu_log("qmp_exit_x_query_interrupt_controllers " "%s %d" "\n", result, succeeded);
#line 2041 "trace/trace-qapi_commands_machine_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_x_query_interrupt_controllers(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_x_query_interrupt_controllers(result, succeeded);
    }
}
#endif /* TRACE_QAPI_COMMANDS_MACHINE_TRACE_EVENTS_GENERATED_TRACERS_H */
