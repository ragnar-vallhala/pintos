/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_FSI_GENERATED_TRACERS_H
#define TRACE_HW_FSI_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_FSI_SCRATCHPAD_READ_EVENT;
extern TraceEvent _TRACE_FSI_SCRATCHPAD_WRITE_EVENT;
extern TraceEvent _TRACE_FSI_SLAVE_READ_EVENT;
extern TraceEvent _TRACE_FSI_SLAVE_WRITE_EVENT;
extern TraceEvent _TRACE_FSI_CFAM_CONFIG_READ_EVENT;
extern TraceEvent _TRACE_FSI_CFAM_CONFIG_WRITE_EVENT;
extern TraceEvent _TRACE_FSI_CFAM_UNIMPLEMENTED_READ_EVENT;
extern TraceEvent _TRACE_FSI_CFAM_UNIMPLEMENTED_WRITE_EVENT;
extern TraceEvent _TRACE_FSI_CFAM_CONFIG_WRITE_NOADDR_EVENT;
extern TraceEvent _TRACE_FSI_MASTER_READ_EVENT;
extern TraceEvent _TRACE_FSI_MASTER_WRITE_EVENT;
extern TraceEvent _TRACE_FSI_ASPEED_APB2OPB_READ_EVENT;
extern TraceEvent _TRACE_FSI_ASPEED_APB2OPB_WRITE_EVENT;
extern uint16_t _TRACE_FSI_SCRATCHPAD_READ_DSTATE;
extern uint16_t _TRACE_FSI_SCRATCHPAD_WRITE_DSTATE;
extern uint16_t _TRACE_FSI_SLAVE_READ_DSTATE;
extern uint16_t _TRACE_FSI_SLAVE_WRITE_DSTATE;
extern uint16_t _TRACE_FSI_CFAM_CONFIG_READ_DSTATE;
extern uint16_t _TRACE_FSI_CFAM_CONFIG_WRITE_DSTATE;
extern uint16_t _TRACE_FSI_CFAM_UNIMPLEMENTED_READ_DSTATE;
extern uint16_t _TRACE_FSI_CFAM_UNIMPLEMENTED_WRITE_DSTATE;
extern uint16_t _TRACE_FSI_CFAM_CONFIG_WRITE_NOADDR_DSTATE;
extern uint16_t _TRACE_FSI_MASTER_READ_DSTATE;
extern uint16_t _TRACE_FSI_MASTER_WRITE_DSTATE;
extern uint16_t _TRACE_FSI_ASPEED_APB2OPB_READ_DSTATE;
extern uint16_t _TRACE_FSI_ASPEED_APB2OPB_WRITE_DSTATE;
#define TRACE_FSI_SCRATCHPAD_READ_ENABLED 1
#define TRACE_FSI_SCRATCHPAD_WRITE_ENABLED 1
#define TRACE_FSI_SLAVE_READ_ENABLED 1
#define TRACE_FSI_SLAVE_WRITE_ENABLED 1
#define TRACE_FSI_CFAM_CONFIG_READ_ENABLED 1
#define TRACE_FSI_CFAM_CONFIG_WRITE_ENABLED 1
#define TRACE_FSI_CFAM_UNIMPLEMENTED_READ_ENABLED 1
#define TRACE_FSI_CFAM_UNIMPLEMENTED_WRITE_ENABLED 1
#define TRACE_FSI_CFAM_CONFIG_WRITE_NOADDR_ENABLED 1
#define TRACE_FSI_MASTER_READ_ENABLED 1
#define TRACE_FSI_MASTER_WRITE_ENABLED 1
#define TRACE_FSI_ASPEED_APB2OPB_READ_ENABLED 1
#define TRACE_FSI_ASPEED_APB2OPB_WRITE_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_FSI_SCRATCHPAD_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_FSI_SCRATCHPAD_READ) || \
    false)

static inline void _nocheck__trace_fsi_scratchpad_read(uint64_t addr, uint32_t size)
{
    if (trace_event_get_state(TRACE_FSI_SCRATCHPAD_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 1 "../hw/fsi/trace-events"
            qemu_log("%d@%zu.%06zu:fsi_scratchpad_read " "@0x%" PRIx64 " size=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size);
#line 67 "trace/trace-hw_fsi.h"
        } else {
#line 1 "../hw/fsi/trace-events"
            qemu_log("fsi_scratchpad_read " "@0x%" PRIx64 " size=%d" "\n", addr, size);
#line 71 "trace/trace-hw_fsi.h"
        }
    }
}

static inline void trace_fsi_scratchpad_read(uint64_t addr, uint32_t size)
{
    if (true) {
        _nocheck__trace_fsi_scratchpad_read(addr, size);
    }
}

#define TRACE_FSI_SCRATCHPAD_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_FSI_SCRATCHPAD_WRITE) || \
    false)

static inline void _nocheck__trace_fsi_scratchpad_write(uint64_t addr, uint32_t size, uint64_t data)
{
    if (trace_event_get_state(TRACE_FSI_SCRATCHPAD_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 2 "../hw/fsi/trace-events"
            qemu_log("%d@%zu.%06zu:fsi_scratchpad_write " "@0x%" PRIx64 " size=%d value=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size, data);
#line 98 "trace/trace-hw_fsi.h"
        } else {
#line 2 "../hw/fsi/trace-events"
            qemu_log("fsi_scratchpad_write " "@0x%" PRIx64 " size=%d value=0x%"PRIx64 "\n", addr, size, data);
#line 102 "trace/trace-hw_fsi.h"
        }
    }
}

static inline void trace_fsi_scratchpad_write(uint64_t addr, uint32_t size, uint64_t data)
{
    if (true) {
        _nocheck__trace_fsi_scratchpad_write(addr, size, data);
    }
}

#define TRACE_FSI_SLAVE_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_FSI_SLAVE_READ) || \
    false)

static inline void _nocheck__trace_fsi_slave_read(uint64_t addr, uint32_t size)
{
    if (trace_event_get_state(TRACE_FSI_SLAVE_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 3 "../hw/fsi/trace-events"
            qemu_log("%d@%zu.%06zu:fsi_slave_read " "@0x%" PRIx64 " size=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size);
#line 129 "trace/trace-hw_fsi.h"
        } else {
#line 3 "../hw/fsi/trace-events"
            qemu_log("fsi_slave_read " "@0x%" PRIx64 " size=%d" "\n", addr, size);
#line 133 "trace/trace-hw_fsi.h"
        }
    }
}

static inline void trace_fsi_slave_read(uint64_t addr, uint32_t size)
{
    if (true) {
        _nocheck__trace_fsi_slave_read(addr, size);
    }
}

#define TRACE_FSI_SLAVE_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_FSI_SLAVE_WRITE) || \
    false)

static inline void _nocheck__trace_fsi_slave_write(uint64_t addr, uint32_t size, uint64_t data)
{
    if (trace_event_get_state(TRACE_FSI_SLAVE_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "../hw/fsi/trace-events"
            qemu_log("%d@%zu.%06zu:fsi_slave_write " "@0x%" PRIx64 " size=%d value=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size, data);
#line 160 "trace/trace-hw_fsi.h"
        } else {
#line 4 "../hw/fsi/trace-events"
            qemu_log("fsi_slave_write " "@0x%" PRIx64 " size=%d value=0x%"PRIx64 "\n", addr, size, data);
#line 164 "trace/trace-hw_fsi.h"
        }
    }
}

static inline void trace_fsi_slave_write(uint64_t addr, uint32_t size, uint64_t data)
{
    if (true) {
        _nocheck__trace_fsi_slave_write(addr, size, data);
    }
}

#define TRACE_FSI_CFAM_CONFIG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_FSI_CFAM_CONFIG_READ) || \
    false)

static inline void _nocheck__trace_fsi_cfam_config_read(uint64_t addr, uint32_t size)
{
    if (trace_event_get_state(TRACE_FSI_CFAM_CONFIG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "../hw/fsi/trace-events"
            qemu_log("%d@%zu.%06zu:fsi_cfam_config_read " "@0x%" PRIx64 " size=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size);
#line 191 "trace/trace-hw_fsi.h"
        } else {
#line 5 "../hw/fsi/trace-events"
            qemu_log("fsi_cfam_config_read " "@0x%" PRIx64 " size=%d" "\n", addr, size);
#line 195 "trace/trace-hw_fsi.h"
        }
    }
}

static inline void trace_fsi_cfam_config_read(uint64_t addr, uint32_t size)
{
    if (true) {
        _nocheck__trace_fsi_cfam_config_read(addr, size);
    }
}

#define TRACE_FSI_CFAM_CONFIG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_FSI_CFAM_CONFIG_WRITE) || \
    false)

static inline void _nocheck__trace_fsi_cfam_config_write(uint64_t addr, uint32_t size, uint64_t data)
{
    if (trace_event_get_state(TRACE_FSI_CFAM_CONFIG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "../hw/fsi/trace-events"
            qemu_log("%d@%zu.%06zu:fsi_cfam_config_write " "@0x%" PRIx64 " size=%d value=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size, data);
#line 222 "trace/trace-hw_fsi.h"
        } else {
#line 6 "../hw/fsi/trace-events"
            qemu_log("fsi_cfam_config_write " "@0x%" PRIx64 " size=%d value=0x%"PRIx64 "\n", addr, size, data);
#line 226 "trace/trace-hw_fsi.h"
        }
    }
}

static inline void trace_fsi_cfam_config_write(uint64_t addr, uint32_t size, uint64_t data)
{
    if (true) {
        _nocheck__trace_fsi_cfam_config_write(addr, size, data);
    }
}

#define TRACE_FSI_CFAM_UNIMPLEMENTED_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_FSI_CFAM_UNIMPLEMENTED_READ) || \
    false)

static inline void _nocheck__trace_fsi_cfam_unimplemented_read(uint64_t addr, uint32_t size)
{
    if (trace_event_get_state(TRACE_FSI_CFAM_UNIMPLEMENTED_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "../hw/fsi/trace-events"
            qemu_log("%d@%zu.%06zu:fsi_cfam_unimplemented_read " "@0x%" PRIx64 " size=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size);
#line 253 "trace/trace-hw_fsi.h"
        } else {
#line 7 "../hw/fsi/trace-events"
            qemu_log("fsi_cfam_unimplemented_read " "@0x%" PRIx64 " size=%d" "\n", addr, size);
#line 257 "trace/trace-hw_fsi.h"
        }
    }
}

static inline void trace_fsi_cfam_unimplemented_read(uint64_t addr, uint32_t size)
{
    if (true) {
        _nocheck__trace_fsi_cfam_unimplemented_read(addr, size);
    }
}

#define TRACE_FSI_CFAM_UNIMPLEMENTED_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_FSI_CFAM_UNIMPLEMENTED_WRITE) || \
    false)

static inline void _nocheck__trace_fsi_cfam_unimplemented_write(uint64_t addr, uint32_t size, uint64_t data)
{
    if (trace_event_get_state(TRACE_FSI_CFAM_UNIMPLEMENTED_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "../hw/fsi/trace-events"
            qemu_log("%d@%zu.%06zu:fsi_cfam_unimplemented_write " "@0x%" PRIx64 " size=%d value=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size, data);
#line 284 "trace/trace-hw_fsi.h"
        } else {
#line 8 "../hw/fsi/trace-events"
            qemu_log("fsi_cfam_unimplemented_write " "@0x%" PRIx64 " size=%d value=0x%"PRIx64 "\n", addr, size, data);
#line 288 "trace/trace-hw_fsi.h"
        }
    }
}

static inline void trace_fsi_cfam_unimplemented_write(uint64_t addr, uint32_t size, uint64_t data)
{
    if (true) {
        _nocheck__trace_fsi_cfam_unimplemented_write(addr, size, data);
    }
}

#define TRACE_FSI_CFAM_CONFIG_WRITE_NOADDR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_FSI_CFAM_CONFIG_WRITE_NOADDR) || \
    false)

static inline void _nocheck__trace_fsi_cfam_config_write_noaddr(uint64_t addr, uint32_t size, uint64_t data)
{
    if (trace_event_get_state(TRACE_FSI_CFAM_CONFIG_WRITE_NOADDR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "../hw/fsi/trace-events"
            qemu_log("%d@%zu.%06zu:fsi_cfam_config_write_noaddr " "@0x%" PRIx64 " size=%d value=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size, data);
#line 315 "trace/trace-hw_fsi.h"
        } else {
#line 9 "../hw/fsi/trace-events"
            qemu_log("fsi_cfam_config_write_noaddr " "@0x%" PRIx64 " size=%d value=0x%"PRIx64 "\n", addr, size, data);
#line 319 "trace/trace-hw_fsi.h"
        }
    }
}

static inline void trace_fsi_cfam_config_write_noaddr(uint64_t addr, uint32_t size, uint64_t data)
{
    if (true) {
        _nocheck__trace_fsi_cfam_config_write_noaddr(addr, size, data);
    }
}

#define TRACE_FSI_MASTER_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_FSI_MASTER_READ) || \
    false)

static inline void _nocheck__trace_fsi_master_read(uint64_t addr, uint32_t size)
{
    if (trace_event_get_state(TRACE_FSI_MASTER_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "../hw/fsi/trace-events"
            qemu_log("%d@%zu.%06zu:fsi_master_read " "@0x%" PRIx64 " size=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size);
#line 346 "trace/trace-hw_fsi.h"
        } else {
#line 10 "../hw/fsi/trace-events"
            qemu_log("fsi_master_read " "@0x%" PRIx64 " size=%d" "\n", addr, size);
#line 350 "trace/trace-hw_fsi.h"
        }
    }
}

static inline void trace_fsi_master_read(uint64_t addr, uint32_t size)
{
    if (true) {
        _nocheck__trace_fsi_master_read(addr, size);
    }
}

#define TRACE_FSI_MASTER_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_FSI_MASTER_WRITE) || \
    false)

static inline void _nocheck__trace_fsi_master_write(uint64_t addr, uint32_t size, uint64_t data)
{
    if (trace_event_get_state(TRACE_FSI_MASTER_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "../hw/fsi/trace-events"
            qemu_log("%d@%zu.%06zu:fsi_master_write " "@0x%" PRIx64 " size=%d value=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size, data);
#line 377 "trace/trace-hw_fsi.h"
        } else {
#line 11 "../hw/fsi/trace-events"
            qemu_log("fsi_master_write " "@0x%" PRIx64 " size=%d value=0x%"PRIx64 "\n", addr, size, data);
#line 381 "trace/trace-hw_fsi.h"
        }
    }
}

static inline void trace_fsi_master_write(uint64_t addr, uint32_t size, uint64_t data)
{
    if (true) {
        _nocheck__trace_fsi_master_write(addr, size, data);
    }
}

#define TRACE_FSI_ASPEED_APB2OPB_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_FSI_ASPEED_APB2OPB_READ) || \
    false)

static inline void _nocheck__trace_fsi_aspeed_apb2opb_read(uint64_t addr, uint32_t size)
{
    if (trace_event_get_state(TRACE_FSI_ASPEED_APB2OPB_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "../hw/fsi/trace-events"
            qemu_log("%d@%zu.%06zu:fsi_aspeed_apb2opb_read " "@0x%" PRIx64 " size=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size);
#line 408 "trace/trace-hw_fsi.h"
        } else {
#line 12 "../hw/fsi/trace-events"
            qemu_log("fsi_aspeed_apb2opb_read " "@0x%" PRIx64 " size=%d" "\n", addr, size);
#line 412 "trace/trace-hw_fsi.h"
        }
    }
}

static inline void trace_fsi_aspeed_apb2opb_read(uint64_t addr, uint32_t size)
{
    if (true) {
        _nocheck__trace_fsi_aspeed_apb2opb_read(addr, size);
    }
}

#define TRACE_FSI_ASPEED_APB2OPB_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_FSI_ASPEED_APB2OPB_WRITE) || \
    false)

static inline void _nocheck__trace_fsi_aspeed_apb2opb_write(uint64_t addr, uint32_t size, uint64_t data)
{
    if (trace_event_get_state(TRACE_FSI_ASPEED_APB2OPB_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "../hw/fsi/trace-events"
            qemu_log("%d@%zu.%06zu:fsi_aspeed_apb2opb_write " "@0x%" PRIx64 " size=%d value=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size, data);
#line 439 "trace/trace-hw_fsi.h"
        } else {
#line 13 "../hw/fsi/trace-events"
            qemu_log("fsi_aspeed_apb2opb_write " "@0x%" PRIx64 " size=%d value=0x%"PRIx64 "\n", addr, size, data);
#line 443 "trace/trace-hw_fsi.h"
        }
    }
}

static inline void trace_fsi_aspeed_apb2opb_write(uint64_t addr, uint32_t size, uint64_t data)
{
    if (true) {
        _nocheck__trace_fsi_aspeed_apb2opb_write(addr, size, data);
    }
}
#endif /* TRACE_HW_FSI_GENERATED_TRACERS_H */
