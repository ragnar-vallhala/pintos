/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_9PFS_GENERATED_TRACERS_H
#define TRACE_HW_9PFS_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_V9FS_RCANCEL_EVENT;
extern TraceEvent _TRACE_V9FS_RERROR_EVENT;
extern TraceEvent _TRACE_V9FS_VERSION_EVENT;
extern TraceEvent _TRACE_V9FS_VERSION_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_ATTACH_EVENT;
extern TraceEvent _TRACE_V9FS_ATTACH_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_STAT_EVENT;
extern TraceEvent _TRACE_V9FS_STAT_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_GETATTR_EVENT;
extern TraceEvent _TRACE_V9FS_GETATTR_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_WALK_EVENT;
extern TraceEvent _TRACE_V9FS_WALK_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_OPEN_EVENT;
extern TraceEvent _TRACE_V9FS_OPEN_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_LCREATE_EVENT;
extern TraceEvent _TRACE_V9FS_LCREATE_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_FSYNC_EVENT;
extern TraceEvent _TRACE_V9FS_CLUNK_EVENT;
extern TraceEvent _TRACE_V9FS_READ_EVENT;
extern TraceEvent _TRACE_V9FS_READ_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_READDIR_EVENT;
extern TraceEvent _TRACE_V9FS_READDIR_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_WRITE_EVENT;
extern TraceEvent _TRACE_V9FS_WRITE_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_CREATE_EVENT;
extern TraceEvent _TRACE_V9FS_CREATE_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_SYMLINK_EVENT;
extern TraceEvent _TRACE_V9FS_SYMLINK_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_FLUSH_EVENT;
extern TraceEvent _TRACE_V9FS_LINK_EVENT;
extern TraceEvent _TRACE_V9FS_REMOVE_EVENT;
extern TraceEvent _TRACE_V9FS_WSTAT_EVENT;
extern TraceEvent _TRACE_V9FS_MKNOD_EVENT;
extern TraceEvent _TRACE_V9FS_MKNOD_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_LOCK_EVENT;
extern TraceEvent _TRACE_V9FS_LOCK_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_GETLOCK_EVENT;
extern TraceEvent _TRACE_V9FS_GETLOCK_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_MKDIR_EVENT;
extern TraceEvent _TRACE_V9FS_MKDIR_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_XATTRWALK_EVENT;
extern TraceEvent _TRACE_V9FS_XATTRWALK_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_XATTRCREATE_EVENT;
extern TraceEvent _TRACE_V9FS_READLINK_EVENT;
extern TraceEvent _TRACE_V9FS_READLINK_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_SETATTR_EVENT;
extern TraceEvent _TRACE_V9FS_SETATTR_RETURN_EVENT;
extern TraceEvent _TRACE_XEN_9PFS_ALLOC_EVENT;
extern TraceEvent _TRACE_XEN_9PFS_CONNECT_EVENT;
extern TraceEvent _TRACE_XEN_9PFS_DISCONNECT_EVENT;
extern TraceEvent _TRACE_XEN_9PFS_FREE_EVENT;
extern uint16_t _TRACE_V9FS_RCANCEL_DSTATE;
extern uint16_t _TRACE_V9FS_RERROR_DSTATE;
extern uint16_t _TRACE_V9FS_VERSION_DSTATE;
extern uint16_t _TRACE_V9FS_VERSION_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_ATTACH_DSTATE;
extern uint16_t _TRACE_V9FS_ATTACH_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_STAT_DSTATE;
extern uint16_t _TRACE_V9FS_STAT_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_GETATTR_DSTATE;
extern uint16_t _TRACE_V9FS_GETATTR_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_WALK_DSTATE;
extern uint16_t _TRACE_V9FS_WALK_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_OPEN_DSTATE;
extern uint16_t _TRACE_V9FS_OPEN_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_LCREATE_DSTATE;
extern uint16_t _TRACE_V9FS_LCREATE_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_FSYNC_DSTATE;
extern uint16_t _TRACE_V9FS_CLUNK_DSTATE;
extern uint16_t _TRACE_V9FS_READ_DSTATE;
extern uint16_t _TRACE_V9FS_READ_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_READDIR_DSTATE;
extern uint16_t _TRACE_V9FS_READDIR_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_WRITE_DSTATE;
extern uint16_t _TRACE_V9FS_WRITE_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_CREATE_DSTATE;
extern uint16_t _TRACE_V9FS_CREATE_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_SYMLINK_DSTATE;
extern uint16_t _TRACE_V9FS_SYMLINK_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_FLUSH_DSTATE;
extern uint16_t _TRACE_V9FS_LINK_DSTATE;
extern uint16_t _TRACE_V9FS_REMOVE_DSTATE;
extern uint16_t _TRACE_V9FS_WSTAT_DSTATE;
extern uint16_t _TRACE_V9FS_MKNOD_DSTATE;
extern uint16_t _TRACE_V9FS_MKNOD_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_LOCK_DSTATE;
extern uint16_t _TRACE_V9FS_LOCK_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_GETLOCK_DSTATE;
extern uint16_t _TRACE_V9FS_GETLOCK_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_MKDIR_DSTATE;
extern uint16_t _TRACE_V9FS_MKDIR_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_XATTRWALK_DSTATE;
extern uint16_t _TRACE_V9FS_XATTRWALK_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_XATTRCREATE_DSTATE;
extern uint16_t _TRACE_V9FS_READLINK_DSTATE;
extern uint16_t _TRACE_V9FS_READLINK_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_SETATTR_DSTATE;
extern uint16_t _TRACE_V9FS_SETATTR_RETURN_DSTATE;
extern uint16_t _TRACE_XEN_9PFS_ALLOC_DSTATE;
extern uint16_t _TRACE_XEN_9PFS_CONNECT_DSTATE;
extern uint16_t _TRACE_XEN_9PFS_DISCONNECT_DSTATE;
extern uint16_t _TRACE_XEN_9PFS_FREE_DSTATE;
#define TRACE_V9FS_RCANCEL_ENABLED 1
#define TRACE_V9FS_RERROR_ENABLED 1
#define TRACE_V9FS_VERSION_ENABLED 1
#define TRACE_V9FS_VERSION_RETURN_ENABLED 1
#define TRACE_V9FS_ATTACH_ENABLED 1
#define TRACE_V9FS_ATTACH_RETURN_ENABLED 1
#define TRACE_V9FS_STAT_ENABLED 1
#define TRACE_V9FS_STAT_RETURN_ENABLED 1
#define TRACE_V9FS_GETATTR_ENABLED 1
#define TRACE_V9FS_GETATTR_RETURN_ENABLED 1
#define TRACE_V9FS_WALK_ENABLED 1
#define TRACE_V9FS_WALK_RETURN_ENABLED 1
#define TRACE_V9FS_OPEN_ENABLED 1
#define TRACE_V9FS_OPEN_RETURN_ENABLED 1
#define TRACE_V9FS_LCREATE_ENABLED 1
#define TRACE_V9FS_LCREATE_RETURN_ENABLED 1
#define TRACE_V9FS_FSYNC_ENABLED 1
#define TRACE_V9FS_CLUNK_ENABLED 1
#define TRACE_V9FS_READ_ENABLED 1
#define TRACE_V9FS_READ_RETURN_ENABLED 1
#define TRACE_V9FS_READDIR_ENABLED 1
#define TRACE_V9FS_READDIR_RETURN_ENABLED 1
#define TRACE_V9FS_WRITE_ENABLED 1
#define TRACE_V9FS_WRITE_RETURN_ENABLED 1
#define TRACE_V9FS_CREATE_ENABLED 1
#define TRACE_V9FS_CREATE_RETURN_ENABLED 1
#define TRACE_V9FS_SYMLINK_ENABLED 1
#define TRACE_V9FS_SYMLINK_RETURN_ENABLED 1
#define TRACE_V9FS_FLUSH_ENABLED 1
#define TRACE_V9FS_LINK_ENABLED 1
#define TRACE_V9FS_REMOVE_ENABLED 1
#define TRACE_V9FS_WSTAT_ENABLED 1
#define TRACE_V9FS_MKNOD_ENABLED 1
#define TRACE_V9FS_MKNOD_RETURN_ENABLED 1
#define TRACE_V9FS_LOCK_ENABLED 1
#define TRACE_V9FS_LOCK_RETURN_ENABLED 1
#define TRACE_V9FS_GETLOCK_ENABLED 1
#define TRACE_V9FS_GETLOCK_RETURN_ENABLED 1
#define TRACE_V9FS_MKDIR_ENABLED 1
#define TRACE_V9FS_MKDIR_RETURN_ENABLED 1
#define TRACE_V9FS_XATTRWALK_ENABLED 1
#define TRACE_V9FS_XATTRWALK_RETURN_ENABLED 1
#define TRACE_V9FS_XATTRCREATE_ENABLED 1
#define TRACE_V9FS_READLINK_ENABLED 1
#define TRACE_V9FS_READLINK_RETURN_ENABLED 1
#define TRACE_V9FS_SETATTR_ENABLED 1
#define TRACE_V9FS_SETATTR_RETURN_ENABLED 1
#define TRACE_XEN_9PFS_ALLOC_ENABLED 1
#define TRACE_XEN_9PFS_CONNECT_ENABLED 1
#define TRACE_XEN_9PFS_DISCONNECT_ENABLED 1
#define TRACE_XEN_9PFS_FREE_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_V9FS_RCANCEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_RCANCEL) || \
    false)

static inline void _nocheck__trace_v9fs_rcancel(uint16_t tag, uint8_t id)
{
    if (trace_event_get_state(TRACE_V9FS_RCANCEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_rcancel " "tag %d id %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id);
#line 181 "trace/trace-hw_9pfs.h"
        } else {
#line 4 "../hw/9pfs/trace-events"
            qemu_log("v9fs_rcancel " "tag %d id %d" "\n", tag, id);
#line 185 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_rcancel(uint16_t tag, uint8_t id)
{
    if (true) {
        _nocheck__trace_v9fs_rcancel(tag, id);
    }
}

#define TRACE_V9FS_RERROR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_RERROR) || \
    false)

static inline void _nocheck__trace_v9fs_rerror(uint16_t tag, uint8_t id, int err)
{
    if (trace_event_get_state(TRACE_V9FS_RERROR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_rerror " "tag %d id %d err %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, err);
#line 212 "trace/trace-hw_9pfs.h"
        } else {
#line 5 "../hw/9pfs/trace-events"
            qemu_log("v9fs_rerror " "tag %d id %d err %d" "\n", tag, id, err);
#line 216 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_rerror(uint16_t tag, uint8_t id, int err)
{
    if (true) {
        _nocheck__trace_v9fs_rerror(tag, id, err);
    }
}

#define TRACE_V9FS_VERSION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_VERSION) || \
    false)

static inline void _nocheck__trace_v9fs_version(uint16_t tag, uint8_t id, int32_t msize, char* version)
{
    if (trace_event_get_state(TRACE_V9FS_VERSION) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_version " "tag %d id %d msize %d version %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, msize, version);
#line 243 "trace/trace-hw_9pfs.h"
        } else {
#line 6 "../hw/9pfs/trace-events"
            qemu_log("v9fs_version " "tag %d id %d msize %d version %s" "\n", tag, id, msize, version);
#line 247 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_version(uint16_t tag, uint8_t id, int32_t msize, char* version)
{
    if (true) {
        _nocheck__trace_v9fs_version(tag, id, msize, version);
    }
}

#define TRACE_V9FS_VERSION_RETURN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_VERSION_RETURN) || \
    false)

static inline void _nocheck__trace_v9fs_version_return(uint16_t tag, uint8_t id, int32_t msize, char* version)
{
    if (trace_event_get_state(TRACE_V9FS_VERSION_RETURN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_version_return " "tag %d id %d msize %d version %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, msize, version);
#line 274 "trace/trace-hw_9pfs.h"
        } else {
#line 7 "../hw/9pfs/trace-events"
            qemu_log("v9fs_version_return " "tag %d id %d msize %d version %s" "\n", tag, id, msize, version);
#line 278 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_version_return(uint16_t tag, uint8_t id, int32_t msize, char* version)
{
    if (true) {
        _nocheck__trace_v9fs_version_return(tag, id, msize, version);
    }
}

#define TRACE_V9FS_ATTACH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_ATTACH) || \
    false)

static inline void _nocheck__trace_v9fs_attach(uint16_t tag, uint8_t id, int32_t fid, int32_t afid, char* uname, char* aname)
{
    if (trace_event_get_state(TRACE_V9FS_ATTACH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_attach " "tag %u id %u fid %d afid %d uname %s aname %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, fid, afid, uname, aname);
#line 305 "trace/trace-hw_9pfs.h"
        } else {
#line 8 "../hw/9pfs/trace-events"
            qemu_log("v9fs_attach " "tag %u id %u fid %d afid %d uname %s aname %s" "\n", tag, id, fid, afid, uname, aname);
#line 309 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_attach(uint16_t tag, uint8_t id, int32_t fid, int32_t afid, char* uname, char* aname)
{
    if (true) {
        _nocheck__trace_v9fs_attach(tag, id, fid, afid, uname, aname);
    }
}

#define TRACE_V9FS_ATTACH_RETURN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_ATTACH_RETURN) || \
    false)

static inline void _nocheck__trace_v9fs_attach_return(uint16_t tag, uint8_t id, uint8_t type, uint32_t version, uint64_t path)
{
    if (trace_event_get_state(TRACE_V9FS_ATTACH_RETURN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_attach_return " "tag %u id %u type %u version %u path %"PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, type, version, path);
#line 336 "trace/trace-hw_9pfs.h"
        } else {
#line 9 "../hw/9pfs/trace-events"
            qemu_log("v9fs_attach_return " "tag %u id %u type %u version %u path %"PRIu64 "\n", tag, id, type, version, path);
#line 340 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_attach_return(uint16_t tag, uint8_t id, uint8_t type, uint32_t version, uint64_t path)
{
    if (true) {
        _nocheck__trace_v9fs_attach_return(tag, id, type, version, path);
    }
}

#define TRACE_V9FS_STAT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_STAT) || \
    false)

static inline void _nocheck__trace_v9fs_stat(uint16_t tag, uint8_t id, int32_t fid)
{
    if (trace_event_get_state(TRACE_V9FS_STAT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_stat " "tag %d id %d fid %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, fid);
#line 367 "trace/trace-hw_9pfs.h"
        } else {
#line 10 "../hw/9pfs/trace-events"
            qemu_log("v9fs_stat " "tag %d id %d fid %d" "\n", tag, id, fid);
#line 371 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_stat(uint16_t tag, uint8_t id, int32_t fid)
{
    if (true) {
        _nocheck__trace_v9fs_stat(tag, id, fid);
    }
}

#define TRACE_V9FS_STAT_RETURN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_STAT_RETURN) || \
    false)

static inline void _nocheck__trace_v9fs_stat_return(uint16_t tag, uint8_t id, int32_t mode, int32_t atime, int32_t mtime, int64_t length)
{
    if (trace_event_get_state(TRACE_V9FS_STAT_RETURN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_stat_return " "tag %d id %d stat={mode %d atime %d mtime %d length %"PRId64"}" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, mode, atime, mtime, length);
#line 398 "trace/trace-hw_9pfs.h"
        } else {
#line 11 "../hw/9pfs/trace-events"
            qemu_log("v9fs_stat_return " "tag %d id %d stat={mode %d atime %d mtime %d length %"PRId64"}" "\n", tag, id, mode, atime, mtime, length);
#line 402 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_stat_return(uint16_t tag, uint8_t id, int32_t mode, int32_t atime, int32_t mtime, int64_t length)
{
    if (true) {
        _nocheck__trace_v9fs_stat_return(tag, id, mode, atime, mtime, length);
    }
}

#define TRACE_V9FS_GETATTR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_GETATTR) || \
    false)

static inline void _nocheck__trace_v9fs_getattr(uint16_t tag, uint8_t id, int32_t fid, uint64_t request_mask)
{
    if (trace_event_get_state(TRACE_V9FS_GETATTR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_getattr " "tag %d id %d fid %d request_mask %"PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, fid, request_mask);
#line 429 "trace/trace-hw_9pfs.h"
        } else {
#line 12 "../hw/9pfs/trace-events"
            qemu_log("v9fs_getattr " "tag %d id %d fid %d request_mask %"PRIu64 "\n", tag, id, fid, request_mask);
#line 433 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_getattr(uint16_t tag, uint8_t id, int32_t fid, uint64_t request_mask)
{
    if (true) {
        _nocheck__trace_v9fs_getattr(tag, id, fid, request_mask);
    }
}

#define TRACE_V9FS_GETATTR_RETURN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_GETATTR_RETURN) || \
    false)

static inline void _nocheck__trace_v9fs_getattr_return(uint16_t tag, uint8_t id, uint64_t result_mask, uint32_t mode, uint32_t uid, uint32_t gid)
{
    if (trace_event_get_state(TRACE_V9FS_GETATTR_RETURN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_getattr_return " "tag %d id %d getattr={result_mask %"PRId64" mode %u uid %u gid %u}" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, result_mask, mode, uid, gid);
#line 460 "trace/trace-hw_9pfs.h"
        } else {
#line 13 "../hw/9pfs/trace-events"
            qemu_log("v9fs_getattr_return " "tag %d id %d getattr={result_mask %"PRId64" mode %u uid %u gid %u}" "\n", tag, id, result_mask, mode, uid, gid);
#line 464 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_getattr_return(uint16_t tag, uint8_t id, uint64_t result_mask, uint32_t mode, uint32_t uid, uint32_t gid)
{
    if (true) {
        _nocheck__trace_v9fs_getattr_return(tag, id, result_mask, mode, uid, gid);
    }
}

#define TRACE_V9FS_WALK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_WALK) || \
    false)

static inline void _nocheck__trace_v9fs_walk(uint16_t tag, uint8_t id, int32_t fid, int32_t newfid, uint16_t nwnames)
{
    if (trace_event_get_state(TRACE_V9FS_WALK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 14 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_walk " "tag %d id %d fid %d newfid %d nwnames %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, fid, newfid, nwnames);
#line 491 "trace/trace-hw_9pfs.h"
        } else {
#line 14 "../hw/9pfs/trace-events"
            qemu_log("v9fs_walk " "tag %d id %d fid %d newfid %d nwnames %d" "\n", tag, id, fid, newfid, nwnames);
#line 495 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_walk(uint16_t tag, uint8_t id, int32_t fid, int32_t newfid, uint16_t nwnames)
{
    if (true) {
        _nocheck__trace_v9fs_walk(tag, id, fid, newfid, nwnames);
    }
}

#define TRACE_V9FS_WALK_RETURN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_WALK_RETURN) || \
    false)

static inline void _nocheck__trace_v9fs_walk_return(uint16_t tag, uint8_t id, uint16_t nwnames, void* qids)
{
    if (trace_event_get_state(TRACE_V9FS_WALK_RETURN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 15 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_walk_return " "tag %d id %d nwnames %d qids %p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, nwnames, qids);
#line 522 "trace/trace-hw_9pfs.h"
        } else {
#line 15 "../hw/9pfs/trace-events"
            qemu_log("v9fs_walk_return " "tag %d id %d nwnames %d qids %p" "\n", tag, id, nwnames, qids);
#line 526 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_walk_return(uint16_t tag, uint8_t id, uint16_t nwnames, void* qids)
{
    if (true) {
        _nocheck__trace_v9fs_walk_return(tag, id, nwnames, qids);
    }
}

#define TRACE_V9FS_OPEN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_OPEN) || \
    false)

static inline void _nocheck__trace_v9fs_open(uint16_t tag, uint8_t id, int32_t fid, int32_t mode)
{
    if (trace_event_get_state(TRACE_V9FS_OPEN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_open " "tag %d id %d fid %d mode %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, fid, mode);
#line 553 "trace/trace-hw_9pfs.h"
        } else {
#line 16 "../hw/9pfs/trace-events"
            qemu_log("v9fs_open " "tag %d id %d fid %d mode %d" "\n", tag, id, fid, mode);
#line 557 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_open(uint16_t tag, uint8_t id, int32_t fid, int32_t mode)
{
    if (true) {
        _nocheck__trace_v9fs_open(tag, id, fid, mode);
    }
}

#define TRACE_V9FS_OPEN_RETURN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_OPEN_RETURN) || \
    false)

static inline void _nocheck__trace_v9fs_open_return(uint16_t tag, uint8_t id, uint8_t type, uint32_t version, uint64_t path, int iounit)
{
    if (trace_event_get_state(TRACE_V9FS_OPEN_RETURN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 17 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_open_return " "tag %u id %u qid={type %u version %u path %"PRIu64"} iounit %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, type, version, path, iounit);
#line 584 "trace/trace-hw_9pfs.h"
        } else {
#line 17 "../hw/9pfs/trace-events"
            qemu_log("v9fs_open_return " "tag %u id %u qid={type %u version %u path %"PRIu64"} iounit %d" "\n", tag, id, type, version, path, iounit);
#line 588 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_open_return(uint16_t tag, uint8_t id, uint8_t type, uint32_t version, uint64_t path, int iounit)
{
    if (true) {
        _nocheck__trace_v9fs_open_return(tag, id, type, version, path, iounit);
    }
}

#define TRACE_V9FS_LCREATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_LCREATE) || \
    false)

static inline void _nocheck__trace_v9fs_lcreate(uint16_t tag, uint8_t id, int32_t dfid, int32_t flags, int32_t mode, uint32_t gid)
{
    if (trace_event_get_state(TRACE_V9FS_LCREATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 18 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_lcreate " "tag %d id %d dfid %d flags %d mode %d gid %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, dfid, flags, mode, gid);
#line 615 "trace/trace-hw_9pfs.h"
        } else {
#line 18 "../hw/9pfs/trace-events"
            qemu_log("v9fs_lcreate " "tag %d id %d dfid %d flags %d mode %d gid %u" "\n", tag, id, dfid, flags, mode, gid);
#line 619 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_lcreate(uint16_t tag, uint8_t id, int32_t dfid, int32_t flags, int32_t mode, uint32_t gid)
{
    if (true) {
        _nocheck__trace_v9fs_lcreate(tag, id, dfid, flags, mode, gid);
    }
}

#define TRACE_V9FS_LCREATE_RETURN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_LCREATE_RETURN) || \
    false)

static inline void _nocheck__trace_v9fs_lcreate_return(uint16_t tag, uint8_t id, uint8_t type, uint32_t version, uint64_t path, int32_t iounit)
{
    if (trace_event_get_state(TRACE_V9FS_LCREATE_RETURN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 19 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_lcreate_return " "tag %u id %u qid={type %u version %u path %"PRIu64"} iounit %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, type, version, path, iounit);
#line 646 "trace/trace-hw_9pfs.h"
        } else {
#line 19 "../hw/9pfs/trace-events"
            qemu_log("v9fs_lcreate_return " "tag %u id %u qid={type %u version %u path %"PRIu64"} iounit %d" "\n", tag, id, type, version, path, iounit);
#line 650 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_lcreate_return(uint16_t tag, uint8_t id, uint8_t type, uint32_t version, uint64_t path, int32_t iounit)
{
    if (true) {
        _nocheck__trace_v9fs_lcreate_return(tag, id, type, version, path, iounit);
    }
}

#define TRACE_V9FS_FSYNC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_FSYNC) || \
    false)

static inline void _nocheck__trace_v9fs_fsync(uint16_t tag, uint8_t id, int32_t fid, int datasync)
{
    if (trace_event_get_state(TRACE_V9FS_FSYNC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 20 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_fsync " "tag %d id %d fid %d datasync %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, fid, datasync);
#line 677 "trace/trace-hw_9pfs.h"
        } else {
#line 20 "../hw/9pfs/trace-events"
            qemu_log("v9fs_fsync " "tag %d id %d fid %d datasync %d" "\n", tag, id, fid, datasync);
#line 681 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_fsync(uint16_t tag, uint8_t id, int32_t fid, int datasync)
{
    if (true) {
        _nocheck__trace_v9fs_fsync(tag, id, fid, datasync);
    }
}

#define TRACE_V9FS_CLUNK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_CLUNK) || \
    false)

static inline void _nocheck__trace_v9fs_clunk(uint16_t tag, uint8_t id, int32_t fid)
{
    if (trace_event_get_state(TRACE_V9FS_CLUNK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 21 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_clunk " "tag %d id %d fid %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, fid);
#line 708 "trace/trace-hw_9pfs.h"
        } else {
#line 21 "../hw/9pfs/trace-events"
            qemu_log("v9fs_clunk " "tag %d id %d fid %d" "\n", tag, id, fid);
#line 712 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_clunk(uint16_t tag, uint8_t id, int32_t fid)
{
    if (true) {
        _nocheck__trace_v9fs_clunk(tag, id, fid);
    }
}

#define TRACE_V9FS_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_READ) || \
    false)

static inline void _nocheck__trace_v9fs_read(uint16_t tag, uint8_t id, int32_t fid, uint64_t off, uint32_t max_count)
{
    if (trace_event_get_state(TRACE_V9FS_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 22 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_read " "tag %d id %d fid %d off %"PRIu64" max_count %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, fid, off, max_count);
#line 739 "trace/trace-hw_9pfs.h"
        } else {
#line 22 "../hw/9pfs/trace-events"
            qemu_log("v9fs_read " "tag %d id %d fid %d off %"PRIu64" max_count %u" "\n", tag, id, fid, off, max_count);
#line 743 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_read(uint16_t tag, uint8_t id, int32_t fid, uint64_t off, uint32_t max_count)
{
    if (true) {
        _nocheck__trace_v9fs_read(tag, id, fid, off, max_count);
    }
}

#define TRACE_V9FS_READ_RETURN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_READ_RETURN) || \
    false)

static inline void _nocheck__trace_v9fs_read_return(uint16_t tag, uint8_t id, int32_t count, ssize_t err)
{
    if (trace_event_get_state(TRACE_V9FS_READ_RETURN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 23 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_read_return " "tag %d id %d count %d err %zd" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, count, err);
#line 770 "trace/trace-hw_9pfs.h"
        } else {
#line 23 "../hw/9pfs/trace-events"
            qemu_log("v9fs_read_return " "tag %d id %d count %d err %zd" "\n", tag, id, count, err);
#line 774 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_read_return(uint16_t tag, uint8_t id, int32_t count, ssize_t err)
{
    if (true) {
        _nocheck__trace_v9fs_read_return(tag, id, count, err);
    }
}

#define TRACE_V9FS_READDIR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_READDIR) || \
    false)

static inline void _nocheck__trace_v9fs_readdir(uint16_t tag, uint8_t id, int32_t fid, uint64_t offset, uint32_t max_count)
{
    if (trace_event_get_state(TRACE_V9FS_READDIR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 24 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_readdir " "tag %d id %d fid %d offset %"PRIu64" max_count %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, fid, offset, max_count);
#line 801 "trace/trace-hw_9pfs.h"
        } else {
#line 24 "../hw/9pfs/trace-events"
            qemu_log("v9fs_readdir " "tag %d id %d fid %d offset %"PRIu64" max_count %u" "\n", tag, id, fid, offset, max_count);
#line 805 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_readdir(uint16_t tag, uint8_t id, int32_t fid, uint64_t offset, uint32_t max_count)
{
    if (true) {
        _nocheck__trace_v9fs_readdir(tag, id, fid, offset, max_count);
    }
}

#define TRACE_V9FS_READDIR_RETURN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_READDIR_RETURN) || \
    false)

static inline void _nocheck__trace_v9fs_readdir_return(uint16_t tag, uint8_t id, uint32_t count, ssize_t retval)
{
    if (trace_event_get_state(TRACE_V9FS_READDIR_RETURN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 25 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_readdir_return " "tag %d id %d count %u retval %zd" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, count, retval);
#line 832 "trace/trace-hw_9pfs.h"
        } else {
#line 25 "../hw/9pfs/trace-events"
            qemu_log("v9fs_readdir_return " "tag %d id %d count %u retval %zd" "\n", tag, id, count, retval);
#line 836 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_readdir_return(uint16_t tag, uint8_t id, uint32_t count, ssize_t retval)
{
    if (true) {
        _nocheck__trace_v9fs_readdir_return(tag, id, count, retval);
    }
}

#define TRACE_V9FS_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_WRITE) || \
    false)

static inline void _nocheck__trace_v9fs_write(uint16_t tag, uint8_t id, int32_t fid, uint64_t off, uint32_t count, int cnt)
{
    if (trace_event_get_state(TRACE_V9FS_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 26 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_write " "tag %d id %d fid %d off %"PRIu64" count %u cnt %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, fid, off, count, cnt);
#line 863 "trace/trace-hw_9pfs.h"
        } else {
#line 26 "../hw/9pfs/trace-events"
            qemu_log("v9fs_write " "tag %d id %d fid %d off %"PRIu64" count %u cnt %d" "\n", tag, id, fid, off, count, cnt);
#line 867 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_write(uint16_t tag, uint8_t id, int32_t fid, uint64_t off, uint32_t count, int cnt)
{
    if (true) {
        _nocheck__trace_v9fs_write(tag, id, fid, off, count, cnt);
    }
}

#define TRACE_V9FS_WRITE_RETURN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_WRITE_RETURN) || \
    false)

static inline void _nocheck__trace_v9fs_write_return(uint16_t tag, uint8_t id, int32_t total, ssize_t err)
{
    if (trace_event_get_state(TRACE_V9FS_WRITE_RETURN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 27 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_write_return " "tag %d id %d total %d err %zd" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, total, err);
#line 894 "trace/trace-hw_9pfs.h"
        } else {
#line 27 "../hw/9pfs/trace-events"
            qemu_log("v9fs_write_return " "tag %d id %d total %d err %zd" "\n", tag, id, total, err);
#line 898 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_write_return(uint16_t tag, uint8_t id, int32_t total, ssize_t err)
{
    if (true) {
        _nocheck__trace_v9fs_write_return(tag, id, total, err);
    }
}

#define TRACE_V9FS_CREATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_CREATE) || \
    false)

static inline void _nocheck__trace_v9fs_create(uint16_t tag, uint8_t id, int32_t fid, char* name, int32_t perm, int8_t mode)
{
    if (trace_event_get_state(TRACE_V9FS_CREATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 28 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_create " "tag %d id %d fid %d name %s perm %d mode %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, fid, name, perm, mode);
#line 925 "trace/trace-hw_9pfs.h"
        } else {
#line 28 "../hw/9pfs/trace-events"
            qemu_log("v9fs_create " "tag %d id %d fid %d name %s perm %d mode %d" "\n", tag, id, fid, name, perm, mode);
#line 929 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_create(uint16_t tag, uint8_t id, int32_t fid, char* name, int32_t perm, int8_t mode)
{
    if (true) {
        _nocheck__trace_v9fs_create(tag, id, fid, name, perm, mode);
    }
}

#define TRACE_V9FS_CREATE_RETURN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_CREATE_RETURN) || \
    false)

static inline void _nocheck__trace_v9fs_create_return(uint16_t tag, uint8_t id, uint8_t type, uint32_t version, uint64_t path, int iounit)
{
    if (trace_event_get_state(TRACE_V9FS_CREATE_RETURN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 29 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_create_return " "tag %u id %u qid={type %u version %u path %"PRIu64"} iounit %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, type, version, path, iounit);
#line 956 "trace/trace-hw_9pfs.h"
        } else {
#line 29 "../hw/9pfs/trace-events"
            qemu_log("v9fs_create_return " "tag %u id %u qid={type %u version %u path %"PRIu64"} iounit %d" "\n", tag, id, type, version, path, iounit);
#line 960 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_create_return(uint16_t tag, uint8_t id, uint8_t type, uint32_t version, uint64_t path, int iounit)
{
    if (true) {
        _nocheck__trace_v9fs_create_return(tag, id, type, version, path, iounit);
    }
}

#define TRACE_V9FS_SYMLINK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_SYMLINK) || \
    false)

static inline void _nocheck__trace_v9fs_symlink(uint16_t tag, uint8_t id, int32_t fid, char* name, char* symname, uint32_t gid)
{
    if (trace_event_get_state(TRACE_V9FS_SYMLINK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 30 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_symlink " "tag %d id %d fid %d name %s symname %s gid %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, fid, name, symname, gid);
#line 987 "trace/trace-hw_9pfs.h"
        } else {
#line 30 "../hw/9pfs/trace-events"
            qemu_log("v9fs_symlink " "tag %d id %d fid %d name %s symname %s gid %u" "\n", tag, id, fid, name, symname, gid);
#line 991 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_symlink(uint16_t tag, uint8_t id, int32_t fid, char* name, char* symname, uint32_t gid)
{
    if (true) {
        _nocheck__trace_v9fs_symlink(tag, id, fid, name, symname, gid);
    }
}

#define TRACE_V9FS_SYMLINK_RETURN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_SYMLINK_RETURN) || \
    false)

static inline void _nocheck__trace_v9fs_symlink_return(uint16_t tag, uint8_t id, uint8_t type, uint32_t version, uint64_t path)
{
    if (trace_event_get_state(TRACE_V9FS_SYMLINK_RETURN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 31 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_symlink_return " "tag %u id %u qid={type %u version %u path %"PRIu64"}" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, type, version, path);
#line 1018 "trace/trace-hw_9pfs.h"
        } else {
#line 31 "../hw/9pfs/trace-events"
            qemu_log("v9fs_symlink_return " "tag %u id %u qid={type %u version %u path %"PRIu64"}" "\n", tag, id, type, version, path);
#line 1022 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_symlink_return(uint16_t tag, uint8_t id, uint8_t type, uint32_t version, uint64_t path)
{
    if (true) {
        _nocheck__trace_v9fs_symlink_return(tag, id, type, version, path);
    }
}

#define TRACE_V9FS_FLUSH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_FLUSH) || \
    false)

static inline void _nocheck__trace_v9fs_flush(uint16_t tag, uint8_t id, int16_t flush_tag)
{
    if (trace_event_get_state(TRACE_V9FS_FLUSH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 32 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_flush " "tag %d id %d flush_tag %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, flush_tag);
#line 1049 "trace/trace-hw_9pfs.h"
        } else {
#line 32 "../hw/9pfs/trace-events"
            qemu_log("v9fs_flush " "tag %d id %d flush_tag %d" "\n", tag, id, flush_tag);
#line 1053 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_flush(uint16_t tag, uint8_t id, int16_t flush_tag)
{
    if (true) {
        _nocheck__trace_v9fs_flush(tag, id, flush_tag);
    }
}

#define TRACE_V9FS_LINK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_LINK) || \
    false)

static inline void _nocheck__trace_v9fs_link(uint16_t tag, uint8_t id, int32_t dfid, int32_t oldfid, char* name)
{
    if (trace_event_get_state(TRACE_V9FS_LINK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 33 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_link " "tag %d id %d dfid %d oldfid %d name %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, dfid, oldfid, name);
#line 1080 "trace/trace-hw_9pfs.h"
        } else {
#line 33 "../hw/9pfs/trace-events"
            qemu_log("v9fs_link " "tag %d id %d dfid %d oldfid %d name %s" "\n", tag, id, dfid, oldfid, name);
#line 1084 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_link(uint16_t tag, uint8_t id, int32_t dfid, int32_t oldfid, char* name)
{
    if (true) {
        _nocheck__trace_v9fs_link(tag, id, dfid, oldfid, name);
    }
}

#define TRACE_V9FS_REMOVE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_REMOVE) || \
    false)

static inline void _nocheck__trace_v9fs_remove(uint16_t tag, uint8_t id, int32_t fid)
{
    if (trace_event_get_state(TRACE_V9FS_REMOVE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 34 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_remove " "tag %d id %d fid %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, fid);
#line 1111 "trace/trace-hw_9pfs.h"
        } else {
#line 34 "../hw/9pfs/trace-events"
            qemu_log("v9fs_remove " "tag %d id %d fid %d" "\n", tag, id, fid);
#line 1115 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_remove(uint16_t tag, uint8_t id, int32_t fid)
{
    if (true) {
        _nocheck__trace_v9fs_remove(tag, id, fid);
    }
}

#define TRACE_V9FS_WSTAT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_WSTAT) || \
    false)

static inline void _nocheck__trace_v9fs_wstat(uint16_t tag, uint8_t id, int32_t fid, int32_t mode, int32_t atime, int32_t mtime)
{
    if (trace_event_get_state(TRACE_V9FS_WSTAT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 35 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_wstat " "tag %u id %u fid %d stat={mode %d atime %d mtime %d}" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, fid, mode, atime, mtime);
#line 1142 "trace/trace-hw_9pfs.h"
        } else {
#line 35 "../hw/9pfs/trace-events"
            qemu_log("v9fs_wstat " "tag %u id %u fid %d stat={mode %d atime %d mtime %d}" "\n", tag, id, fid, mode, atime, mtime);
#line 1146 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_wstat(uint16_t tag, uint8_t id, int32_t fid, int32_t mode, int32_t atime, int32_t mtime)
{
    if (true) {
        _nocheck__trace_v9fs_wstat(tag, id, fid, mode, atime, mtime);
    }
}

#define TRACE_V9FS_MKNOD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_MKNOD) || \
    false)

static inline void _nocheck__trace_v9fs_mknod(uint16_t tag, uint8_t id, int32_t fid, int mode, int major, int minor)
{
    if (trace_event_get_state(TRACE_V9FS_MKNOD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 36 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_mknod " "tag %d id %d fid %d mode %d major %d minor %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, fid, mode, major, minor);
#line 1173 "trace/trace-hw_9pfs.h"
        } else {
#line 36 "../hw/9pfs/trace-events"
            qemu_log("v9fs_mknod " "tag %d id %d fid %d mode %d major %d minor %d" "\n", tag, id, fid, mode, major, minor);
#line 1177 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_mknod(uint16_t tag, uint8_t id, int32_t fid, int mode, int major, int minor)
{
    if (true) {
        _nocheck__trace_v9fs_mknod(tag, id, fid, mode, major, minor);
    }
}

#define TRACE_V9FS_MKNOD_RETURN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_MKNOD_RETURN) || \
    false)

static inline void _nocheck__trace_v9fs_mknod_return(uint16_t tag, uint8_t id, uint8_t type, uint32_t version, uint64_t path)
{
    if (trace_event_get_state(TRACE_V9FS_MKNOD_RETURN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 37 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_mknod_return " "tag %u id %u qid={type %u version %u path %"PRIu64"}" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, type, version, path);
#line 1204 "trace/trace-hw_9pfs.h"
        } else {
#line 37 "../hw/9pfs/trace-events"
            qemu_log("v9fs_mknod_return " "tag %u id %u qid={type %u version %u path %"PRIu64"}" "\n", tag, id, type, version, path);
#line 1208 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_mknod_return(uint16_t tag, uint8_t id, uint8_t type, uint32_t version, uint64_t path)
{
    if (true) {
        _nocheck__trace_v9fs_mknod_return(tag, id, type, version, path);
    }
}

#define TRACE_V9FS_LOCK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_LOCK) || \
    false)

static inline void _nocheck__trace_v9fs_lock(uint16_t tag, uint8_t id, int32_t fid, uint8_t type, uint64_t start, uint64_t length)
{
    if (trace_event_get_state(TRACE_V9FS_LOCK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 38 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_lock " "tag %d id %d fid %d type %d start %"PRIu64" length %"PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, fid, type, start, length);
#line 1235 "trace/trace-hw_9pfs.h"
        } else {
#line 38 "../hw/9pfs/trace-events"
            qemu_log("v9fs_lock " "tag %d id %d fid %d type %d start %"PRIu64" length %"PRIu64 "\n", tag, id, fid, type, start, length);
#line 1239 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_lock(uint16_t tag, uint8_t id, int32_t fid, uint8_t type, uint64_t start, uint64_t length)
{
    if (true) {
        _nocheck__trace_v9fs_lock(tag, id, fid, type, start, length);
    }
}

#define TRACE_V9FS_LOCK_RETURN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_LOCK_RETURN) || \
    false)

static inline void _nocheck__trace_v9fs_lock_return(uint16_t tag, uint8_t id, int8_t status)
{
    if (trace_event_get_state(TRACE_V9FS_LOCK_RETURN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 39 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_lock_return " "tag %d id %d status %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, status);
#line 1266 "trace/trace-hw_9pfs.h"
        } else {
#line 39 "../hw/9pfs/trace-events"
            qemu_log("v9fs_lock_return " "tag %d id %d status %d" "\n", tag, id, status);
#line 1270 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_lock_return(uint16_t tag, uint8_t id, int8_t status)
{
    if (true) {
        _nocheck__trace_v9fs_lock_return(tag, id, status);
    }
}

#define TRACE_V9FS_GETLOCK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_GETLOCK) || \
    false)

static inline void _nocheck__trace_v9fs_getlock(uint16_t tag, uint8_t id, int32_t fid, uint8_t type, uint64_t start, uint64_t length)
{
    if (trace_event_get_state(TRACE_V9FS_GETLOCK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 40 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_getlock " "tag %d id %d fid %d type %d start %"PRIu64" length %"PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, fid, type, start, length);
#line 1297 "trace/trace-hw_9pfs.h"
        } else {
#line 40 "../hw/9pfs/trace-events"
            qemu_log("v9fs_getlock " "tag %d id %d fid %d type %d start %"PRIu64" length %"PRIu64 "\n", tag, id, fid, type, start, length);
#line 1301 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_getlock(uint16_t tag, uint8_t id, int32_t fid, uint8_t type, uint64_t start, uint64_t length)
{
    if (true) {
        _nocheck__trace_v9fs_getlock(tag, id, fid, type, start, length);
    }
}

#define TRACE_V9FS_GETLOCK_RETURN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_GETLOCK_RETURN) || \
    false)

static inline void _nocheck__trace_v9fs_getlock_return(uint16_t tag, uint8_t id, uint8_t type, uint64_t start, uint64_t length, uint32_t proc_id)
{
    if (trace_event_get_state(TRACE_V9FS_GETLOCK_RETURN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 41 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_getlock_return " "tag %d id %d type %d start %"PRIu64" length %"PRIu64" proc_id %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, type, start, length, proc_id);
#line 1328 "trace/trace-hw_9pfs.h"
        } else {
#line 41 "../hw/9pfs/trace-events"
            qemu_log("v9fs_getlock_return " "tag %d id %d type %d start %"PRIu64" length %"PRIu64" proc_id %u" "\n", tag, id, type, start, length, proc_id);
#line 1332 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_getlock_return(uint16_t tag, uint8_t id, uint8_t type, uint64_t start, uint64_t length, uint32_t proc_id)
{
    if (true) {
        _nocheck__trace_v9fs_getlock_return(tag, id, type, start, length, proc_id);
    }
}

#define TRACE_V9FS_MKDIR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_MKDIR) || \
    false)

static inline void _nocheck__trace_v9fs_mkdir(uint16_t tag, uint8_t id, int32_t fid, char* name, int mode, uint32_t gid)
{
    if (trace_event_get_state(TRACE_V9FS_MKDIR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 42 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_mkdir " "tag %u id %u fid %d name %s mode %d gid %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, fid, name, mode, gid);
#line 1359 "trace/trace-hw_9pfs.h"
        } else {
#line 42 "../hw/9pfs/trace-events"
            qemu_log("v9fs_mkdir " "tag %u id %u fid %d name %s mode %d gid %u" "\n", tag, id, fid, name, mode, gid);
#line 1363 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_mkdir(uint16_t tag, uint8_t id, int32_t fid, char* name, int mode, uint32_t gid)
{
    if (true) {
        _nocheck__trace_v9fs_mkdir(tag, id, fid, name, mode, gid);
    }
}

#define TRACE_V9FS_MKDIR_RETURN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_MKDIR_RETURN) || \
    false)

static inline void _nocheck__trace_v9fs_mkdir_return(uint16_t tag, uint8_t id, uint8_t type, uint32_t version, uint64_t path, int err)
{
    if (trace_event_get_state(TRACE_V9FS_MKDIR_RETURN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 43 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_mkdir_return " "tag %u id %u qid={type %u version %u path %"PRIu64"} err %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, type, version, path, err);
#line 1390 "trace/trace-hw_9pfs.h"
        } else {
#line 43 "../hw/9pfs/trace-events"
            qemu_log("v9fs_mkdir_return " "tag %u id %u qid={type %u version %u path %"PRIu64"} err %d" "\n", tag, id, type, version, path, err);
#line 1394 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_mkdir_return(uint16_t tag, uint8_t id, uint8_t type, uint32_t version, uint64_t path, int err)
{
    if (true) {
        _nocheck__trace_v9fs_mkdir_return(tag, id, type, version, path, err);
    }
}

#define TRACE_V9FS_XATTRWALK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_XATTRWALK) || \
    false)

static inline void _nocheck__trace_v9fs_xattrwalk(uint16_t tag, uint8_t id, int32_t fid, int32_t newfid, char* name)
{
    if (trace_event_get_state(TRACE_V9FS_XATTRWALK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 44 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_xattrwalk " "tag %d id %d fid %d newfid %d name %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, fid, newfid, name);
#line 1421 "trace/trace-hw_9pfs.h"
        } else {
#line 44 "../hw/9pfs/trace-events"
            qemu_log("v9fs_xattrwalk " "tag %d id %d fid %d newfid %d name %s" "\n", tag, id, fid, newfid, name);
#line 1425 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_xattrwalk(uint16_t tag, uint8_t id, int32_t fid, int32_t newfid, char* name)
{
    if (true) {
        _nocheck__trace_v9fs_xattrwalk(tag, id, fid, newfid, name);
    }
}

#define TRACE_V9FS_XATTRWALK_RETURN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_XATTRWALK_RETURN) || \
    false)

static inline void _nocheck__trace_v9fs_xattrwalk_return(uint16_t tag, uint8_t id, int64_t size)
{
    if (trace_event_get_state(TRACE_V9FS_XATTRWALK_RETURN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 45 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_xattrwalk_return " "tag %d id %d size %"PRId64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, size);
#line 1452 "trace/trace-hw_9pfs.h"
        } else {
#line 45 "../hw/9pfs/trace-events"
            qemu_log("v9fs_xattrwalk_return " "tag %d id %d size %"PRId64 "\n", tag, id, size);
#line 1456 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_xattrwalk_return(uint16_t tag, uint8_t id, int64_t size)
{
    if (true) {
        _nocheck__trace_v9fs_xattrwalk_return(tag, id, size);
    }
}

#define TRACE_V9FS_XATTRCREATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_XATTRCREATE) || \
    false)

static inline void _nocheck__trace_v9fs_xattrcreate(uint16_t tag, uint8_t id, int32_t fid, char* name, uint64_t size, int flags)
{
    if (trace_event_get_state(TRACE_V9FS_XATTRCREATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 46 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_xattrcreate " "tag %d id %d fid %d name %s size %"PRIu64" flags %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, fid, name, size, flags);
#line 1483 "trace/trace-hw_9pfs.h"
        } else {
#line 46 "../hw/9pfs/trace-events"
            qemu_log("v9fs_xattrcreate " "tag %d id %d fid %d name %s size %"PRIu64" flags %d" "\n", tag, id, fid, name, size, flags);
#line 1487 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_xattrcreate(uint16_t tag, uint8_t id, int32_t fid, char* name, uint64_t size, int flags)
{
    if (true) {
        _nocheck__trace_v9fs_xattrcreate(tag, id, fid, name, size, flags);
    }
}

#define TRACE_V9FS_READLINK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_READLINK) || \
    false)

static inline void _nocheck__trace_v9fs_readlink(uint16_t tag, uint8_t id, int32_t fid)
{
    if (trace_event_get_state(TRACE_V9FS_READLINK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 47 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_readlink " "tag %d id %d fid %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, fid);
#line 1514 "trace/trace-hw_9pfs.h"
        } else {
#line 47 "../hw/9pfs/trace-events"
            qemu_log("v9fs_readlink " "tag %d id %d fid %d" "\n", tag, id, fid);
#line 1518 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_readlink(uint16_t tag, uint8_t id, int32_t fid)
{
    if (true) {
        _nocheck__trace_v9fs_readlink(tag, id, fid);
    }
}

#define TRACE_V9FS_READLINK_RETURN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_READLINK_RETURN) || \
    false)

static inline void _nocheck__trace_v9fs_readlink_return(uint16_t tag, uint8_t id, char* target)
{
    if (trace_event_get_state(TRACE_V9FS_READLINK_RETURN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 48 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_readlink_return " "tag %d id %d name %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, target);
#line 1545 "trace/trace-hw_9pfs.h"
        } else {
#line 48 "../hw/9pfs/trace-events"
            qemu_log("v9fs_readlink_return " "tag %d id %d name %s" "\n", tag, id, target);
#line 1549 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_readlink_return(uint16_t tag, uint8_t id, char* target)
{
    if (true) {
        _nocheck__trace_v9fs_readlink_return(tag, id, target);
    }
}

#define TRACE_V9FS_SETATTR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_SETATTR) || \
    false)

static inline void _nocheck__trace_v9fs_setattr(uint16_t tag, uint8_t id, int32_t fid, int32_t valid, int32_t mode, int32_t uid, int32_t gid, int64_t size, int64_t atime_sec, int64_t mtime_sec)
{
    if (trace_event_get_state(TRACE_V9FS_SETATTR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 49 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_setattr " "tag %u id %u fid %d iattr={valid %d mode %d uid %d gid %d size %"PRId64" atime=%"PRId64" mtime=%"PRId64" }" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id, fid, valid, mode, uid, gid, size, atime_sec, mtime_sec);
#line 1576 "trace/trace-hw_9pfs.h"
        } else {
#line 49 "../hw/9pfs/trace-events"
            qemu_log("v9fs_setattr " "tag %u id %u fid %d iattr={valid %d mode %d uid %d gid %d size %"PRId64" atime=%"PRId64" mtime=%"PRId64" }" "\n", tag, id, fid, valid, mode, uid, gid, size, atime_sec, mtime_sec);
#line 1580 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_setattr(uint16_t tag, uint8_t id, int32_t fid, int32_t valid, int32_t mode, int32_t uid, int32_t gid, int64_t size, int64_t atime_sec, int64_t mtime_sec)
{
    if (true) {
        _nocheck__trace_v9fs_setattr(tag, id, fid, valid, mode, uid, gid, size, atime_sec, mtime_sec);
    }
}

#define TRACE_V9FS_SETATTR_RETURN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_V9FS_SETATTR_RETURN) || \
    false)

static inline void _nocheck__trace_v9fs_setattr_return(uint16_t tag, uint8_t id)
{
    if (trace_event_get_state(TRACE_V9FS_SETATTR_RETURN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 50 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:v9fs_setattr_return " "tag %u id %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, id);
#line 1607 "trace/trace-hw_9pfs.h"
        } else {
#line 50 "../hw/9pfs/trace-events"
            qemu_log("v9fs_setattr_return " "tag %u id %u" "\n", tag, id);
#line 1611 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_v9fs_setattr_return(uint16_t tag, uint8_t id)
{
    if (true) {
        _nocheck__trace_v9fs_setattr_return(tag, id);
    }
}

#define TRACE_XEN_9PFS_ALLOC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_9PFS_ALLOC) || \
    false)

static inline void _nocheck__trace_xen_9pfs_alloc(char * name)
{
    if (trace_event_get_state(TRACE_XEN_9PFS_ALLOC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 53 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:xen_9pfs_alloc " "name %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name);
#line 1638 "trace/trace-hw_9pfs.h"
        } else {
#line 53 "../hw/9pfs/trace-events"
            qemu_log("xen_9pfs_alloc " "name %s" "\n", name);
#line 1642 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_xen_9pfs_alloc(char * name)
{
    if (true) {
        _nocheck__trace_xen_9pfs_alloc(name);
    }
}

#define TRACE_XEN_9PFS_CONNECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_9PFS_CONNECT) || \
    false)

static inline void _nocheck__trace_xen_9pfs_connect(char * name)
{
    if (trace_event_get_state(TRACE_XEN_9PFS_CONNECT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 54 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:xen_9pfs_connect " "name %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name);
#line 1669 "trace/trace-hw_9pfs.h"
        } else {
#line 54 "../hw/9pfs/trace-events"
            qemu_log("xen_9pfs_connect " "name %s" "\n", name);
#line 1673 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_xen_9pfs_connect(char * name)
{
    if (true) {
        _nocheck__trace_xen_9pfs_connect(name);
    }
}

#define TRACE_XEN_9PFS_DISCONNECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_9PFS_DISCONNECT) || \
    false)

static inline void _nocheck__trace_xen_9pfs_disconnect(char * name)
{
    if (trace_event_get_state(TRACE_XEN_9PFS_DISCONNECT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 55 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:xen_9pfs_disconnect " "name %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name);
#line 1700 "trace/trace-hw_9pfs.h"
        } else {
#line 55 "../hw/9pfs/trace-events"
            qemu_log("xen_9pfs_disconnect " "name %s" "\n", name);
#line 1704 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_xen_9pfs_disconnect(char * name)
{
    if (true) {
        _nocheck__trace_xen_9pfs_disconnect(name);
    }
}

#define TRACE_XEN_9PFS_FREE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_9PFS_FREE) || \
    false)

static inline void _nocheck__trace_xen_9pfs_free(char * name)
{
    if (trace_event_get_state(TRACE_XEN_9PFS_FREE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 56 "../hw/9pfs/trace-events"
            qemu_log("%d@%zu.%06zu:xen_9pfs_free " "name %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name);
#line 1731 "trace/trace-hw_9pfs.h"
        } else {
#line 56 "../hw/9pfs/trace-events"
            qemu_log("xen_9pfs_free " "name %s" "\n", name);
#line 1735 "trace/trace-hw_9pfs.h"
        }
    }
}

static inline void trace_xen_9pfs_free(char * name)
{
    if (true) {
        _nocheck__trace_xen_9pfs_free(name);
    }
}
#endif /* TRACE_HW_9PFS_GENERATED_TRACERS_H */
