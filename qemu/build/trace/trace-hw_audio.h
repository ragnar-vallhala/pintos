/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_AUDIO_GENERATED_TRACERS_H
#define TRACE_HW_AUDIO_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_CS4231_MEM_READL_DREG_EVENT;
extern TraceEvent _TRACE_CS4231_MEM_READL_REG_EVENT;
extern TraceEvent _TRACE_CS4231_MEM_WRITEL_REG_EVENT;
extern TraceEvent _TRACE_CS4231_MEM_WRITEL_DREG_EVENT;
extern TraceEvent _TRACE_ES1370_FRAME_ADDRESS_RD_EVENT;
extern TraceEvent _TRACE_ES1370_FRAME_ADDRESS_WR_EVENT;
extern TraceEvent _TRACE_ES1370_FRAME_COUNT_RD_EVENT;
extern TraceEvent _TRACE_ES1370_FRAME_COUNT_WR_EVENT;
extern TraceEvent _TRACE_ES1370_LOST_INTERRUPT_EVENT;
extern TraceEvent _TRACE_ES1370_SAMPLE_COUNT_RD_EVENT;
extern TraceEvent _TRACE_ES1370_SAMPLE_COUNT_WR_EVENT;
extern TraceEvent _TRACE_ES1370_STREAM_FORMAT_EVENT;
extern TraceEvent _TRACE_ES1370_TRANSFER_AUDIO_EVENT;
extern TraceEvent _TRACE_HDA_AUDIO_RUNNING_EVENT;
extern TraceEvent _TRACE_HDA_AUDIO_FORMAT_EVENT;
extern TraceEvent _TRACE_HDA_AUDIO_ADJUST_EVENT;
extern TraceEvent _TRACE_HDA_AUDIO_OVERRUN_EVENT;
extern TraceEvent _TRACE_VIA_AC97_CODEC_WRITE_EVENT;
extern TraceEvent _TRACE_VIA_AC97_SGD_FETCH_EVENT;
extern TraceEvent _TRACE_VIA_AC97_SGD_READ_EVENT;
extern TraceEvent _TRACE_VIA_AC97_SGD_WRITE_EVENT;
extern TraceEvent _TRACE_ASC_READ_FIFO_EVENT;
extern TraceEvent _TRACE_ASC_READ_REG_EVENT;
extern TraceEvent _TRACE_ASC_READ_EXTREG_EVENT;
extern TraceEvent _TRACE_ASC_FIFO_GET_EVENT;
extern TraceEvent _TRACE_ASC_WRITE_FIFO_EVENT;
extern TraceEvent _TRACE_ASC_WRITE_REG_EVENT;
extern TraceEvent _TRACE_ASC_WRITE_EXTREG_EVENT;
extern TraceEvent _TRACE_ASC_UPDATE_IRQ_EVENT;
extern TraceEvent _TRACE_VIRTIO_SND_GET_CONFIG_EVENT;
extern TraceEvent _TRACE_VIRTIO_SND_SET_CONFIG_EVENT;
extern TraceEvent _TRACE_VIRTIO_SND_GET_FEATURES_EVENT;
extern TraceEvent _TRACE_VIRTIO_SND_VM_STATE_RUNNING_EVENT;
extern TraceEvent _TRACE_VIRTIO_SND_VM_STATE_STOPPED_EVENT;
extern TraceEvent _TRACE_VIRTIO_SND_REALIZE_EVENT;
extern TraceEvent _TRACE_VIRTIO_SND_UNREALIZE_EVENT;
extern TraceEvent _TRACE_VIRTIO_SND_HANDLE_PCM_SET_PARAMS_EVENT;
extern TraceEvent _TRACE_VIRTIO_SND_HANDLE_CTRL_EVENT;
extern TraceEvent _TRACE_VIRTIO_SND_HANDLE_PCM_INFO_EVENT;
extern TraceEvent _TRACE_VIRTIO_SND_HANDLE_PCM_START_STOP_EVENT;
extern TraceEvent _TRACE_VIRTIO_SND_HANDLE_PCM_RELEASE_EVENT;
extern TraceEvent _TRACE_VIRTIO_SND_HANDLE_CODE_EVENT;
extern TraceEvent _TRACE_VIRTIO_SND_HANDLE_CHMAP_INFO_EVENT;
extern TraceEvent _TRACE_VIRTIO_SND_HANDLE_EVENT_EVENT;
extern TraceEvent _TRACE_VIRTIO_SND_PCM_STREAM_FLUSH_EVENT;
extern TraceEvent _TRACE_VIRTIO_SND_HANDLE_TX_XFER_EVENT;
extern TraceEvent _TRACE_VIRTIO_SND_HANDLE_RX_XFER_EVENT;
extern uint16_t _TRACE_CS4231_MEM_READL_DREG_DSTATE;
extern uint16_t _TRACE_CS4231_MEM_READL_REG_DSTATE;
extern uint16_t _TRACE_CS4231_MEM_WRITEL_REG_DSTATE;
extern uint16_t _TRACE_CS4231_MEM_WRITEL_DREG_DSTATE;
extern uint16_t _TRACE_ES1370_FRAME_ADDRESS_RD_DSTATE;
extern uint16_t _TRACE_ES1370_FRAME_ADDRESS_WR_DSTATE;
extern uint16_t _TRACE_ES1370_FRAME_COUNT_RD_DSTATE;
extern uint16_t _TRACE_ES1370_FRAME_COUNT_WR_DSTATE;
extern uint16_t _TRACE_ES1370_LOST_INTERRUPT_DSTATE;
extern uint16_t _TRACE_ES1370_SAMPLE_COUNT_RD_DSTATE;
extern uint16_t _TRACE_ES1370_SAMPLE_COUNT_WR_DSTATE;
extern uint16_t _TRACE_ES1370_STREAM_FORMAT_DSTATE;
extern uint16_t _TRACE_ES1370_TRANSFER_AUDIO_DSTATE;
extern uint16_t _TRACE_HDA_AUDIO_RUNNING_DSTATE;
extern uint16_t _TRACE_HDA_AUDIO_FORMAT_DSTATE;
extern uint16_t _TRACE_HDA_AUDIO_ADJUST_DSTATE;
extern uint16_t _TRACE_HDA_AUDIO_OVERRUN_DSTATE;
extern uint16_t _TRACE_VIA_AC97_CODEC_WRITE_DSTATE;
extern uint16_t _TRACE_VIA_AC97_SGD_FETCH_DSTATE;
extern uint16_t _TRACE_VIA_AC97_SGD_READ_DSTATE;
extern uint16_t _TRACE_VIA_AC97_SGD_WRITE_DSTATE;
extern uint16_t _TRACE_ASC_READ_FIFO_DSTATE;
extern uint16_t _TRACE_ASC_READ_REG_DSTATE;
extern uint16_t _TRACE_ASC_READ_EXTREG_DSTATE;
extern uint16_t _TRACE_ASC_FIFO_GET_DSTATE;
extern uint16_t _TRACE_ASC_WRITE_FIFO_DSTATE;
extern uint16_t _TRACE_ASC_WRITE_REG_DSTATE;
extern uint16_t _TRACE_ASC_WRITE_EXTREG_DSTATE;
extern uint16_t _TRACE_ASC_UPDATE_IRQ_DSTATE;
extern uint16_t _TRACE_VIRTIO_SND_GET_CONFIG_DSTATE;
extern uint16_t _TRACE_VIRTIO_SND_SET_CONFIG_DSTATE;
extern uint16_t _TRACE_VIRTIO_SND_GET_FEATURES_DSTATE;
extern uint16_t _TRACE_VIRTIO_SND_VM_STATE_RUNNING_DSTATE;
extern uint16_t _TRACE_VIRTIO_SND_VM_STATE_STOPPED_DSTATE;
extern uint16_t _TRACE_VIRTIO_SND_REALIZE_DSTATE;
extern uint16_t _TRACE_VIRTIO_SND_UNREALIZE_DSTATE;
extern uint16_t _TRACE_VIRTIO_SND_HANDLE_PCM_SET_PARAMS_DSTATE;
extern uint16_t _TRACE_VIRTIO_SND_HANDLE_CTRL_DSTATE;
extern uint16_t _TRACE_VIRTIO_SND_HANDLE_PCM_INFO_DSTATE;
extern uint16_t _TRACE_VIRTIO_SND_HANDLE_PCM_START_STOP_DSTATE;
extern uint16_t _TRACE_VIRTIO_SND_HANDLE_PCM_RELEASE_DSTATE;
extern uint16_t _TRACE_VIRTIO_SND_HANDLE_CODE_DSTATE;
extern uint16_t _TRACE_VIRTIO_SND_HANDLE_CHMAP_INFO_DSTATE;
extern uint16_t _TRACE_VIRTIO_SND_HANDLE_EVENT_DSTATE;
extern uint16_t _TRACE_VIRTIO_SND_PCM_STREAM_FLUSH_DSTATE;
extern uint16_t _TRACE_VIRTIO_SND_HANDLE_TX_XFER_DSTATE;
extern uint16_t _TRACE_VIRTIO_SND_HANDLE_RX_XFER_DSTATE;
#define TRACE_CS4231_MEM_READL_DREG_ENABLED 1
#define TRACE_CS4231_MEM_READL_REG_ENABLED 1
#define TRACE_CS4231_MEM_WRITEL_REG_ENABLED 1
#define TRACE_CS4231_MEM_WRITEL_DREG_ENABLED 1
#define TRACE_ES1370_FRAME_ADDRESS_RD_ENABLED 1
#define TRACE_ES1370_FRAME_ADDRESS_WR_ENABLED 1
#define TRACE_ES1370_FRAME_COUNT_RD_ENABLED 1
#define TRACE_ES1370_FRAME_COUNT_WR_ENABLED 1
#define TRACE_ES1370_LOST_INTERRUPT_ENABLED 1
#define TRACE_ES1370_SAMPLE_COUNT_RD_ENABLED 1
#define TRACE_ES1370_SAMPLE_COUNT_WR_ENABLED 1
#define TRACE_ES1370_STREAM_FORMAT_ENABLED 1
#define TRACE_ES1370_TRANSFER_AUDIO_ENABLED 1
#define TRACE_HDA_AUDIO_RUNNING_ENABLED 1
#define TRACE_HDA_AUDIO_FORMAT_ENABLED 1
#define TRACE_HDA_AUDIO_ADJUST_ENABLED 1
#define TRACE_HDA_AUDIO_OVERRUN_ENABLED 1
#define TRACE_VIA_AC97_CODEC_WRITE_ENABLED 1
#define TRACE_VIA_AC97_SGD_FETCH_ENABLED 1
#define TRACE_VIA_AC97_SGD_READ_ENABLED 1
#define TRACE_VIA_AC97_SGD_WRITE_ENABLED 1
#define TRACE_ASC_READ_FIFO_ENABLED 1
#define TRACE_ASC_READ_REG_ENABLED 1
#define TRACE_ASC_READ_EXTREG_ENABLED 1
#define TRACE_ASC_FIFO_GET_ENABLED 1
#define TRACE_ASC_WRITE_FIFO_ENABLED 1
#define TRACE_ASC_WRITE_REG_ENABLED 1
#define TRACE_ASC_WRITE_EXTREG_ENABLED 1
#define TRACE_ASC_UPDATE_IRQ_ENABLED 1
#define TRACE_VIRTIO_SND_GET_CONFIG_ENABLED 1
#define TRACE_VIRTIO_SND_SET_CONFIG_ENABLED 1
#define TRACE_VIRTIO_SND_GET_FEATURES_ENABLED 1
#define TRACE_VIRTIO_SND_VM_STATE_RUNNING_ENABLED 1
#define TRACE_VIRTIO_SND_VM_STATE_STOPPED_ENABLED 1
#define TRACE_VIRTIO_SND_REALIZE_ENABLED 1
#define TRACE_VIRTIO_SND_UNREALIZE_ENABLED 1
#define TRACE_VIRTIO_SND_HANDLE_PCM_SET_PARAMS_ENABLED 1
#define TRACE_VIRTIO_SND_HANDLE_CTRL_ENABLED 1
#define TRACE_VIRTIO_SND_HANDLE_PCM_INFO_ENABLED 1
#define TRACE_VIRTIO_SND_HANDLE_PCM_START_STOP_ENABLED 1
#define TRACE_VIRTIO_SND_HANDLE_PCM_RELEASE_ENABLED 1
#define TRACE_VIRTIO_SND_HANDLE_CODE_ENABLED 1
#define TRACE_VIRTIO_SND_HANDLE_CHMAP_INFO_ENABLED 1
#define TRACE_VIRTIO_SND_HANDLE_EVENT_ENABLED 1
#define TRACE_VIRTIO_SND_PCM_STREAM_FLUSH_ENABLED 1
#define TRACE_VIRTIO_SND_HANDLE_TX_XFER_ENABLED 1
#define TRACE_VIRTIO_SND_HANDLE_RX_XFER_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_CS4231_MEM_READL_DREG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CS4231_MEM_READL_DREG) || \
    false)

static inline void _nocheck__trace_cs4231_mem_readl_dreg(uint32_t reg, uint32_t ret)
{
    if (trace_event_get_state(TRACE_CS4231_MEM_READL_DREG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:cs4231_mem_readl_dreg " "read dreg %d: 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg, ret);
#line 169 "trace/trace-hw_audio.h"
        } else {
#line 4 "../hw/audio/trace-events"
            qemu_log("cs4231_mem_readl_dreg " "read dreg %d: 0x%02x" "\n", reg, ret);
#line 173 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_cs4231_mem_readl_dreg(uint32_t reg, uint32_t ret)
{
    if (true) {
        _nocheck__trace_cs4231_mem_readl_dreg(reg, ret);
    }
}

#define TRACE_CS4231_MEM_READL_REG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CS4231_MEM_READL_REG) || \
    false)

static inline void _nocheck__trace_cs4231_mem_readl_reg(uint32_t reg, uint32_t ret)
{
    if (trace_event_get_state(TRACE_CS4231_MEM_READL_REG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:cs4231_mem_readl_reg " "read reg %d: 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg, ret);
#line 200 "trace/trace-hw_audio.h"
        } else {
#line 5 "../hw/audio/trace-events"
            qemu_log("cs4231_mem_readl_reg " "read reg %d: 0x%08x" "\n", reg, ret);
#line 204 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_cs4231_mem_readl_reg(uint32_t reg, uint32_t ret)
{
    if (true) {
        _nocheck__trace_cs4231_mem_readl_reg(reg, ret);
    }
}

#define TRACE_CS4231_MEM_WRITEL_REG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CS4231_MEM_WRITEL_REG) || \
    false)

static inline void _nocheck__trace_cs4231_mem_writel_reg(uint32_t reg, uint32_t old, uint32_t val)
{
    if (trace_event_get_state(TRACE_CS4231_MEM_WRITEL_REG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:cs4231_mem_writel_reg " "write reg %d: 0x%08x -> 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg, old, val);
#line 231 "trace/trace-hw_audio.h"
        } else {
#line 6 "../hw/audio/trace-events"
            qemu_log("cs4231_mem_writel_reg " "write reg %d: 0x%08x -> 0x%08x" "\n", reg, old, val);
#line 235 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_cs4231_mem_writel_reg(uint32_t reg, uint32_t old, uint32_t val)
{
    if (true) {
        _nocheck__trace_cs4231_mem_writel_reg(reg, old, val);
    }
}

#define TRACE_CS4231_MEM_WRITEL_DREG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CS4231_MEM_WRITEL_DREG) || \
    false)

static inline void _nocheck__trace_cs4231_mem_writel_dreg(uint32_t reg, uint32_t old, uint32_t val)
{
    if (trace_event_get_state(TRACE_CS4231_MEM_WRITEL_DREG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:cs4231_mem_writel_dreg " "write dreg %d: 0x%02x -> 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg, old, val);
#line 262 "trace/trace-hw_audio.h"
        } else {
#line 7 "../hw/audio/trace-events"
            qemu_log("cs4231_mem_writel_dreg " "write dreg %d: 0x%02x -> 0x%02x" "\n", reg, old, val);
#line 266 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_cs4231_mem_writel_dreg(uint32_t reg, uint32_t old, uint32_t val)
{
    if (true) {
        _nocheck__trace_cs4231_mem_writel_dreg(reg, old, val);
    }
}

#define TRACE_ES1370_FRAME_ADDRESS_RD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ES1370_FRAME_ADDRESS_RD) || \
    false)

static inline void _nocheck__trace_es1370_frame_address_rd(int ch, uint32_t addr)
{
    if (trace_event_get_state(TRACE_ES1370_FRAME_ADDRESS_RD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:es1370_frame_address_rd " "ch=%d addr=0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ch, addr);
#line 293 "trace/trace-hw_audio.h"
        } else {
#line 10 "../hw/audio/trace-events"
            qemu_log("es1370_frame_address_rd " "ch=%d addr=0x%08x" "\n", ch, addr);
#line 297 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_es1370_frame_address_rd(int ch, uint32_t addr)
{
    if (true) {
        _nocheck__trace_es1370_frame_address_rd(ch, addr);
    }
}

#define TRACE_ES1370_FRAME_ADDRESS_WR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ES1370_FRAME_ADDRESS_WR) || \
    false)

static inline void _nocheck__trace_es1370_frame_address_wr(int ch, uint32_t addr)
{
    if (trace_event_get_state(TRACE_ES1370_FRAME_ADDRESS_WR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:es1370_frame_address_wr " "ch=%d addr=0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ch, addr);
#line 324 "trace/trace-hw_audio.h"
        } else {
#line 11 "../hw/audio/trace-events"
            qemu_log("es1370_frame_address_wr " "ch=%d addr=0x%08x" "\n", ch, addr);
#line 328 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_es1370_frame_address_wr(int ch, uint32_t addr)
{
    if (true) {
        _nocheck__trace_es1370_frame_address_wr(ch, addr);
    }
}

#define TRACE_ES1370_FRAME_COUNT_RD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ES1370_FRAME_COUNT_RD) || \
    false)

static inline void _nocheck__trace_es1370_frame_count_rd(int ch, uint32_t curr, uint32_t size)
{
    if (trace_event_get_state(TRACE_ES1370_FRAME_COUNT_RD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:es1370_frame_count_rd " "ch=%d CURR_CT=%u BUF_SIZE=%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ch, curr, size);
#line 355 "trace/trace-hw_audio.h"
        } else {
#line 12 "../hw/audio/trace-events"
            qemu_log("es1370_frame_count_rd " "ch=%d CURR_CT=%u BUF_SIZE=%u" "\n", ch, curr, size);
#line 359 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_es1370_frame_count_rd(int ch, uint32_t curr, uint32_t size)
{
    if (true) {
        _nocheck__trace_es1370_frame_count_rd(ch, curr, size);
    }
}

#define TRACE_ES1370_FRAME_COUNT_WR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ES1370_FRAME_COUNT_WR) || \
    false)

static inline void _nocheck__trace_es1370_frame_count_wr(int ch, uint32_t curr, uint32_t size)
{
    if (trace_event_get_state(TRACE_ES1370_FRAME_COUNT_WR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:es1370_frame_count_wr " "ch=%d CURR_CT=%u BUF_SIZE=%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ch, curr, size);
#line 386 "trace/trace-hw_audio.h"
        } else {
#line 13 "../hw/audio/trace-events"
            qemu_log("es1370_frame_count_wr " "ch=%d CURR_CT=%u BUF_SIZE=%u" "\n", ch, curr, size);
#line 390 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_es1370_frame_count_wr(int ch, uint32_t curr, uint32_t size)
{
    if (true) {
        _nocheck__trace_es1370_frame_count_wr(ch, curr, size);
    }
}

#define TRACE_ES1370_LOST_INTERRUPT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ES1370_LOST_INTERRUPT) || \
    false)

static inline void _nocheck__trace_es1370_lost_interrupt(int ch)
{
    if (trace_event_get_state(TRACE_ES1370_LOST_INTERRUPT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 14 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:es1370_lost_interrupt " "ch=%d lost interrupt" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ch);
#line 417 "trace/trace-hw_audio.h"
        } else {
#line 14 "../hw/audio/trace-events"
            qemu_log("es1370_lost_interrupt " "ch=%d lost interrupt" "\n", ch);
#line 421 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_es1370_lost_interrupt(int ch)
{
    if (true) {
        _nocheck__trace_es1370_lost_interrupt(ch);
    }
}

#define TRACE_ES1370_SAMPLE_COUNT_RD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ES1370_SAMPLE_COUNT_RD) || \
    false)

static inline void _nocheck__trace_es1370_sample_count_rd(int ch, uint32_t curr, uint32_t num)
{
    if (trace_event_get_state(TRACE_ES1370_SAMPLE_COUNT_RD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 15 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:es1370_sample_count_rd " "ch=%d CURR_SAMP_CT=%u SAMP_CT=%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ch, curr, num);
#line 448 "trace/trace-hw_audio.h"
        } else {
#line 15 "../hw/audio/trace-events"
            qemu_log("es1370_sample_count_rd " "ch=%d CURR_SAMP_CT=%u SAMP_CT=%u" "\n", ch, curr, num);
#line 452 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_es1370_sample_count_rd(int ch, uint32_t curr, uint32_t num)
{
    if (true) {
        _nocheck__trace_es1370_sample_count_rd(ch, curr, num);
    }
}

#define TRACE_ES1370_SAMPLE_COUNT_WR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ES1370_SAMPLE_COUNT_WR) || \
    false)

static inline void _nocheck__trace_es1370_sample_count_wr(int ch, uint32_t curr, uint32_t num)
{
    if (trace_event_get_state(TRACE_ES1370_SAMPLE_COUNT_WR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:es1370_sample_count_wr " "ch=%d CURR_SAMP_CT=%u SAMP_CT=%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ch, curr, num);
#line 479 "trace/trace-hw_audio.h"
        } else {
#line 16 "../hw/audio/trace-events"
            qemu_log("es1370_sample_count_wr " "ch=%d CURR_SAMP_CT=%u SAMP_CT=%u" "\n", ch, curr, num);
#line 483 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_es1370_sample_count_wr(int ch, uint32_t curr, uint32_t num)
{
    if (true) {
        _nocheck__trace_es1370_sample_count_wr(ch, curr, num);
    }
}

#define TRACE_ES1370_STREAM_FORMAT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ES1370_STREAM_FORMAT) || \
    false)

static inline void _nocheck__trace_es1370_stream_format(int ch, uint32_t freq, const char * fmt, const char * mode, uint32_t shift)
{
    if (trace_event_get_state(TRACE_ES1370_STREAM_FORMAT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 17 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:es1370_stream_format " "ch=%d fmt=%u:%s:%s shift=%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ch, freq, fmt, mode, shift);
#line 510 "trace/trace-hw_audio.h"
        } else {
#line 17 "../hw/audio/trace-events"
            qemu_log("es1370_stream_format " "ch=%d fmt=%u:%s:%s shift=%u" "\n", ch, freq, fmt, mode, shift);
#line 514 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_es1370_stream_format(int ch, uint32_t freq, const char * fmt, const char * mode, uint32_t shift)
{
    if (true) {
        _nocheck__trace_es1370_stream_format(ch, freq, fmt, mode, shift);
    }
}

#define TRACE_ES1370_TRANSFER_AUDIO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ES1370_TRANSFER_AUDIO) || \
    false)

static inline void _nocheck__trace_es1370_transfer_audio(int ch, uint32_t f_curr, uint32_t f_size, uint32_t s_curr, uint32_t s_num, uint32_t leftover, bool irq)
{
    if (trace_event_get_state(TRACE_ES1370_TRANSFER_AUDIO) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 18 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:es1370_transfer_audio " "ch=%d CURR_CT=%u BUF_SIZE=%u CURR_SAMP_CT=%u SAMP_CT=%u leftover=%u irq=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ch, f_curr, f_size, s_curr, s_num, leftover, irq);
#line 541 "trace/trace-hw_audio.h"
        } else {
#line 18 "../hw/audio/trace-events"
            qemu_log("es1370_transfer_audio " "ch=%d CURR_CT=%u BUF_SIZE=%u CURR_SAMP_CT=%u SAMP_CT=%u leftover=%u irq=%d" "\n", ch, f_curr, f_size, s_curr, s_num, leftover, irq);
#line 545 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_es1370_transfer_audio(int ch, uint32_t f_curr, uint32_t f_size, uint32_t s_curr, uint32_t s_num, uint32_t leftover, bool irq)
{
    if (true) {
        _nocheck__trace_es1370_transfer_audio(ch, f_curr, f_size, s_curr, s_num, leftover, irq);
    }
}

#define TRACE_HDA_AUDIO_RUNNING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_HDA_AUDIO_RUNNING) || \
    false)

static inline void _nocheck__trace_hda_audio_running(const char * stream, int nr, bool running)
{
    if (trace_event_get_state(TRACE_HDA_AUDIO_RUNNING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 21 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:hda_audio_running " "st %s, nr %d, run %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , stream, nr, running);
#line 572 "trace/trace-hw_audio.h"
        } else {
#line 21 "../hw/audio/trace-events"
            qemu_log("hda_audio_running " "st %s, nr %d, run %d" "\n", stream, nr, running);
#line 576 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_hda_audio_running(const char * stream, int nr, bool running)
{
    if (true) {
        _nocheck__trace_hda_audio_running(stream, nr, running);
    }
}

#define TRACE_HDA_AUDIO_FORMAT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_HDA_AUDIO_FORMAT) || \
    false)

static inline void _nocheck__trace_hda_audio_format(const char * stream, int chan, const char * fmt, int freq)
{
    if (trace_event_get_state(TRACE_HDA_AUDIO_FORMAT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 22 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:hda_audio_format " "st %s, %d x %s @ %d Hz" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , stream, chan, fmt, freq);
#line 603 "trace/trace-hw_audio.h"
        } else {
#line 22 "../hw/audio/trace-events"
            qemu_log("hda_audio_format " "st %s, %d x %s @ %d Hz" "\n", stream, chan, fmt, freq);
#line 607 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_hda_audio_format(const char * stream, int chan, const char * fmt, int freq)
{
    if (true) {
        _nocheck__trace_hda_audio_format(stream, chan, fmt, freq);
    }
}

#define TRACE_HDA_AUDIO_ADJUST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_HDA_AUDIO_ADJUST) || \
    false)

static inline void _nocheck__trace_hda_audio_adjust(const char * stream, int pos)
{
    if (trace_event_get_state(TRACE_HDA_AUDIO_ADJUST) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 23 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:hda_audio_adjust " "st %s, pos %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , stream, pos);
#line 634 "trace/trace-hw_audio.h"
        } else {
#line 23 "../hw/audio/trace-events"
            qemu_log("hda_audio_adjust " "st %s, pos %d" "\n", stream, pos);
#line 638 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_hda_audio_adjust(const char * stream, int pos)
{
    if (true) {
        _nocheck__trace_hda_audio_adjust(stream, pos);
    }
}

#define TRACE_HDA_AUDIO_OVERRUN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_HDA_AUDIO_OVERRUN) || \
    false)

static inline void _nocheck__trace_hda_audio_overrun(const char * stream)
{
    if (trace_event_get_state(TRACE_HDA_AUDIO_OVERRUN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 24 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:hda_audio_overrun " "st %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , stream);
#line 665 "trace/trace-hw_audio.h"
        } else {
#line 24 "../hw/audio/trace-events"
            qemu_log("hda_audio_overrun " "st %s" "\n", stream);
#line 669 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_hda_audio_overrun(const char * stream)
{
    if (true) {
        _nocheck__trace_hda_audio_overrun(stream);
    }
}

#define TRACE_VIA_AC97_CODEC_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA_AC97_CODEC_WRITE) || \
    false)

static inline void _nocheck__trace_via_ac97_codec_write(uint8_t addr, uint16_t val)
{
    if (trace_event_get_state(TRACE_VIA_AC97_CODEC_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 27 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:via_ac97_codec_write " "0x%x <- 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val);
#line 696 "trace/trace-hw_audio.h"
        } else {
#line 27 "../hw/audio/trace-events"
            qemu_log("via_ac97_codec_write " "0x%x <- 0x%x" "\n", addr, val);
#line 700 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_via_ac97_codec_write(uint8_t addr, uint16_t val)
{
    if (true) {
        _nocheck__trace_via_ac97_codec_write(addr, val);
    }
}

#define TRACE_VIA_AC97_SGD_FETCH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA_AC97_SGD_FETCH) || \
    false)

static inline void _nocheck__trace_via_ac97_sgd_fetch(uint32_t curr, uint32_t addr, char stop, char eol, char flag, uint32_t len)
{
    if (trace_event_get_state(TRACE_VIA_AC97_SGD_FETCH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 28 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:via_ac97_sgd_fetch " "curr=0x%x addr=0x%x %c%c%c len=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , curr, addr, stop, eol, flag, len);
#line 727 "trace/trace-hw_audio.h"
        } else {
#line 28 "../hw/audio/trace-events"
            qemu_log("via_ac97_sgd_fetch " "curr=0x%x addr=0x%x %c%c%c len=%d" "\n", curr, addr, stop, eol, flag, len);
#line 731 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_via_ac97_sgd_fetch(uint32_t curr, uint32_t addr, char stop, char eol, char flag, uint32_t len)
{
    if (true) {
        _nocheck__trace_via_ac97_sgd_fetch(curr, addr, stop, eol, flag, len);
    }
}

#define TRACE_VIA_AC97_SGD_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA_AC97_SGD_READ) || \
    false)

static inline void _nocheck__trace_via_ac97_sgd_read(uint64_t addr, unsigned size, uint64_t val)
{
    if (trace_event_get_state(TRACE_VIA_AC97_SGD_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 29 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:via_ac97_sgd_read " "0x%"PRIx64" %d -> 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size, val);
#line 758 "trace/trace-hw_audio.h"
        } else {
#line 29 "../hw/audio/trace-events"
            qemu_log("via_ac97_sgd_read " "0x%"PRIx64" %d -> 0x%"PRIx64 "\n", addr, size, val);
#line 762 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_via_ac97_sgd_read(uint64_t addr, unsigned size, uint64_t val)
{
    if (true) {
        _nocheck__trace_via_ac97_sgd_read(addr, size, val);
    }
}

#define TRACE_VIA_AC97_SGD_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA_AC97_SGD_WRITE) || \
    false)

static inline void _nocheck__trace_via_ac97_sgd_write(uint64_t addr, unsigned size, uint64_t val)
{
    if (trace_event_get_state(TRACE_VIA_AC97_SGD_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 30 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:via_ac97_sgd_write " "0x%"PRIx64" %d <- 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size, val);
#line 789 "trace/trace-hw_audio.h"
        } else {
#line 30 "../hw/audio/trace-events"
            qemu_log("via_ac97_sgd_write " "0x%"PRIx64" %d <- 0x%"PRIx64 "\n", addr, size, val);
#line 793 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_via_ac97_sgd_write(uint64_t addr, unsigned size, uint64_t val)
{
    if (true) {
        _nocheck__trace_via_ac97_sgd_write(addr, size, val);
    }
}

#define TRACE_ASC_READ_FIFO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASC_READ_FIFO) || \
    false)

static inline void _nocheck__trace_asc_read_fifo(const char fifo, int reg, unsigned size, uint64_t value)
{
    if (trace_event_get_state(TRACE_ASC_READ_FIFO) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 33 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:asc_read_fifo " "fifo %c reg=0x%03x size=%u value=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , fifo, reg, size, value);
#line 820 "trace/trace-hw_audio.h"
        } else {
#line 33 "../hw/audio/trace-events"
            qemu_log("asc_read_fifo " "fifo %c reg=0x%03x size=%u value=0x%"PRIx64 "\n", fifo, reg, size, value);
#line 824 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_asc_read_fifo(const char fifo, int reg, unsigned size, uint64_t value)
{
    if (true) {
        _nocheck__trace_asc_read_fifo(fifo, reg, size, value);
    }
}

#define TRACE_ASC_READ_REG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASC_READ_REG) || \
    false)

static inline void _nocheck__trace_asc_read_reg(int reg, unsigned size, uint64_t value)
{
    if (trace_event_get_state(TRACE_ASC_READ_REG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 34 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:asc_read_reg " "reg=0x%03x size=%u value=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg, size, value);
#line 851 "trace/trace-hw_audio.h"
        } else {
#line 34 "../hw/audio/trace-events"
            qemu_log("asc_read_reg " "reg=0x%03x size=%u value=0x%"PRIx64 "\n", reg, size, value);
#line 855 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_asc_read_reg(int reg, unsigned size, uint64_t value)
{
    if (true) {
        _nocheck__trace_asc_read_reg(reg, size, value);
    }
}

#define TRACE_ASC_READ_EXTREG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASC_READ_EXTREG) || \
    false)

static inline void _nocheck__trace_asc_read_extreg(const char fifo, int reg, unsigned size, uint64_t value)
{
    if (trace_event_get_state(TRACE_ASC_READ_EXTREG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 35 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:asc_read_extreg " "fifo %c reg=0x%03x size=%u value=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , fifo, reg, size, value);
#line 882 "trace/trace-hw_audio.h"
        } else {
#line 35 "../hw/audio/trace-events"
            qemu_log("asc_read_extreg " "fifo %c reg=0x%03x size=%u value=0x%"PRIx64 "\n", fifo, reg, size, value);
#line 886 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_asc_read_extreg(const char fifo, int reg, unsigned size, uint64_t value)
{
    if (true) {
        _nocheck__trace_asc_read_extreg(fifo, reg, size, value);
    }
}

#define TRACE_ASC_FIFO_GET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASC_FIFO_GET) || \
    false)

static inline void _nocheck__trace_asc_fifo_get(const char fifo, int rptr, int cnt, uint64_t value)
{
    if (trace_event_get_state(TRACE_ASC_FIFO_GET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 36 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:asc_fifo_get " "fifo %c rptr=0x%x cnt=0x%x value=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , fifo, rptr, cnt, value);
#line 913 "trace/trace-hw_audio.h"
        } else {
#line 36 "../hw/audio/trace-events"
            qemu_log("asc_fifo_get " "fifo %c rptr=0x%x cnt=0x%x value=0x%"PRIx64 "\n", fifo, rptr, cnt, value);
#line 917 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_asc_fifo_get(const char fifo, int rptr, int cnt, uint64_t value)
{
    if (true) {
        _nocheck__trace_asc_fifo_get(fifo, rptr, cnt, value);
    }
}

#define TRACE_ASC_WRITE_FIFO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASC_WRITE_FIFO) || \
    false)

static inline void _nocheck__trace_asc_write_fifo(const char fifo, int reg, unsigned size, int wrptr, int cnt, uint64_t value)
{
    if (trace_event_get_state(TRACE_ASC_WRITE_FIFO) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 37 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:asc_write_fifo " "fifo %c reg=0x%03x size=%u wptr=0x%x cnt=0x%x value=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , fifo, reg, size, wrptr, cnt, value);
#line 944 "trace/trace-hw_audio.h"
        } else {
#line 37 "../hw/audio/trace-events"
            qemu_log("asc_write_fifo " "fifo %c reg=0x%03x size=%u wptr=0x%x cnt=0x%x value=0x%"PRIx64 "\n", fifo, reg, size, wrptr, cnt, value);
#line 948 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_asc_write_fifo(const char fifo, int reg, unsigned size, int wrptr, int cnt, uint64_t value)
{
    if (true) {
        _nocheck__trace_asc_write_fifo(fifo, reg, size, wrptr, cnt, value);
    }
}

#define TRACE_ASC_WRITE_REG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASC_WRITE_REG) || \
    false)

static inline void _nocheck__trace_asc_write_reg(int reg, unsigned size, uint64_t value)
{
    if (trace_event_get_state(TRACE_ASC_WRITE_REG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 38 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:asc_write_reg " "reg=0x%03x size=%u value=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg, size, value);
#line 975 "trace/trace-hw_audio.h"
        } else {
#line 38 "../hw/audio/trace-events"
            qemu_log("asc_write_reg " "reg=0x%03x size=%u value=0x%"PRIx64 "\n", reg, size, value);
#line 979 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_asc_write_reg(int reg, unsigned size, uint64_t value)
{
    if (true) {
        _nocheck__trace_asc_write_reg(reg, size, value);
    }
}

#define TRACE_ASC_WRITE_EXTREG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASC_WRITE_EXTREG) || \
    false)

static inline void _nocheck__trace_asc_write_extreg(const char fifo, int reg, unsigned size, uint64_t value)
{
    if (trace_event_get_state(TRACE_ASC_WRITE_EXTREG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 39 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:asc_write_extreg " "fifo %c reg=0x%03x size=%u value=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , fifo, reg, size, value);
#line 1006 "trace/trace-hw_audio.h"
        } else {
#line 39 "../hw/audio/trace-events"
            qemu_log("asc_write_extreg " "fifo %c reg=0x%03x size=%u value=0x%"PRIx64 "\n", fifo, reg, size, value);
#line 1010 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_asc_write_extreg(const char fifo, int reg, unsigned size, uint64_t value)
{
    if (true) {
        _nocheck__trace_asc_write_extreg(fifo, reg, size, value);
    }
}

#define TRACE_ASC_UPDATE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASC_UPDATE_IRQ) || \
    false)

static inline void _nocheck__trace_asc_update_irq(int irq, int a, int b)
{
    if (trace_event_get_state(TRACE_ASC_UPDATE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 40 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:asc_update_irq " "set IRQ to %d (A: 0x%x B: 0x%x)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq, a, b);
#line 1037 "trace/trace-hw_audio.h"
        } else {
#line 40 "../hw/audio/trace-events"
            qemu_log("asc_update_irq " "set IRQ to %d (A: 0x%x B: 0x%x)" "\n", irq, a, b);
#line 1041 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_asc_update_irq(int irq, int a, int b)
{
    if (true) {
        _nocheck__trace_asc_update_irq(irq, a, b);
    }
}

#define TRACE_VIRTIO_SND_GET_CONFIG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRTIO_SND_GET_CONFIG) || \
    false)

static inline void _nocheck__trace_virtio_snd_get_config(void * vdev, uint32_t jacks, uint32_t streams, uint32_t chmaps)
{
    if (trace_event_get_state(TRACE_VIRTIO_SND_GET_CONFIG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 43 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:virtio_snd_get_config " "snd %p: get_config jacks=%"PRIu32" streams=%"PRIu32" chmaps=%"PRIu32"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , vdev, jacks, streams, chmaps);
#line 1068 "trace/trace-hw_audio.h"
        } else {
#line 43 "../hw/audio/trace-events"
            qemu_log("virtio_snd_get_config " "snd %p: get_config jacks=%"PRIu32" streams=%"PRIu32" chmaps=%"PRIu32"" "\n", vdev, jacks, streams, chmaps);
#line 1072 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_virtio_snd_get_config(void * vdev, uint32_t jacks, uint32_t streams, uint32_t chmaps)
{
    if (true) {
        _nocheck__trace_virtio_snd_get_config(vdev, jacks, streams, chmaps);
    }
}

#define TRACE_VIRTIO_SND_SET_CONFIG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRTIO_SND_SET_CONFIG) || \
    false)

static inline void _nocheck__trace_virtio_snd_set_config(void * vdev, uint32_t jacks, uint32_t new_jacks, uint32_t streams, uint32_t new_streams, uint32_t chmaps, uint32_t new_chmaps)
{
    if (trace_event_get_state(TRACE_VIRTIO_SND_SET_CONFIG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 44 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:virtio_snd_set_config " "snd %p: set_config jacks from %"PRIu32"->%"PRIu32", streams from %"PRIu32"->%"PRIu32", chmaps from %"PRIu32"->%"PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , vdev, jacks, new_jacks, streams, new_streams, chmaps, new_chmaps);
#line 1099 "trace/trace-hw_audio.h"
        } else {
#line 44 "../hw/audio/trace-events"
            qemu_log("virtio_snd_set_config " "snd %p: set_config jacks from %"PRIu32"->%"PRIu32", streams from %"PRIu32"->%"PRIu32", chmaps from %"PRIu32"->%"PRIu32 "\n", vdev, jacks, new_jacks, streams, new_streams, chmaps, new_chmaps);
#line 1103 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_virtio_snd_set_config(void * vdev, uint32_t jacks, uint32_t new_jacks, uint32_t streams, uint32_t new_streams, uint32_t chmaps, uint32_t new_chmaps)
{
    if (true) {
        _nocheck__trace_virtio_snd_set_config(vdev, jacks, new_jacks, streams, new_streams, chmaps, new_chmaps);
    }
}

#define TRACE_VIRTIO_SND_GET_FEATURES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRTIO_SND_GET_FEATURES) || \
    false)

static inline void _nocheck__trace_virtio_snd_get_features(void * vdev, uint64_t features)
{
    if (trace_event_get_state(TRACE_VIRTIO_SND_GET_FEATURES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 45 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:virtio_snd_get_features " "snd %p: get_features 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , vdev, features);
#line 1130 "trace/trace-hw_audio.h"
        } else {
#line 45 "../hw/audio/trace-events"
            qemu_log("virtio_snd_get_features " "snd %p: get_features 0x%"PRIx64 "\n", vdev, features);
#line 1134 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_virtio_snd_get_features(void * vdev, uint64_t features)
{
    if (true) {
        _nocheck__trace_virtio_snd_get_features(vdev, features);
    }
}

#define TRACE_VIRTIO_SND_VM_STATE_RUNNING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRTIO_SND_VM_STATE_RUNNING) || \
    false)

static inline void _nocheck__trace_virtio_snd_vm_state_running(void)
{
    if (trace_event_get_state(TRACE_VIRTIO_SND_VM_STATE_RUNNING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 46 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:virtio_snd_vm_state_running " "vm state running" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1161 "trace/trace-hw_audio.h"
        } else {
#line 46 "../hw/audio/trace-events"
            qemu_log("virtio_snd_vm_state_running " "vm state running" "\n");
#line 1165 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_virtio_snd_vm_state_running(void)
{
    if (true) {
        _nocheck__trace_virtio_snd_vm_state_running();
    }
}

#define TRACE_VIRTIO_SND_VM_STATE_STOPPED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRTIO_SND_VM_STATE_STOPPED) || \
    false)

static inline void _nocheck__trace_virtio_snd_vm_state_stopped(void)
{
    if (trace_event_get_state(TRACE_VIRTIO_SND_VM_STATE_STOPPED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 47 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:virtio_snd_vm_state_stopped " "vm state stopped" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1192 "trace/trace-hw_audio.h"
        } else {
#line 47 "../hw/audio/trace-events"
            qemu_log("virtio_snd_vm_state_stopped " "vm state stopped" "\n");
#line 1196 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_virtio_snd_vm_state_stopped(void)
{
    if (true) {
        _nocheck__trace_virtio_snd_vm_state_stopped();
    }
}

#define TRACE_VIRTIO_SND_REALIZE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRTIO_SND_REALIZE) || \
    false)

static inline void _nocheck__trace_virtio_snd_realize(void * snd)
{
    if (trace_event_get_state(TRACE_VIRTIO_SND_REALIZE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 48 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:virtio_snd_realize " "snd %p: realize" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , snd);
#line 1223 "trace/trace-hw_audio.h"
        } else {
#line 48 "../hw/audio/trace-events"
            qemu_log("virtio_snd_realize " "snd %p: realize" "\n", snd);
#line 1227 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_virtio_snd_realize(void * snd)
{
    if (true) {
        _nocheck__trace_virtio_snd_realize(snd);
    }
}

#define TRACE_VIRTIO_SND_UNREALIZE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRTIO_SND_UNREALIZE) || \
    false)

static inline void _nocheck__trace_virtio_snd_unrealize(void * snd)
{
    if (trace_event_get_state(TRACE_VIRTIO_SND_UNREALIZE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 49 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:virtio_snd_unrealize " "snd %p: unrealize" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , snd);
#line 1254 "trace/trace-hw_audio.h"
        } else {
#line 49 "../hw/audio/trace-events"
            qemu_log("virtio_snd_unrealize " "snd %p: unrealize" "\n", snd);
#line 1258 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_virtio_snd_unrealize(void * snd)
{
    if (true) {
        _nocheck__trace_virtio_snd_unrealize(snd);
    }
}

#define TRACE_VIRTIO_SND_HANDLE_PCM_SET_PARAMS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRTIO_SND_HANDLE_PCM_SET_PARAMS) || \
    false)

static inline void _nocheck__trace_virtio_snd_handle_pcm_set_params(uint32_t stream)
{
    if (trace_event_get_state(TRACE_VIRTIO_SND_HANDLE_PCM_SET_PARAMS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 50 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:virtio_snd_handle_pcm_set_params " "VIRTIO_SND_PCM_SET_PARAMS called for stream %"PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , stream);
#line 1285 "trace/trace-hw_audio.h"
        } else {
#line 50 "../hw/audio/trace-events"
            qemu_log("virtio_snd_handle_pcm_set_params " "VIRTIO_SND_PCM_SET_PARAMS called for stream %"PRIu32 "\n", stream);
#line 1289 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_virtio_snd_handle_pcm_set_params(uint32_t stream)
{
    if (true) {
        _nocheck__trace_virtio_snd_handle_pcm_set_params(stream);
    }
}

#define TRACE_VIRTIO_SND_HANDLE_CTRL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRTIO_SND_HANDLE_CTRL) || \
    false)

static inline void _nocheck__trace_virtio_snd_handle_ctrl(void * vdev, void * vq)
{
    if (trace_event_get_state(TRACE_VIRTIO_SND_HANDLE_CTRL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 51 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:virtio_snd_handle_ctrl " "snd %p: handle ctrl event for queue %p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , vdev, vq);
#line 1316 "trace/trace-hw_audio.h"
        } else {
#line 51 "../hw/audio/trace-events"
            qemu_log("virtio_snd_handle_ctrl " "snd %p: handle ctrl event for queue %p" "\n", vdev, vq);
#line 1320 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_virtio_snd_handle_ctrl(void * vdev, void * vq)
{
    if (true) {
        _nocheck__trace_virtio_snd_handle_ctrl(vdev, vq);
    }
}

#define TRACE_VIRTIO_SND_HANDLE_PCM_INFO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRTIO_SND_HANDLE_PCM_INFO) || \
    false)

static inline void _nocheck__trace_virtio_snd_handle_pcm_info(uint32_t stream)
{
    if (trace_event_get_state(TRACE_VIRTIO_SND_HANDLE_PCM_INFO) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 52 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:virtio_snd_handle_pcm_info " "VIRTIO_SND_R_PCM_INFO called for stream %"PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , stream);
#line 1347 "trace/trace-hw_audio.h"
        } else {
#line 52 "../hw/audio/trace-events"
            qemu_log("virtio_snd_handle_pcm_info " "VIRTIO_SND_R_PCM_INFO called for stream %"PRIu32 "\n", stream);
#line 1351 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_virtio_snd_handle_pcm_info(uint32_t stream)
{
    if (true) {
        _nocheck__trace_virtio_snd_handle_pcm_info(stream);
    }
}

#define TRACE_VIRTIO_SND_HANDLE_PCM_START_STOP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRTIO_SND_HANDLE_PCM_START_STOP) || \
    false)

static inline void _nocheck__trace_virtio_snd_handle_pcm_start_stop(const char * code, uint32_t stream)
{
    if (trace_event_get_state(TRACE_VIRTIO_SND_HANDLE_PCM_START_STOP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 53 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:virtio_snd_handle_pcm_start_stop " "%s called for stream %"PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , code, stream);
#line 1378 "trace/trace-hw_audio.h"
        } else {
#line 53 "../hw/audio/trace-events"
            qemu_log("virtio_snd_handle_pcm_start_stop " "%s called for stream %"PRIu32 "\n", code, stream);
#line 1382 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_virtio_snd_handle_pcm_start_stop(const char * code, uint32_t stream)
{
    if (true) {
        _nocheck__trace_virtio_snd_handle_pcm_start_stop(code, stream);
    }
}

#define TRACE_VIRTIO_SND_HANDLE_PCM_RELEASE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRTIO_SND_HANDLE_PCM_RELEASE) || \
    false)

static inline void _nocheck__trace_virtio_snd_handle_pcm_release(uint32_t stream)
{
    if (trace_event_get_state(TRACE_VIRTIO_SND_HANDLE_PCM_RELEASE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 54 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:virtio_snd_handle_pcm_release " "VIRTIO_SND_PCM_RELEASE called for stream %"PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , stream);
#line 1409 "trace/trace-hw_audio.h"
        } else {
#line 54 "../hw/audio/trace-events"
            qemu_log("virtio_snd_handle_pcm_release " "VIRTIO_SND_PCM_RELEASE called for stream %"PRIu32 "\n", stream);
#line 1413 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_virtio_snd_handle_pcm_release(uint32_t stream)
{
    if (true) {
        _nocheck__trace_virtio_snd_handle_pcm_release(stream);
    }
}

#define TRACE_VIRTIO_SND_HANDLE_CODE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRTIO_SND_HANDLE_CODE) || \
    false)

static inline void _nocheck__trace_virtio_snd_handle_code(uint32_t val, const char * code)
{
    if (trace_event_get_state(TRACE_VIRTIO_SND_HANDLE_CODE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 55 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:virtio_snd_handle_code " "ctrl code msg val = %"PRIu32" == %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val, code);
#line 1440 "trace/trace-hw_audio.h"
        } else {
#line 55 "../hw/audio/trace-events"
            qemu_log("virtio_snd_handle_code " "ctrl code msg val = %"PRIu32" == %s" "\n", val, code);
#line 1444 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_virtio_snd_handle_code(uint32_t val, const char * code)
{
    if (true) {
        _nocheck__trace_virtio_snd_handle_code(val, code);
    }
}

#define TRACE_VIRTIO_SND_HANDLE_CHMAP_INFO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRTIO_SND_HANDLE_CHMAP_INFO) || \
    false)

static inline void _nocheck__trace_virtio_snd_handle_chmap_info(void)
{
    if (trace_event_get_state(TRACE_VIRTIO_SND_HANDLE_CHMAP_INFO) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 56 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:virtio_snd_handle_chmap_info " "VIRTIO_SND_CHMAP_INFO called" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1471 "trace/trace-hw_audio.h"
        } else {
#line 56 "../hw/audio/trace-events"
            qemu_log("virtio_snd_handle_chmap_info " "VIRTIO_SND_CHMAP_INFO called" "\n");
#line 1475 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_virtio_snd_handle_chmap_info(void)
{
    if (true) {
        _nocheck__trace_virtio_snd_handle_chmap_info();
    }
}

#define TRACE_VIRTIO_SND_HANDLE_EVENT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRTIO_SND_HANDLE_EVENT) || \
    false)

static inline void _nocheck__trace_virtio_snd_handle_event(void)
{
    if (trace_event_get_state(TRACE_VIRTIO_SND_HANDLE_EVENT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 57 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:virtio_snd_handle_event " "event queue callback called" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1502 "trace/trace-hw_audio.h"
        } else {
#line 57 "../hw/audio/trace-events"
            qemu_log("virtio_snd_handle_event " "event queue callback called" "\n");
#line 1506 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_virtio_snd_handle_event(void)
{
    if (true) {
        _nocheck__trace_virtio_snd_handle_event();
    }
}

#define TRACE_VIRTIO_SND_PCM_STREAM_FLUSH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRTIO_SND_PCM_STREAM_FLUSH) || \
    false)

static inline void _nocheck__trace_virtio_snd_pcm_stream_flush(uint32_t stream)
{
    if (trace_event_get_state(TRACE_VIRTIO_SND_PCM_STREAM_FLUSH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 58 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:virtio_snd_pcm_stream_flush " "flushing stream %"PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , stream);
#line 1533 "trace/trace-hw_audio.h"
        } else {
#line 58 "../hw/audio/trace-events"
            qemu_log("virtio_snd_pcm_stream_flush " "flushing stream %"PRIu32 "\n", stream);
#line 1537 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_virtio_snd_pcm_stream_flush(uint32_t stream)
{
    if (true) {
        _nocheck__trace_virtio_snd_pcm_stream_flush(stream);
    }
}

#define TRACE_VIRTIO_SND_HANDLE_TX_XFER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRTIO_SND_HANDLE_TX_XFER) || \
    false)

static inline void _nocheck__trace_virtio_snd_handle_tx_xfer(void)
{
    if (trace_event_get_state(TRACE_VIRTIO_SND_HANDLE_TX_XFER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 59 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:virtio_snd_handle_tx_xfer " "tx queue callback called" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1564 "trace/trace-hw_audio.h"
        } else {
#line 59 "../hw/audio/trace-events"
            qemu_log("virtio_snd_handle_tx_xfer " "tx queue callback called" "\n");
#line 1568 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_virtio_snd_handle_tx_xfer(void)
{
    if (true) {
        _nocheck__trace_virtio_snd_handle_tx_xfer();
    }
}

#define TRACE_VIRTIO_SND_HANDLE_RX_XFER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRTIO_SND_HANDLE_RX_XFER) || \
    false)

static inline void _nocheck__trace_virtio_snd_handle_rx_xfer(void)
{
    if (trace_event_get_state(TRACE_VIRTIO_SND_HANDLE_RX_XFER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 60 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:virtio_snd_handle_rx_xfer " "rx queue callback called" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1595 "trace/trace-hw_audio.h"
        } else {
#line 60 "../hw/audio/trace-events"
            qemu_log("virtio_snd_handle_rx_xfer " "rx queue callback called" "\n");
#line 1599 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_virtio_snd_handle_rx_xfer(void)
{
    if (true) {
        _nocheck__trace_virtio_snd_handle_rx_xfer();
    }
}
#endif /* TRACE_HW_AUDIO_GENERATED_TRACERS_H */
