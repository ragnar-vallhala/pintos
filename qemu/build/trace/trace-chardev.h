/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_CHARDEV_GENERATED_TRACERS_H
#define TRACE_CHARDEV_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_WCT_INIT_EVENT;
extern TraceEvent _TRACE_WCT_CMD_RE_EVENT;
extern TraceEvent _TRACE_WCT_CMD_ST_EVENT;
extern TraceEvent _TRACE_WCT_CMD_SP_EVENT;
extern TraceEvent _TRACE_WCT_CMD_TS_EVENT;
extern TraceEvent _TRACE_WCT_CMD_OTHER_EVENT;
extern TraceEvent _TRACE_WCT_SPEED_EVENT;
extern TraceEvent _TRACE_SPICE_CHR_DISCARD_WRITE_EVENT;
extern TraceEvent _TRACE_SPICE_VMC_WRITE_EVENT;
extern TraceEvent _TRACE_SPICE_VMC_READ_EVENT;
extern TraceEvent _TRACE_SPICE_VMC_REGISTER_INTERFACE_EVENT;
extern TraceEvent _TRACE_SPICE_VMC_UNREGISTER_INTERFACE_EVENT;
extern TraceEvent _TRACE_SPICE_VMC_EVENT_EVENT;
extern TraceEvent _TRACE_CHR_SOCKET_POLL_ERR_EVENT;
extern TraceEvent _TRACE_CHR_SOCKET_RECV_ERR_EVENT;
extern TraceEvent _TRACE_CHR_SOCKET_RECV_EOF_EVENT;
extern TraceEvent _TRACE_CHR_SOCKET_WRITE_ERR_EVENT;
extern TraceEvent _TRACE_CHR_SOCKET_DISCONNECT_EVENT;
extern TraceEvent _TRACE_CHR_SOCKET_HANGUP_EVENT;
extern TraceEvent _TRACE_CHR_SOCKET_WS_HANDSHAKE_ERR_EVENT;
extern TraceEvent _TRACE_CHR_SOCKET_TLS_HANDSHAKE_ERR_EVENT;
extern TraceEvent _TRACE_CHR_SOCKET_TLS_INIT_ERR_EVENT;
extern uint16_t _TRACE_WCT_INIT_DSTATE;
extern uint16_t _TRACE_WCT_CMD_RE_DSTATE;
extern uint16_t _TRACE_WCT_CMD_ST_DSTATE;
extern uint16_t _TRACE_WCT_CMD_SP_DSTATE;
extern uint16_t _TRACE_WCT_CMD_TS_DSTATE;
extern uint16_t _TRACE_WCT_CMD_OTHER_DSTATE;
extern uint16_t _TRACE_WCT_SPEED_DSTATE;
extern uint16_t _TRACE_SPICE_CHR_DISCARD_WRITE_DSTATE;
extern uint16_t _TRACE_SPICE_VMC_WRITE_DSTATE;
extern uint16_t _TRACE_SPICE_VMC_READ_DSTATE;
extern uint16_t _TRACE_SPICE_VMC_REGISTER_INTERFACE_DSTATE;
extern uint16_t _TRACE_SPICE_VMC_UNREGISTER_INTERFACE_DSTATE;
extern uint16_t _TRACE_SPICE_VMC_EVENT_DSTATE;
extern uint16_t _TRACE_CHR_SOCKET_POLL_ERR_DSTATE;
extern uint16_t _TRACE_CHR_SOCKET_RECV_ERR_DSTATE;
extern uint16_t _TRACE_CHR_SOCKET_RECV_EOF_DSTATE;
extern uint16_t _TRACE_CHR_SOCKET_WRITE_ERR_DSTATE;
extern uint16_t _TRACE_CHR_SOCKET_DISCONNECT_DSTATE;
extern uint16_t _TRACE_CHR_SOCKET_HANGUP_DSTATE;
extern uint16_t _TRACE_CHR_SOCKET_WS_HANDSHAKE_ERR_DSTATE;
extern uint16_t _TRACE_CHR_SOCKET_TLS_HANDSHAKE_ERR_DSTATE;
extern uint16_t _TRACE_CHR_SOCKET_TLS_INIT_ERR_DSTATE;
#define TRACE_WCT_INIT_ENABLED 1
#define TRACE_WCT_CMD_RE_ENABLED 1
#define TRACE_WCT_CMD_ST_ENABLED 1
#define TRACE_WCT_CMD_SP_ENABLED 1
#define TRACE_WCT_CMD_TS_ENABLED 1
#define TRACE_WCT_CMD_OTHER_ENABLED 1
#define TRACE_WCT_SPEED_ENABLED 1
#define TRACE_SPICE_CHR_DISCARD_WRITE_ENABLED 1
#define TRACE_SPICE_VMC_WRITE_ENABLED 1
#define TRACE_SPICE_VMC_READ_ENABLED 1
#define TRACE_SPICE_VMC_REGISTER_INTERFACE_ENABLED 1
#define TRACE_SPICE_VMC_UNREGISTER_INTERFACE_ENABLED 1
#define TRACE_SPICE_VMC_EVENT_ENABLED 1
#define TRACE_CHR_SOCKET_POLL_ERR_ENABLED 1
#define TRACE_CHR_SOCKET_RECV_ERR_ENABLED 1
#define TRACE_CHR_SOCKET_RECV_EOF_ENABLED 1
#define TRACE_CHR_SOCKET_WRITE_ERR_ENABLED 1
#define TRACE_CHR_SOCKET_DISCONNECT_ENABLED 1
#define TRACE_CHR_SOCKET_HANGUP_ENABLED 1
#define TRACE_CHR_SOCKET_WS_HANDSHAKE_ERR_ENABLED 1
#define TRACE_CHR_SOCKET_TLS_HANDSHAKE_ERR_ENABLED 1
#define TRACE_CHR_SOCKET_TLS_INIT_ERR_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_WCT_INIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_WCT_INIT) || \
    false)

static inline void _nocheck__trace_wct_init(void)
{
    if (trace_event_get_state(TRACE_WCT_INIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "../chardev/trace-events"
            qemu_log("%d@%zu.%06zu:wct_init " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 94 "trace/trace-chardev.h"
        } else {
#line 4 "../chardev/trace-events"
            qemu_log("wct_init " "" "\n");
#line 98 "trace/trace-chardev.h"
        }
    }
}

static inline void trace_wct_init(void)
{
    if (true) {
        _nocheck__trace_wct_init();
    }
}

#define TRACE_WCT_CMD_RE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_WCT_CMD_RE) || \
    false)

static inline void _nocheck__trace_wct_cmd_re(void)
{
    if (trace_event_get_state(TRACE_WCT_CMD_RE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "../chardev/trace-events"
            qemu_log("%d@%zu.%06zu:wct_cmd_re " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 125 "trace/trace-chardev.h"
        } else {
#line 5 "../chardev/trace-events"
            qemu_log("wct_cmd_re " "" "\n");
#line 129 "trace/trace-chardev.h"
        }
    }
}

static inline void trace_wct_cmd_re(void)
{
    if (true) {
        _nocheck__trace_wct_cmd_re();
    }
}

#define TRACE_WCT_CMD_ST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_WCT_CMD_ST) || \
    false)

static inline void _nocheck__trace_wct_cmd_st(void)
{
    if (trace_event_get_state(TRACE_WCT_CMD_ST) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "../chardev/trace-events"
            qemu_log("%d@%zu.%06zu:wct_cmd_st " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 156 "trace/trace-chardev.h"
        } else {
#line 6 "../chardev/trace-events"
            qemu_log("wct_cmd_st " "" "\n");
#line 160 "trace/trace-chardev.h"
        }
    }
}

static inline void trace_wct_cmd_st(void)
{
    if (true) {
        _nocheck__trace_wct_cmd_st();
    }
}

#define TRACE_WCT_CMD_SP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_WCT_CMD_SP) || \
    false)

static inline void _nocheck__trace_wct_cmd_sp(void)
{
    if (trace_event_get_state(TRACE_WCT_CMD_SP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "../chardev/trace-events"
            qemu_log("%d@%zu.%06zu:wct_cmd_sp " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 187 "trace/trace-chardev.h"
        } else {
#line 7 "../chardev/trace-events"
            qemu_log("wct_cmd_sp " "" "\n");
#line 191 "trace/trace-chardev.h"
        }
    }
}

static inline void trace_wct_cmd_sp(void)
{
    if (true) {
        _nocheck__trace_wct_cmd_sp();
    }
}

#define TRACE_WCT_CMD_TS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_WCT_CMD_TS) || \
    false)

static inline void _nocheck__trace_wct_cmd_ts(int input)
{
    if (trace_event_get_state(TRACE_WCT_CMD_TS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "../chardev/trace-events"
            qemu_log("%d@%zu.%06zu:wct_cmd_ts " "0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , input);
#line 218 "trace/trace-chardev.h"
        } else {
#line 8 "../chardev/trace-events"
            qemu_log("wct_cmd_ts " "0x%02x" "\n", input);
#line 222 "trace/trace-chardev.h"
        }
    }
}

static inline void trace_wct_cmd_ts(int input)
{
    if (true) {
        _nocheck__trace_wct_cmd_ts(input);
    }
}

#define TRACE_WCT_CMD_OTHER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_WCT_CMD_OTHER) || \
    false)

static inline void _nocheck__trace_wct_cmd_other(const char * cmd)
{
    if (trace_event_get_state(TRACE_WCT_CMD_OTHER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "../chardev/trace-events"
            qemu_log("%d@%zu.%06zu:wct_cmd_other " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cmd);
#line 249 "trace/trace-chardev.h"
        } else {
#line 9 "../chardev/trace-events"
            qemu_log("wct_cmd_other " "%s" "\n", cmd);
#line 253 "trace/trace-chardev.h"
        }
    }
}

static inline void trace_wct_cmd_other(const char * cmd)
{
    if (true) {
        _nocheck__trace_wct_cmd_other(cmd);
    }
}

#define TRACE_WCT_SPEED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_WCT_SPEED) || \
    false)

static inline void _nocheck__trace_wct_speed(int speed)
{
    if (trace_event_get_state(TRACE_WCT_SPEED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "../chardev/trace-events"
            qemu_log("%d@%zu.%06zu:wct_speed " "%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , speed);
#line 280 "trace/trace-chardev.h"
        } else {
#line 10 "../chardev/trace-events"
            qemu_log("wct_speed " "%d" "\n", speed);
#line 284 "trace/trace-chardev.h"
        }
    }
}

static inline void trace_wct_speed(int speed)
{
    if (true) {
        _nocheck__trace_wct_speed(speed);
    }
}

#define TRACE_SPICE_CHR_DISCARD_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPICE_CHR_DISCARD_WRITE) || \
    false)

static inline void _nocheck__trace_spice_chr_discard_write(int len)
{
    if (trace_event_get_state(TRACE_SPICE_CHR_DISCARD_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "../chardev/trace-events"
            qemu_log("%d@%zu.%06zu:spice_chr_discard_write " "spice chr write discarded %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , len);
#line 311 "trace/trace-chardev.h"
        } else {
#line 13 "../chardev/trace-events"
            qemu_log("spice_chr_discard_write " "spice chr write discarded %d" "\n", len);
#line 315 "trace/trace-chardev.h"
        }
    }
}

static inline void trace_spice_chr_discard_write(int len)
{
    if (true) {
        _nocheck__trace_spice_chr_discard_write(len);
    }
}

#define TRACE_SPICE_VMC_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPICE_VMC_WRITE) || \
    false)

static inline void _nocheck__trace_spice_vmc_write(ssize_t out, int len)
{
    if (trace_event_get_state(TRACE_SPICE_VMC_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 14 "../chardev/trace-events"
            qemu_log("%d@%zu.%06zu:spice_vmc_write " "spice wrote %zd of requested %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , out, len);
#line 342 "trace/trace-chardev.h"
        } else {
#line 14 "../chardev/trace-events"
            qemu_log("spice_vmc_write " "spice wrote %zd of requested %d" "\n", out, len);
#line 346 "trace/trace-chardev.h"
        }
    }
}

static inline void trace_spice_vmc_write(ssize_t out, int len)
{
    if (true) {
        _nocheck__trace_spice_vmc_write(out, len);
    }
}

#define TRACE_SPICE_VMC_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPICE_VMC_READ) || \
    false)

static inline void _nocheck__trace_spice_vmc_read(int bytes, int len)
{
    if (trace_event_get_state(TRACE_SPICE_VMC_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 15 "../chardev/trace-events"
            qemu_log("%d@%zu.%06zu:spice_vmc_read " "spice read %d of requested %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , bytes, len);
#line 373 "trace/trace-chardev.h"
        } else {
#line 15 "../chardev/trace-events"
            qemu_log("spice_vmc_read " "spice read %d of requested %d" "\n", bytes, len);
#line 377 "trace/trace-chardev.h"
        }
    }
}

static inline void trace_spice_vmc_read(int bytes, int len)
{
    if (true) {
        _nocheck__trace_spice_vmc_read(bytes, len);
    }
}

#define TRACE_SPICE_VMC_REGISTER_INTERFACE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPICE_VMC_REGISTER_INTERFACE) || \
    false)

static inline void _nocheck__trace_spice_vmc_register_interface(void * scd)
{
    if (trace_event_get_state(TRACE_SPICE_VMC_REGISTER_INTERFACE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "../chardev/trace-events"
            qemu_log("%d@%zu.%06zu:spice_vmc_register_interface " "spice vmc registered interface %p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , scd);
#line 404 "trace/trace-chardev.h"
        } else {
#line 16 "../chardev/trace-events"
            qemu_log("spice_vmc_register_interface " "spice vmc registered interface %p" "\n", scd);
#line 408 "trace/trace-chardev.h"
        }
    }
}

static inline void trace_spice_vmc_register_interface(void * scd)
{
    if (true) {
        _nocheck__trace_spice_vmc_register_interface(scd);
    }
}

#define TRACE_SPICE_VMC_UNREGISTER_INTERFACE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPICE_VMC_UNREGISTER_INTERFACE) || \
    false)

static inline void _nocheck__trace_spice_vmc_unregister_interface(void * scd)
{
    if (trace_event_get_state(TRACE_SPICE_VMC_UNREGISTER_INTERFACE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 17 "../chardev/trace-events"
            qemu_log("%d@%zu.%06zu:spice_vmc_unregister_interface " "spice vmc unregistered interface %p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , scd);
#line 435 "trace/trace-chardev.h"
        } else {
#line 17 "../chardev/trace-events"
            qemu_log("spice_vmc_unregister_interface " "spice vmc unregistered interface %p" "\n", scd);
#line 439 "trace/trace-chardev.h"
        }
    }
}

static inline void trace_spice_vmc_unregister_interface(void * scd)
{
    if (true) {
        _nocheck__trace_spice_vmc_unregister_interface(scd);
    }
}

#define TRACE_SPICE_VMC_EVENT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPICE_VMC_EVENT) || \
    false)

static inline void _nocheck__trace_spice_vmc_event(int event)
{
    if (trace_event_get_state(TRACE_SPICE_VMC_EVENT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 18 "../chardev/trace-events"
            qemu_log("%d@%zu.%06zu:spice_vmc_event " "spice vmc event %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , event);
#line 466 "trace/trace-chardev.h"
        } else {
#line 18 "../chardev/trace-events"
            qemu_log("spice_vmc_event " "spice vmc event %d" "\n", event);
#line 470 "trace/trace-chardev.h"
        }
    }
}

static inline void trace_spice_vmc_event(int event)
{
    if (true) {
        _nocheck__trace_spice_vmc_event(event);
    }
}

#define TRACE_CHR_SOCKET_POLL_ERR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CHR_SOCKET_POLL_ERR) || \
    false)

static inline void _nocheck__trace_chr_socket_poll_err(void * chrdev, const char * label)
{
    if (trace_event_get_state(TRACE_CHR_SOCKET_POLL_ERR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 21 "../chardev/trace-events"
            qemu_log("%d@%zu.%06zu:chr_socket_poll_err " "chardev socket poll error %p (%s)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , chrdev, label);
#line 497 "trace/trace-chardev.h"
        } else {
#line 21 "../chardev/trace-events"
            qemu_log("chr_socket_poll_err " "chardev socket poll error %p (%s)" "\n", chrdev, label);
#line 501 "trace/trace-chardev.h"
        }
    }
}

static inline void trace_chr_socket_poll_err(void * chrdev, const char * label)
{
    if (true) {
        _nocheck__trace_chr_socket_poll_err(chrdev, label);
    }
}

#define TRACE_CHR_SOCKET_RECV_ERR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CHR_SOCKET_RECV_ERR) || \
    false)

static inline void _nocheck__trace_chr_socket_recv_err(void * chrdev, const char * label, const char * err)
{
    if (trace_event_get_state(TRACE_CHR_SOCKET_RECV_ERR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 22 "../chardev/trace-events"
            qemu_log("%d@%zu.%06zu:chr_socket_recv_err " "chardev socket recv error %p (%s): %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , chrdev, label, err);
#line 528 "trace/trace-chardev.h"
        } else {
#line 22 "../chardev/trace-events"
            qemu_log("chr_socket_recv_err " "chardev socket recv error %p (%s): %s" "\n", chrdev, label, err);
#line 532 "trace/trace-chardev.h"
        }
    }
}

static inline void trace_chr_socket_recv_err(void * chrdev, const char * label, const char * err)
{
    if (true) {
        _nocheck__trace_chr_socket_recv_err(chrdev, label, err);
    }
}

#define TRACE_CHR_SOCKET_RECV_EOF_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CHR_SOCKET_RECV_EOF) || \
    false)

static inline void _nocheck__trace_chr_socket_recv_eof(void * chrdev, const char * label)
{
    if (trace_event_get_state(TRACE_CHR_SOCKET_RECV_EOF) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 23 "../chardev/trace-events"
            qemu_log("%d@%zu.%06zu:chr_socket_recv_eof " "chardev socket recv end-of-file %p (%s)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , chrdev, label);
#line 559 "trace/trace-chardev.h"
        } else {
#line 23 "../chardev/trace-events"
            qemu_log("chr_socket_recv_eof " "chardev socket recv end-of-file %p (%s)" "\n", chrdev, label);
#line 563 "trace/trace-chardev.h"
        }
    }
}

static inline void trace_chr_socket_recv_eof(void * chrdev, const char * label)
{
    if (true) {
        _nocheck__trace_chr_socket_recv_eof(chrdev, label);
    }
}

#define TRACE_CHR_SOCKET_WRITE_ERR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CHR_SOCKET_WRITE_ERR) || \
    false)

static inline void _nocheck__trace_chr_socket_write_err(void * chrdev, const char * label, const char * err)
{
    if (trace_event_get_state(TRACE_CHR_SOCKET_WRITE_ERR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 24 "../chardev/trace-events"
            qemu_log("%d@%zu.%06zu:chr_socket_write_err " "chardev socket write error %p (%s): %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , chrdev, label, err);
#line 590 "trace/trace-chardev.h"
        } else {
#line 24 "../chardev/trace-events"
            qemu_log("chr_socket_write_err " "chardev socket write error %p (%s): %s" "\n", chrdev, label, err);
#line 594 "trace/trace-chardev.h"
        }
    }
}

static inline void trace_chr_socket_write_err(void * chrdev, const char * label, const char * err)
{
    if (true) {
        _nocheck__trace_chr_socket_write_err(chrdev, label, err);
    }
}

#define TRACE_CHR_SOCKET_DISCONNECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CHR_SOCKET_DISCONNECT) || \
    false)

static inline void _nocheck__trace_chr_socket_disconnect(void * chrdev, const char * label)
{
    if (trace_event_get_state(TRACE_CHR_SOCKET_DISCONNECT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 25 "../chardev/trace-events"
            qemu_log("%d@%zu.%06zu:chr_socket_disconnect " "chardev socket disconnect %p (%s)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , chrdev, label);
#line 621 "trace/trace-chardev.h"
        } else {
#line 25 "../chardev/trace-events"
            qemu_log("chr_socket_disconnect " "chardev socket disconnect %p (%s)" "\n", chrdev, label);
#line 625 "trace/trace-chardev.h"
        }
    }
}

static inline void trace_chr_socket_disconnect(void * chrdev, const char * label)
{
    if (true) {
        _nocheck__trace_chr_socket_disconnect(chrdev, label);
    }
}

#define TRACE_CHR_SOCKET_HANGUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CHR_SOCKET_HANGUP) || \
    false)

static inline void _nocheck__trace_chr_socket_hangup(void * chrdev, const char * label)
{
    if (trace_event_get_state(TRACE_CHR_SOCKET_HANGUP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 26 "../chardev/trace-events"
            qemu_log("%d@%zu.%06zu:chr_socket_hangup " "chardev socket hangup %p (%s)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , chrdev, label);
#line 652 "trace/trace-chardev.h"
        } else {
#line 26 "../chardev/trace-events"
            qemu_log("chr_socket_hangup " "chardev socket hangup %p (%s)" "\n", chrdev, label);
#line 656 "trace/trace-chardev.h"
        }
    }
}

static inline void trace_chr_socket_hangup(void * chrdev, const char * label)
{
    if (true) {
        _nocheck__trace_chr_socket_hangup(chrdev, label);
    }
}

#define TRACE_CHR_SOCKET_WS_HANDSHAKE_ERR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CHR_SOCKET_WS_HANDSHAKE_ERR) || \
    false)

static inline void _nocheck__trace_chr_socket_ws_handshake_err(void * chrdev, const char * label, const char * err)
{
    if (trace_event_get_state(TRACE_CHR_SOCKET_WS_HANDSHAKE_ERR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 27 "../chardev/trace-events"
            qemu_log("%d@%zu.%06zu:chr_socket_ws_handshake_err " "chardev socket websock handshake error %p (%s): %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , chrdev, label, err);
#line 683 "trace/trace-chardev.h"
        } else {
#line 27 "../chardev/trace-events"
            qemu_log("chr_socket_ws_handshake_err " "chardev socket websock handshake error %p (%s): %s" "\n", chrdev, label, err);
#line 687 "trace/trace-chardev.h"
        }
    }
}

static inline void trace_chr_socket_ws_handshake_err(void * chrdev, const char * label, const char * err)
{
    if (true) {
        _nocheck__trace_chr_socket_ws_handshake_err(chrdev, label, err);
    }
}

#define TRACE_CHR_SOCKET_TLS_HANDSHAKE_ERR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CHR_SOCKET_TLS_HANDSHAKE_ERR) || \
    false)

static inline void _nocheck__trace_chr_socket_tls_handshake_err(void * chrdev, const char * label, const char * err)
{
    if (trace_event_get_state(TRACE_CHR_SOCKET_TLS_HANDSHAKE_ERR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 28 "../chardev/trace-events"
            qemu_log("%d@%zu.%06zu:chr_socket_tls_handshake_err " "chardev socket TLS handshake error %p (%s): %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , chrdev, label, err);
#line 714 "trace/trace-chardev.h"
        } else {
#line 28 "../chardev/trace-events"
            qemu_log("chr_socket_tls_handshake_err " "chardev socket TLS handshake error %p (%s): %s" "\n", chrdev, label, err);
#line 718 "trace/trace-chardev.h"
        }
    }
}

static inline void trace_chr_socket_tls_handshake_err(void * chrdev, const char * label, const char * err)
{
    if (true) {
        _nocheck__trace_chr_socket_tls_handshake_err(chrdev, label, err);
    }
}

#define TRACE_CHR_SOCKET_TLS_INIT_ERR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CHR_SOCKET_TLS_INIT_ERR) || \
    false)

static inline void _nocheck__trace_chr_socket_tls_init_err(void * chrdev, const char * label, const char * err)
{
    if (trace_event_get_state(TRACE_CHR_SOCKET_TLS_INIT_ERR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 29 "../chardev/trace-events"
            qemu_log("%d@%zu.%06zu:chr_socket_tls_init_err " "chardev socket TLS init error %p (%s): %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , chrdev, label, err);
#line 745 "trace/trace-chardev.h"
        } else {
#line 29 "../chardev/trace-events"
            qemu_log("chr_socket_tls_init_err " "chardev socket TLS init error %p (%s): %s" "\n", chrdev, label, err);
#line 749 "trace/trace-chardev.h"
        }
    }
}

static inline void trace_chr_socket_tls_init_err(void * chrdev, const char * label, const char * err)
{
    if (true) {
        _nocheck__trace_chr_socket_tls_init_err(chrdev, label, err);
    }
}
#endif /* TRACE_CHARDEV_GENERATED_TRACERS_H */
